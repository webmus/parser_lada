<?xml version="1.0" encoding="utf-8"?>
<dleplugin>
	<name>Парсинг и рерайт новостей</name>
	<description></description>
	<icon></icon>
	<version>1.1.27</version>
	<dleversion></dleversion>
	<versioncompare>==</versioncompare>
	<upgradeurl></upgradeurl>
	<filedelete>0</filedelete>
	<needplugin></needplugin>
	<mnotice>0</mnotice>
	<mysqlinstall><![CDATA[alter table {prefix}_post add url text not null default '';
alter table {prefix}_post add url_hash char(32) not null default '';
update {prefix}_post set url_hash = md5(lower(trim(url))) where url != '';
alter table {prefix}_post add unique key idx_post_url_hash (url_hash);
alter table {prefix}_post add rewrite_done int(4) not null default 0;
alter table {prefix}_post add rewrite_date int(11) not null default 0;
alter table {prefix}_post add original_story text not null default '';

alter table {prefix}_comments add rewrite_date int(11) not null default 0;
alter table {prefix}_comments add gpt_comment int(4) not null default 0;

INSERT INTO `{prefix}_admin_sections` (`name`, `title`, `descr`, `icon`, `allow_groups`) VALUES ('news_rewrite', 'Парсинг и рерайт новостей', 'news_rewrite', '', '1');]]></mysqlinstall>
	<mysqlupgrade><![CDATA[]]></mysqlupgrade>
	<mysqlenable><![CDATA[]]></mysqlenable>
	<mysqldisable><![CDATA[]]></mysqldisable>
	<mysqldelete><![CDATA[]]></mysqldelete>
	<phpinstall><![CDATA[]]></phpinstall>
	<phpupgrade><![CDATA[]]></phpupgrade>
	<phpenable><![CDATA[]]></phpenable>
	<phpdisable><![CDATA[]]></phpdisable>
	<phpdelete><![CDATA[]]></phpdelete>
	<notice><![CDATA[]]></notice>
	<file name="engine/inc/news_rewrite.php">
		<operation action="create">
			<replacecode><![CDATA[<?PHP
if( !defined( 'DATALIFEENGINE' ) OR !defined( 'LOGGED_IN' ) ) {
	header( "HTTP/1.1 403 Forbidden" );
	header ( 'Location: ../../' );
	die( "Hacking attempt!" );
}

	if( !is_dir( ENGINE_DIR . "/parser" ) ) {
		@mkdir( ENGINE_DIR . "/parser", 0777 );
		@chmod( ENGINE_DIR . "/parser", 0777 );
	}
	
	$action = $_POST['action'];
	
	if ($action == "") $action = $_GET['action'];
	
	
	if ($action == "settings")
	{
		$arr = array();
	
		$arr['parse_posters'] = (int)$_POST['do_parse_photo'];
		$arr['parse_photos'] = (int)$_POST['do_parse_photo_all'];
		$arr['delete_photos'] = (int)$_POST['delete_photos'];
		
		$json = json_encode($arr, JSON_UNESCAPED_UNICODE);
		file_put_contents(ENGINE_DIR . "/data/news_parser.dat", $json);
      
       $url = $PHP_SELF."?mod=news_rewrite";
       header('location: ' . $url);
       die();
	}

  
	$overall_settings = file_get_contents(ENGINE_DIR . "/data/news_parser.dat");
	$overall_settings = json_decode($overall_settings, true);

	$delete_photos_0 = "selected";
	$delete_photos_1 = "";
	
	if ($overall_settings['delete_photos'] == "1")
	{
		$delete_photos_0 = "";
		$delete_photos_1 = "selected";
	}

	
	$do_parse_photo_0 = "selected";
	$do_parse_photo_1 = "";
	$do_parse_photo_all_0 = "selected";
	$do_parse_photo_all_1 = "";	
	
	if ($overall_settings['parse_posters'] == "1")
	{
		$do_parse_photo_0 = "";
		$do_parse_photo_1 = "selected";
	}
	if ($overall_settings['parse_photos'] == "1")
	{
		$do_parse_photo_all_0 = "";
		$do_parse_photo_all_1 = "selected";
	}	
	if ($action == "delete")
	{
		$id = $_GET['id'];
		$id = str_replace("..", "", $id);
		
		unlink(ENGINE_DIR . "/parser/".$id);
		$url = "$PHP_SELF?mod=news_rewrite";
		header('location: '.$url);
		die();
	}
	
	if ($_POST['action'] == "add")
	{
		$item = array();
		
		$item['source'] = $_POST['source'];
		$item['source_link'] = $_POST['source_link'];
		$item['parsed_time'] = "-";
		$item['enabled'] = "1";
		
		$item['cat'] = $_POST['cat'];
		
		$item['gpt_key'] = $_POST['gpt_key'];
		$item['gpt_model'] = $_POST['gpt_model'];
		$item['gpt_temperature'] = $_POST['gpt_temperature'];
		
		$item['prompt_short'] = $_POST['prompt_short'];
		$item['short_enabled'] = $_POST['short_enabled'];
		$item['prompt_full'] = $_POST['prompt_full'];
		$item['full_enabled'] = $_POST['full_enabled'];

		$item['prompt_title'] = $_POST['prompt_title'];
		$item['title_enabled'] = $_POST['title_enabled'];			
		
		$item['prompt_metatitle'] = $_POST['prompt_metatitle'];
		$item['metatitle_enabled'] = $_POST['metatitle_enabled'];
		$item['prompt_descr'] = $_POST['prompt_descr'];
		$item['descr_enabled'] = $_POST['descr_enabled'];
		$item['type_rewrite'] = $_POST['type_rewrite'];
		
        $item['db_prompts'] = $_POST['db_prompts'];
      
		$item['movie_cat'] = $_POST['movie_cat'];
		
		$item['name_prompt'] = $_POST['name_prompt'];
		$item['comment_prompt'] = $_POST['comment_prompt'];
		$item['max_comments'] = $_POST['max_comments'];
		$item['count_comments'] = $_POST['count_comments'];
		$item['news_date'] = $_POST['news_date'];
		$item['post_count'] = $_POST['post_count'];
		$item['post_date'] = $_POST['post_date'];		
		
		$item['enabled'] = 1;
		
		$file_name = time();
		
		$json = json_encode($item, JSON_UNESCAPED_UNICODE);
		file_put_contents(ENGINE_DIR . "/parser/" . $file_name . ".dat", $json);

		echoheader( "<i class=\"fa fa-filter position-left\"></i><span class=\"text-semibold\">Парсинг и рерайт</span>", "Добавление" );

		
		echo <<<HTML
		<div class="panel panel-default">
  <div class="panel-heading">
    Добавление источника
  </div>
  <div class="panel-body">

	<center>
		<br/><br/>
		<h2>Новый источник добавлен</h2>
		<br/><br/>
		<a href="$PHP_SELF?mod=news_rewrite" class="btn bg-brown-600 btn-sm">Вернуться назад</a>
		<br/><br/>
	</center>

  </div>
</div>
HTML;
	}
	
	if ($_POST['action'] == "save")
	{
		
		$file_name = $_POST['id'];
		
		$item = array();
		
		$item['source'] = $_POST['source'];
		$item['source_link'] = $_POST['source_link'];
		$item['parsed_time'] = "-";
		$item['enabled'] = "1";
		
		$item['cat'] = $_POST['cat'];
		
		$item['gpt_key'] = $_POST['gpt_key'];
		$item['gpt_model'] = $_POST['gpt_model'];
		$item['gpt_temperature'] = $_POST['gpt_temperature'];
		
		$item['prompt_short'] = $_POST['prompt_short'];
		$item['short_enabled'] = $_POST['short_enabled'];
		$item['prompt_full'] = $_POST['prompt_full'];
		$item['full_enabled'] = $_POST['full_enabled'];

		$item['prompt_title'] = $_POST['prompt_title'];
		$item['title_enabled'] = $_POST['title_enabled'];			
		
		$item['prompt_metatitle'] = $_POST['prompt_metatitle'];
		$item['metatitle_enabled'] = $_POST['metatitle_enabled'];
		$item['prompt_descr'] = $_POST['prompt_descr'];
		$item['descr_enabled'] = $_POST['descr_enabled'];
        $item['db_prompts'] = $_POST['db_prompts'];
      
		$item['type_rewrite'] = $_POST['type_rewrite'];
		
		$item['movie_cat'] = $_POST['movie_cat'];
		
		$item['name_prompt'] = $_POST['name_prompt'];
		$item['comment_prompt'] = $_POST['comment_prompt'];
		$item['max_comments'] = $_POST['max_comments'];
		$item['count_comments'] = $_POST['count_comments'];
		$item['news_date'] = $_POST['news_date'];
		$item['post_count'] = $_POST['post_count'];
		$item['post_date'] = $_POST['post_date'];		
		
		$item['mybuh_parse_all'] = $_POST['mybuh_parse_all'];
		
		$item['enabled'] = (int)$_POST['enabled'];
		
		$json = json_encode($item, JSON_UNESCAPED_UNICODE);
		file_put_contents(ENGINE_DIR . "/parser/" . $file_name . ".dat", $json);

		echoheader( "<i class=\"fa fa-filter position-left\"></i><span class=\"text-semibold\">Парсинг и рерайт</span>", "Сохранение" );

		
		echo <<<HTML
		<div class="panel panel-default">
  <div class="panel-heading">
    Сохранение источника
  </div>
  <div class="panel-body">

	<center>
		<br/><br/>
		<h2>Запись обновленна</h2>
		<br/><br/>
		<a href="$PHP_SELF?mod=news_rewrite" class="btn bg-brown-600 btn-sm">Вернуться назад</a>
		<br/><br/>
	</center>

  </div>
</div>
HTML;
	}
	
	if ($action == "edit")
	{
		echoheader( "<i class=\"fa fa-filter position-left\"></i><span class=\"text-semibold\">Парсинг и рерайт</span>", "Редактирование" );
				
		$file_name = $_GET['id'];
				
		$json = file_get_contents(ENGINE_DIR . "/parser/" . $file_name . ".dat");
		$settings = json_decode($json, true);
		
		$title_enabled_0 = "";
		$title_enabled_1 = "";
		if ($settings['title_enabled'] == 0) $title_enabled_0 = "selected";
		if ($settings['title_enabled'] == 1) $title_enabled_1 = "selected";		
		
		$metatitle_enabled_0 = "";
		$metatitle_enabled_1 = "";
		if ($settings['metatitle_enabled'] == 0) $metatitle_enabled_0 = "selected";
		if ($settings['metatitle_enabled'] == 1) $metatitle_enabled_1 = "selected";
		
		$descr_enabled_0 = "";
		$descr_enabled_1 = "";
		if ($settings['descr_enabled'] == 0) $descr_enabled_0 = "selected";
		if ($settings['descr_enabled'] == 1) $descr_enabled_1 = "selected";

      	$db_prompts_enabled_0 = "";
		$db_prompts_enabled_1 = "";
		if ($settings['db_prompts'] == 0) $db_prompts_enabled_0 = "selected";
		if ($settings['db_prompts'] == 1) $db_prompts_enabled_1 = "selected";
      
		$short_enabled_0 = "";
		$short_enabled_1 = "";	
		if ($settings['short_enabled'] == 0) $short_enabled_0 = "selected";
		if ($settings['short_enabled'] == 1) $short_enabled_1 = "selected";
		
		$full_enabled_0 = "";
		$full_enabled_1 = "";
		if ($settings['full_enabled'] == 0) $full_enabled_0 = "selected";
		if ($settings['full_enabled'] == 1) $full_enabled_1 = "selected";


		$type_rewrite_0 = "";
		$type_rewrite_1 = "";
		$type_rewrite_2 = "";
		if ($settings['type_rewrite'] == 0) $type_rewrite_0 = "selected";
		if ($settings['type_rewrite'] == 1) $type_rewrite_1 = "selected";
		if ($settings['type_rewrite'] == 2) $type_rewrite_2 = "selected";		

		$cat_list = "";
		foreach ($cat_info as $cat)
		{
			$selected = "";
			
			if($settings['cat'] == $cat['id'])$selected = "selected";
			
			$cat_list .= <<<HTML
				<option {$selected} value="{$cat['id']}">{$cat['name']}</option>
HTML;
		}
		
		$enabled = isset($settings['enabled']) ? (int)$settings['enabled'] : 0;
		$enabled_1 = ($enabled === 1) ? "selected" : "";
		$enabled_0 = ($enabled === 0) ? "selected" : "";

                $kyzylorda_news_selected = "";
                $mgorod_selected = "";
                $otyrar_selected = "";
                $diapazon_selected = "";
                $pavlodarnews_selected = "";
                $azh_selected = "";
                $lada_selected = "";

                $tengri_selected = "";
                $buh_selected = "";
                $mybuh_alluseful_selected = "";

		if ($settings['source'] == "kyzylorda_news")
		{
			$kyzylorda_news_selected = "selected";
		}
		if ($settings['source'] == "mgorod")
		{
			$mgorod_selected = "selected";
		}
		if ($settings['source'] == "otyrar")
		{
			$otyrar_selected = "selected";
		}
		if ($settings['source'] == "diapazon")
		{
			$diapazon_selected = "selected";
		}
		if ($settings['source'] == "pavlodarnews")
		{
			$pavlodarnews_selected = "selected";
		}
                if ($settings['source'] == "azh")
                {
                        $azh_selected = "selected";
                }
                if ($settings['source'] == "lada")
                {
                        $lada_selected = "selected";
                }
                if ($settings['source'] == "tengri")
                {
                        $tengri_selected = "selected";
                }
		
		if ($settings['source'] == "mybuh_news")
		{
			$buh_selected = "selected";
		}
		
		if ($settings['source'] == "mybuh_alluseful")
		{
			$mybuh_alluseful_selected = "selected";
		}		
		
		$mybuh_tr = "style=\"display:none;\"";
		$mybuh_parse_all_checked = "";
		if ($settings['mybuh_parse_all'] == "1")
		{
			$mybuh_tr = "";
			$mybuh_parse_all_checked = "checked";
		}	
		echo <<<HTML
		
<div class="panel panel-default">
  <div class="panel-heading">
   Редактирование источника
  </div>
  <div class="panel-body">
    <form id="saveForm" method="post" action="$PHP_SELF?mod=news_rewrite">
	<input type="hidden" name="mod" value="news_rewrite">
	<input type="hidden" name="action" value="save">
	<input type="hidden" name="id" value="{$file_name}">
	<table class="table">
		<tr>
			<td width="200">Работа парсера</td>
			<td>
				<select class="form-control" name="enabled" id="enabled">
					<option value="0" {$enabled_0}>Включен</option>
					<option value="1" {$enabled_1}>Выключен</option>
				</select>
			</td>
		</tr>
		<tr>
			<td width="200">Источник</td>
			<td>
				<select class="form-control" name="source" id="source">
					<option value="tengri" {$tengri_selected}>Tengrinews</option>
					<option value="mybuh_news" {$buh_selected}>Mybuh News</option>
					<option value="mybuh_alluseful" {$mybuh_alluseful_selected}>Mybuh Alluseful</option>
					
					<option value="kyzylorda_news" {$kyzylorda_news_selected}>Kyzylorda-news</option>
					<option value="mgorod" {$mgorod_selected}>Mgorod</option>
					<option value="otyrar" {$otyrar_selected}>Otyrar</option>
                                        <option value="diapazon" {$diapazon_selected}>Diapazon</option>
                                        <option value="pavlodarnews" {$pavlodarnews_selected}>Pavlodarnews</option>
                                        <option value="azh" {$azh_selected}>Azh</option>
                                        <option value="lada" {$lada_selected}>Lada.kz</option>
				</select>
				<script>
				  document.addEventListener('DOMContentLoaded', function () {
				  const select = document.getElementById('source');
				  const settingsRow = document.getElementById('mybuh_alluseful_settings');

				  function toggleSettings() {
					if (select.value === 'mybuh_alluseful') {
					  settingsRow.style.display = '';
					} else {
					  settingsRow.style.display = 'none';
					}
				  }

				  toggleSettings();

				  select.addEventListener('change', toggleSettings);
				});
				</script>				
			</td>
		</tr>
		<tr id="mybuh_alluseful_settings" {$mybuh_tr}>
			<td>
				&nbsp;
			</td>
			<td>
				<div class="checkbox">
					<label>
						<input class="icheck" type="checkbox" id="mybuh_parse_all" name="mybuh_parse_all" {$mybuh_parse_all_checked} value="1">Парсить все страницы
					</label>
				</div>
			</td>
		</tr>
		<tr>
			<td>Ссылка на источник</td>
			<td>
				<textarea style="height:200px;" class="form-control" name="source_link" id="source_link">{$settings['source_link']}</textarea>
				<br/><i>Каждая ссылка с новой строки</i>
			</td>			
		</tr>
		<tr>
			<td width="200">Категория на сайте</td>
			<td>
				<select class="form-control" name="cat" id="cat">
					{$cat_list}
				</select>
			</td>
		</tr>	
		<tr>
			<td width="200">GPT Ключ</td>
			<td>
				<input type="text" id="gpt_key" name="gpt_key" value="{$settings['gpt_key']}" class="form-control">
			</td>
		</tr>	
		<tr>
			<td>GPT модель</td>
			<td>
				<input type="text" id="gpt_model" name="gpt_model" value="{$settings['gpt_model']}" class="form-control">
			</td>
		</tr>	
		<tr>
			<td>GPT Temperature</td>
			<td>
				<input type="text" id="gpt_temperature" name="gpt_temperature" value="{$settings['gpt_temperature']}" class="form-control">
			</td>
		</tr>
		<tr>
			<td width="200">Сколько обрабатывать постов за один запуск скрипта</td>
			<td>
				<input type="text" id="post_count" name="post_count" value="{$settings['post_count']}" class="form-control">
			</td>
		</tr>	
		<tr>
			<td>Промпт для заголовка</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_title" name="prompt_title">{$settings['prompt_title']}</textarea><br/>
				<select class="form-control" id="title_enabled" name="title_enabled">
					<option value="0" $title_enabled_0>Выключен</option>
					<option value="1" $title_enabled_1>Включен</option>
				</select>
			</td>
		</tr>		
		<tr>
			<td>Промпт для краткой новости</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_short" name="prompt_short">{$settings['prompt_short']}</textarea><br/>
				<select class="form-control" id="short_enabled" name="short_enabled">
					<option value="0" $short_enabled_0>Выключен</option>
					<option value="1" $short_enabled_1>Включен</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Промпт для полной новости</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_full" name="prompt_full">{$settings['prompt_full']}</textarea><br/>
				<select class="form-control" id="full_enabled" name="full_enabled">
					<option value="0" $full_enabled_0>Выключен</option>
					<option value="1" $full_enabled_1>Включен</option>
				</select>
			</td>
		</tr>
		
		<tr>
			<td>Промпт для мета заголовка</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_metatitle" name="prompt_metatitle">{$settings['prompt_metatitle']}</textarea><br/>
				<select class="form-control" id="metatitle_enabled" name="metatitle_enabled">
					<option value="0" $metatitle_enabled_0>Выключен</option>
					<option value="1" $metatitle_enabled_1>Включен</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Промпт для мета описания</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_descr" name="prompt_descr">{$settings['prompt_descr']}</textarea><br/>
				<select class="form-control" id="descr_enabled" name="descr_enabled">
					<option value="0" $descr_enabled_0>Выключен</option>
					<option value="1" $descr_enabled_1>Включен</option>
				</select>
			</td>
		</tr>		

		<tr>
			<td>Использовать базу промптов</td>
			<td>
				<select class="form-control" id="db_prompts" name="db_prompts">
					<option value="0" $db_prompts_enabled_0>Не использовать</option>
					<option value="1" $db_prompts_enabled_1>Использовать</option>
				</select>
			</td>
		</tr>	
        
		<tr>
			<td colspan="2">
				<a href="#" class="btn bg-teal btn-sm legitRipple" onclick="doSaveSource(); return false;">Сохранить</a>
			</td>
		</tr>		
	</table>
	</form>
	
  </div>
</div>	

	<script>
		function doSaveSource()
		{
			var source_link = $("#source_link").val();
			var gpt_key = $("#gpt_key").val();
			var gpt_model = $("#gpt_model").val();
			var post_count = $("#post_count").val();
			var prompt_title = $("#prompt_title").val();
			var prompt_short = $("#prompt_short").val();
			var prompt_full = $("#prompt_full").val();
			var prompt_metatitle = $("#prompt_metatitle").val();
			var prompt_descr = $("#prompt_descr").val();
			
			if (source_link == '' || gpt_key == '' || gpt_model == '' || post_count == '' || prompt_title == '' || prompt_short == '' || prompt_full == '' || prompt_metatitle == '' || prompt_descr == '')
			{
				alert('Заполните все поля!');
			}
			else
			{
				$("#saveForm").submit();
			}
		}
	</script>		
		
HTML;
		
	}
	
	
	if ($action == "")
	{
		$list = "";
		$files = scandir(ENGINE_DIR . "/parser");

		foreach ($files as $file) {
			if (
				$file === '.' || 
				$file === '..' || 
				strtolower(pathinfo($file, PATHINFO_EXTENSION)) !== 'dat'
			) {
				continue;
			}

			$filePath = ENGINE_DIR . "/parser/" . $file;
			if (is_file($filePath)) {
			
				$json = file_get_contents($filePath);
				$settings = json_decode($json, true);
			
				$category_name = "";
				
				foreach ($cat_info as $cat)
				{
					if ($cat['id'] == $settings['cat'])
					{
						$category_name = $cat['name'];
					}
				}
				
				$parsed_time = $settings['parsed_time'];
			
				if ($parsed_time == "" || $parsed_time == "-") 
				{
					$parsed_time = "Запусков не было";
				}
				else
				{
					$parsed_time = date("d.m.Y H:i", $parsed_time);
				}
				$enabled_val = isset($settings['enabled']) ? (int)$settings['enabled'] : 0;
				if ($enabled_val === 1) {
					$enabled = "<i style=\"color:red;\" class=\"fa fa-times\"></i>";
				} else {
					$enabled = "<i style=\"color:green;\" class=\"fa fa-check\"></i>";
				}
				$file_clean = str_replace(".dat", "", $file);
				$decoded_link = urldecode($settings['source_link']);
$tag_name = basename(parse_url($decoded_link, PHP_URL_PATH));

$list .= <<<HTML


					<tr>
						<td>
    <div><strong>{$settings['source']}</strong></div>
    <!-- div style="font-size:11px;color:#555;">{$tag_name}</div -->
</td>
						<td>{$category_name}</td>
						<td>{$parsed_time}</td>
						<td>{$enabled}</td>
						<td>
							<a style="color:green;" href="$PHP_SELF?mod=news_rewrite&action=edit&id={$file_clean}">[Редактировать]</a>
							<a style="color:blue;" href="$PHP_SELF?mod=news_rewrite&action=start&id={$file_clean}">[Запустить тест]</a>
							<a style="color:red;" onclick="if (confirm('Удалить запись?')) {location='$PHP_SELF?mod=news_rewrite&action=delete&id={$file}';} return false;" href="#">[Удалить]</a>
						</td>
					</tr>			
			
HTML;

			}
		}

		$cat_list = "";
		foreach ($cat_info as $cat)
		{
			$cat_list .= <<<HTML
				<option value="{$cat['id']}">{$cat['name']}</option>
HTML;
		}



		$orders = "";
		
		if (file_exists(ENGINE_DIR . "/data/list.dat"))
		{
			$lines = file(ENGINE_DIR . "/data/list.dat", FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
			foreach ($lines as $line) {
				
				$arr = json_decode($line, true);
				if (!$arr) continue;			
				$order_time = date('Y-m-d H:i:s', $arr['time']);
				$order_title = $arr['title'];
				$order_link = $arr['post_link'];
				$order_status = $arr['status'];
				
				if ($order_status == "Спарсено") $order_status = "<font color='green'>$order_status</font>";
					
				$orders .= <<<HTML
			<tr>
				<td>$order_time</td>
				<td>$order_title</td>
				<td>$order_link</td>
				<td>$order_status</td>
			</tr>
HTML;
			}
		}



		echoheader( "<i class=\"fa fa-filter position-left\"></i><span class=\"text-semibold\">Парсинг и рерайт</span>", "Список источников" );

		echo <<<HTML
	
<div class="panel panel-default">
  <div class="panel-heading">
    Источники парсинга
  </div>
  <div class="panel-body">
	<table class="table">
		<tr>
			<th>Источник</th>
			<th>Категория</th>
			<th>Последнее обновление</th>
			<th>Статус</th>
			<th>&nbsp;</th>
		</tr>
		$list
	</table>
  </div>
</div>  

<div class="panel panel-default">
  <div class="panel-heading">
   Добавление нового источника
  </div>
  <div class="panel-body">
    <form id="addForm" method="post" action="$PHP_SELF?mod=news_rewrite">
	<input type="hidden" name="mod" value="news_rewrite">
	<input type="hidden" name="action" value="add">
	<table class="table">
		<tr>
			<td width="200">Источник</td>
			<td>
				<select class="form-control" name="source" id="source">
					<option value="tengri"> Tengrinews</option>
					<option value="mybuh_news"> Mybuh News</option>
					<option value="mybuh_alluseful"> Mybuh Alluseful</option>
					
					<option value="kyzylorda_news">Kyzylorda-news</option>
					<option value="mgorod">Mgorod</option>
					<option value="otyrar">Otyrar</option>
                                        <option value="diapazon">Diapazon</option>
                                        <option value="pavlodarnews">Pavlodarnews</option>
                                        <option value="azh">Azh</option>
                                        <option value="lada">Lada.kz</option>
                                </select>
				<script>
				  document.addEventListener('DOMContentLoaded', function () {
				  const select = document.getElementById('source');
				  const settingsRow = document.getElementById('mybuh_alluseful_settings');

				  function toggleSettings() {
					if (select.value === 'mybuh_alluseful') {
					  settingsRow.style.display = '';
					} else {
					  settingsRow.style.display = 'none';
					}
				  }

				  toggleSettings();

				  select.addEventListener('change', toggleSettings);
				});
				</script>				
			</td>
		</tr>
		<tr id="mybuh_alluseful_settings" style="display:none;">
			<td>
				&nbsp;
			</td>
			<td>
				<div class="checkbox">
					<label>
						<input class="icheck" type="checkbox" id="mybuh_parse_all" name="mybuh_parse_all" value="1">Парсить все страницы
					</label>
				</div>
			</td>
		</tr>
		<tr>
			<td>Ссылка на источник</td>
			<td>
				<textarea style="height:200px;" class="form-control" name="source_link" id="source_link"></textarea>
				<br/><i>Каждая ссылка с новой строки</i>
			</td>			
		</tr>
		<tr>
			<td width="200">Категория на сайте</td>
			<td>
				<select class="form-control" name="cat" id="cat">
					{$cat_list}
				</select>
			</td>
		</tr>	
		<tr>
			<td width="200">GPT Ключ</td>
			<td>
				<input type="text" id="gpt_key" name="gpt_key" value="" class="form-control">
			</td>
		</tr>	
		<tr>
			<td>GPT модель</td>
			<td>
				<input type="text" id="gpt_model" name="gpt_model" value="" class="form-control">
			</td>
		</tr>	
		<tr>
			<td>GPT Temperature</td>
			<td>
				<input type="text" id="gpt_temperature" name="gpt_temperature" value="" class="form-control">
			</td>
		</tr>		
		
		<tr>
			<td width="200">Сколько обрабатывать постов за один запуск скрипта</td>
			<td>
				<input type="text" id="post_count" name="post_count" value="{$settings['post_count']}" class="form-control">
			</td>
		</tr>	
		<tr>
			<td>Промпт для заголовка</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_title" name="prompt_title">Перефразируй [title]. Не ставь точку.</textarea><br/>
				<select class="form-control" id="title_enabled" name="title_enabled">
					<option value="0">Выключен</option>
					<option value="1" selected>Включен</option>
				</select>
			</td>
		</tr>		
		<tr>
			<td>Промпт для краткой новости</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_short" name="prompt_short">Изучи и сделай анализ текста: "[full-story]". Напиши краткий смысл новости или события  до 250 символов. Убери упоминание про Tengri, tengrinews и похожее в этом стиле.</textarea><br/>
				<select class="form-control" id="short_enabled" name="short_enabled">
					<option value="0">Выключен</option>
					<option value="1" selected>Включен</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Промпт для полной новости</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_full" name="prompt_full">Перепиши текст внутри HTML, сохранив структуру и все медиа-теги (<img>, <video>, <iframe>). Меняй только текст в тегах <p>, <h1>–<h6>, <li>, <span>, <strong>, <em>. Удали ссылки, упоминания источников и markdown. Верни чистый HTML. HTML: [full-story]</textarea><br/>
				<select class="form-control" id="full_enabled" name="full_enabled">
					<option value="0">Выключен</option>
					<option value="1" selected>Включен</option>
				</select>
			</td>
		</tr>
		
		<tr>
			<td>Промпт для мета заголовка</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_metatitle" name="prompt_metatitle">Напиши текстом мета заголовок (длиной до 140 символов) для страницы новости: "[title]" без точек и двоеточий.</textarea><br/>
				<select class="form-control" id="metatitle_enabled" name="metatitle_enabled">
					<option value="0">Выключен</option>
					<option value="1" selected>Включен</option>
				</select>
			</td>
		</tr>
		<tr>
			<td>Промпт для мета описания</td>
			<td>
				<textarea rows="6" class="form-control classic" id="prompt_descr" name="prompt_descr">Напиши чистый текст для мета-тега Description (до 250 символов) для страницы новости "[title]"</textarea><br/>
				<select class="form-control" id="descr_enabled" name="descr_enabled">
					<option value="0">Выключен</option>
					<option value="1" selected>Включен</option>
				</select>
			</td>
		</tr>		
		<tr>
			<td>Использовать базу промптов</td>
			<td>
				<select class="form-control" id="db_prompts" name="db_prompts">
					<option value="0" selected>Не использовать</option>
					<option value="1">Использовать</option>
				</select>
			</td>
		</tr>
		<tr>
			<td colspan="2">
				<a href="#" class="btn bg-teal btn-sm legitRipple" onclick="doAddSource(); return false;">Добавить источник</a>
                  <a href="$PHP_SELF?mod=prompts_db" class="btn bg-teal btn-sm legitRipple">База промптов</a>
			</td>
		</tr>		
	</table>
	</form>
	
  </div>
</div>	

<div class="panel panel-default">
  <div class="panel-heading">
    Очередь
  </div>
  <div class="panel-body">
	<table class="table">
		<tr>
			<th>Время</th>
			<th>Заголовок</th>
			<th>Ссылка</th>
			<th>Статус</th>
		</tr>

		$orders
	
	</table>
  </div>
</div>  

	<script>
		function doAddSource()
		{
			var source_link = $("#source_link").val();
			var gpt_key = $("#gpt_key").val();
			var gpt_model = $("#gpt_model").val();
			var post_count = $("#post_count").val();
			var prompt_title = $("#prompt_title").val();
			var prompt_short = $("#prompt_short").val();
			var prompt_full = $("#prompt_full").val();
			var prompt_metatitle = $("#prompt_metatitle").val();
			var prompt_descr = $("#prompt_descr").val();
			
			if (source_link == '' || gpt_key == '' || gpt_model == '' || post_count == '' || prompt_title == '' || prompt_short == '' || prompt_full == '' || prompt_metatitle == '' || prompt_descr == '')
			{
				alert('Заполните все поля!');
			}
			else
			{
				$("#addForm").submit();
			}
		}
	</script>

HTML;
	}
echofooter();
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/gpt_editnews.php">
		<operation action="create">
			<replacecode><![CDATA[<?PHP
/*
=====================================================
 DataLife Engine - by SoftNews Media Group
-----------------------------------------------------
 http://dle-news.ru/
-----------------------------------------------------
 Copyright (c) 2004-2021 SoftNews Media Group
=====================================================
 This code is protected by copyright
=====================================================
 File: editnews.php
-----------------------------------------------------
 Use: News edit
=====================================================
*/
if( !defined( 'DATALIFEENGINE' ) OR !defined( 'LOGGED_IN' ) ) {
	header( "HTTP/1.1 403 Forbidden" );
	header ( 'Location: ../../' );
	die( "Hacking attempt!" );
}

if( ! $user_group[$member_id['user_group']]['admin_editnews'] ) {
	msg( "error", $lang['addnews_denied'], $lang['edit_denied'] );
}

if( isset( $_REQUEST['author'] ) ) $author = $db->safesql( trim( htmlspecialchars( $_REQUEST['author'], ENT_QUOTES, $config['charset'] ) ) ); else $author = "";
if( isset( $_REQUEST['ifdelete'] ) ) $ifdelete = $_REQUEST['ifdelete']; else $ifdelete = "";
if( isset( $_REQUEST['news_fixed'] ) ) $news_fixed = $_REQUEST['news_fixed']; else $news_fixed = "";
if ( !$action ) $action = "list";

$parse = new ParseFilter();

if( $action == "list" ) {

	$_SESSION['admin_referrer'] = htmlspecialchars($_SERVER['REQUEST_URI'], ENT_QUOTES, $config['charset'] );

	echoheader( "<i class=\"fa fa-pencil-square-o position-left\"></i><span class=\"text-semibold\">{$lang['header_ed_title']}</span>", $lang['edit_head'] );

	$_REQUEST['search_field'] = isset($_REQUEST['search_field']) ? $_REQUEST['search_field'] : '';
	$_REQUEST['search_author'] = isset($_REQUEST['search_author']) ? $_REQUEST['search_author'] : '';
	$_REQUEST['fromnewsdate'] = isset($_REQUEST['fromnewsdate']) ? $_REQUEST['fromnewsdate'] : '';
	$_REQUEST['tonewsdate'] = isset($_REQUEST['tonewsdate']) ? $_REQUEST['tonewsdate'] : '';
	$_REQUEST['search_cat'] = isset($_REQUEST['search_cat']) ? $_REQUEST['search_cat'] : '';
	$comb_cat = false;
	
	$search_field = $db->safesql( addslashes(addslashes(trim( urldecode( $_REQUEST['search_field'] ) ) ) ) );
	$search_author = $db->safesql( trim( htmlspecialchars( stripslashes( urldecode( $_REQUEST['search_author'] ) ), ENT_QUOTES, $config['charset'] ) ) );
	$fromnewsdate = $db->safesql( trim( htmlspecialchars( stripslashes( $_REQUEST['fromnewsdate'] ), ENT_QUOTES, $config['charset'] ) ) );
	$tonewsdate = $db->safesql( trim( htmlspecialchars( stripslashes( $_REQUEST['tonewsdate'] ), ENT_QUOTES, $config['charset'] ) ) );

	
	if( !is_array($_REQUEST['search_cat']) ) $_REQUEST['search_cat'] = array ();
		
	if( !count( $_REQUEST['search_cat'] ) ) {
		
		$search_cat = array ();
		$search_cat[] = '0';
			
	} else $search_cat = $_REQUEST['search_cat'];

	$category_list = array();
	
	foreach ( $search_cat as $value ) {
		$value = intval($value);
		if( $value ) $category_list[] = $value;
	}
	
	$search_cat = $category_list;

	$have_poll = isset($_REQUEST['have_poll']) ? intval($_REQUEST['have_poll']) : 0;
	$have_pass = isset($_REQUEST['have_pass']) ? intval($_REQUEST['have_pass']) : 0;
	$disable_index = isset($_REQUEST['disable_index']) ? intval($_REQUEST['disable_index']) : 0;
	$disable_search = isset($_REQUEST['disable_search']) ? intval($_REQUEST['disable_search']) : 0;
	
	if( $have_poll ) $ifch1 = "checked"; else $ifch1 = "";
	if( $have_pass ) $ifch2 = "checked"; else $ifch2 = "";
	if( $disable_index ) $ifch3 = "checked"; else $ifch3 = "";
	if( $disable_search ) $ifch4 = "checked"; else $ifch4 = "";
	
	$start_from = isset($_REQUEST['start_from']) ? intval( $_REQUEST['start_from'] ) : 0;
	$news_per_page = isset($_REQUEST['news_per_page']) ? intval( $_REQUEST['news_per_page'] ) : 0;
	$gopage = isset($_REQUEST['gopage']) ? intval( $_REQUEST['gopage'] ) : 0;

	$_REQUEST['news_status'] = isset($_REQUEST['news_status']) ? intval( $_REQUEST['news_status'] ) : 0;
	$news_status_sel = array ('0' => '', '1' => '', '2' => '' );
	$news_status_sel[$_REQUEST['news_status']] = 'selected="selected"';

	if( ! $news_per_page or $news_per_page < 1 ) {
		$news_per_page = 50;
	}
	if( $gopage ) $start_from = ($gopage - 1) * $news_per_page;

	if( $start_from < 0 ) $start_from = 0;

	$where = array ();

	if( ! $user_group[$member_id['user_group']]['allow_all_edit'] and $member_id['user_group'] != 1 ) {

		$where[] = "autor = '{$member_id['name']}'";

	}

	if( $search_field ) {
		$search_field = preg_replace('/\s+/u', '%', $search_field);
		
		$_REQUEST['news_status'] = isset($_REQUEST['news_status']) ? $_REQUEST['news_status'] : '';
		
		if(!$_REQUEST['search_area']) {
			$where[] = "(title like '%{$search_field}%' OR short_story like '%{$search_field}%' OR full_story like '%{$search_field}%' OR xfields like '%{$search_field}%')";
		} elseif($_REQUEST['search_area'] == 1) {
			$where[] = "title like '%{$search_field}%'";
		} elseif($_REQUEST['search_area'] == 2) {
			$where[] = "short_story like '%{$search_field}%'";
		} elseif($_REQUEST['search_area'] == 3) {
			$where[] = "full_story like '%{$search_field}%'";
		} elseif($_REQUEST['search_area'] == 4) {
			$where[] = "xfields like '%{$search_field}%'";
		} elseif($_REQUEST['search_area'] == 5) {
			$where[] = "tags like '%{$search_field}%'";
		}

	}
	
	$search_field = trim( htmlspecialchars( urldecode( $_REQUEST['search_field'] ), ENT_QUOTES, $config['charset']  ) );
	
	if( $search_author ) {

		$where[] = "autor like '$search_author%'";

	}
	
	if( count($search_cat) ) {
		
		$comb_cat = false;
		
		if ($search_cat[0] == -1) {
			unset($search_cat[0]);
			$comb_cat = true;
		}
	
		if( count($search_cat) ) {
			
			$w_cat = "category REGEXP '([[:punct:]]|^)(" . implode('|', $search_cat) . ")([[:punct:]]|$)'";
			
			if( $comb_cat ) {
				
				$where[] = "(category = '' OR category = '0' OR $w_cat)";
				
			} else $where[] = $w_cat;
		
		} elseif ($comb_cat) {
			$where[] = "(category = '' OR category = '0')";
		}

	}

	if( $fromnewsdate ) {

		$where[] = "date >= '$fromnewsdate'";

	}

	if( $tonewsdate ) {

		$where[] = "date <= '$tonewsdate'";

	}
	
	if($have_poll) {
		$where[] = "votes = '1'";
	}
	
	if($have_pass) {
		$where[] = "need_pass = '1'";
	}
	
	if($disable_index) {
		$where[] = "disable_index = '1'";
	}
	
	if($disable_search) {
		$where[] = "disable_search = '1'";
	}
	
	$where[] = "rewrite_done = 1";
	
	if( isset($_REQUEST['news_status']) AND $_REQUEST['news_status'] == 1 ) $where[] = "approve = '1'";
	elseif( isset($_REQUEST['news_status']) AND $_REQUEST['news_status'] == 2 ) $where[] = "approve = '0'";

	if( count( $where ) ) {

		$where = implode( " AND ", $where );
		$where = " WHERE " . $where;

	} else {
		$where = "";
	}

	$order_by = array ();
	
	$_REQUEST['search_order_f'] = isset($_REQUEST['search_order_f']) ? $_REQUEST['search_order_f'] : '';
	$_REQUEST['search_order_m'] = isset($_REQUEST['search_order_m']) ? $_REQUEST['search_order_m'] : '';
	$_REQUEST['search_order_d'] = isset($_REQUEST['search_order_d']) ? $_REQUEST['search_order_d'] : '';
	$_REQUEST['search_order_t'] = isset($_REQUEST['search_order_t']) ? $_REQUEST['search_order_t'] : '';
	$_REQUEST['search_order_c'] = isset($_REQUEST['search_order_c']) ? $_REQUEST['search_order_c'] : '';
	$_REQUEST['search_order_v'] = isset($_REQUEST['search_order_v']) ? $_REQUEST['search_order_v'] : '';

	if( $_REQUEST['search_order_f'] == "asc" or $_REQUEST['search_order_f'] == "desc" ) $search_order_f = $_REQUEST['search_order_f'];
	else $search_order_f = "";
	if( $_REQUEST['search_order_m'] == "asc" or $_REQUEST['search_order_m'] == "desc" ) $search_order_m = $_REQUEST['search_order_m'];
	else $search_order_m = "";
	if( $_REQUEST['search_order_d'] == "asc" or $_REQUEST['search_order_d'] == "desc" ) $search_order_d = $_REQUEST['search_order_d'];
	else $search_order_d = "";
	if( $_REQUEST['search_order_t'] == "asc" or $_REQUEST['search_order_t'] == "desc" ) $search_order_t = $_REQUEST['search_order_t'];
	else $search_order_t = "";
	if( $_REQUEST['search_order_c'] == "asc" or $_REQUEST['search_order_c'] == "desc" ) $search_order_c = $_REQUEST['search_order_c'];
	else $search_order_c = "";
	if( $_REQUEST['search_order_v'] == "asc" or $_REQUEST['search_order_v'] == "desc" ) $search_order_v = $_REQUEST['search_order_v'];
	else $search_order_v = "";


	if( ! empty( $search_order_f ) ) {
		$order_by[] = "fixed $search_order_f";
	}
	if( ! empty( $search_order_m ) ) {
		$order_by[] = "approve $search_order_m";
	}
	if( ! empty( $search_order_d ) ) {
		$order_by[] = "date $search_order_d";
	}
	if( ! empty( $search_order_t ) ) {
		$order_by[] = "title $search_order_t";
	}
	if( ! empty( $search_order_c ) ) {
		$order_by[] = "comm_num $search_order_c";
	}
	if( ! empty( $search_order_v ) ) {
		$order_by[] = "news_read $search_order_v";
	}
	$order_by = implode( ", ", $order_by );
	if( ! $order_by ) $order_by = "fixed desc, approve asc, date desc";

	$search_order_fixed = array ('----' => '', 'asc' => '', 'desc' => '' );
	if( isset( $_REQUEST['search_order_f'] ) ) {
		$search_order_fixed[$search_order_f] = 'selected';
	} else {
		$search_order_fixed['desc'] = 'selected';
	}
	$search_order_mod = array ('----' => '', 'asc' => '', 'desc' => '' );
	if( isset( $_REQUEST['search_order_m'] ) ) {
		$search_order_mod[$search_order_m] = 'selected';
	} else {
		$search_order_mod['asc'] = 'selected';
	}
	$search_order_date = array ('----' => '', 'asc' => '', 'desc' => '' );
	if( isset( $_REQUEST['search_order_d'] ) ) {
		$search_order_date[$search_order_d] = 'selected';
	} else {
		$search_order_date['desc'] = 'selected';
	}
	$search_order_title = array ('----' => '', 'asc' => '', 'desc' => '' );
	if( ! empty( $search_order_t ) ) {
		$search_order_title[$search_order_t] = 'selected';
	} else {
		$search_order_title['----'] = 'selected';
	}
	$search_order_comments = array ('----' => '', 'asc' => '', 'desc' => '' );
	if( ! empty( $search_order_c ) ) {
		$search_order_comments[$search_order_c] = 'selected';
	} else {
		$search_order_comments['----'] = 'selected';
	}
	$search_order_view = array ('----' => '', 'asc' => '', 'desc' => '' );
	if( ! empty( $search_order_v ) ) {
		$search_order_view[$search_order_v] = 'selected';
	} else {
		$search_order_view['----'] = 'selected';
	}

	$search_area = array('', '', '', '', '', '');
	
	if( isset( $_REQUEST['search_area'] ) ) {
		$_REQUEST['search_area'] = intval($_REQUEST['search_area']);
		$search_area[$_REQUEST['search_area']] = 'selected';
	} else {
		$search_area[0] = 'selected';
	}

	$db->query( "SELECT p.id, p.rewrite_date, p.rewrite_done, p.date, p.title, p.category, p.autor, p.alt_name, p.comm_num, p.approve, p.fixed, e.news_read, e.votes, e.user_id, e.need_pass FROM " . PREFIX . "_post p LEFT JOIN " . PREFIX . "_post_extras e ON (p.id=e.news_id) " . $where . " ORDER BY " . $order_by . " LIMIT {$start_from},{$news_per_page}" );
	// Prelist Entries

	$i = $start_from;
	
	if( $start_from == 0 ) {
		$start_from = "";
	}
	
	$entries_showed = 0;

	$entries = "";

	while ( $row = $db->get_array() ) {

		$i ++;
		
		if( $langformatdate ) {
			$itemdate = date( $langformatdate, strtotime( $row['date'] ) );
		} else {
			$itemdate = date( "d.m.Y", strtotime( $row['date'] ) );
		}

		$title = $row['title'];

		$title = htmlspecialchars( stripslashes( $title ), ENT_QUOTES, $config['charset'] );
		$title = str_replace("&amp;","&", $title );

		$entries .= "<tr><td class=\"hidden-xs hidden-sm text-nowrap cursor-pointer\" onclick=\"document.location = '?mod=editnews&action=editnews&id={$row['id']}'; return false;\">{$itemdate}</td><td class=\"cursor-pointer\" onclick=\"document.location = '?mod=editnews&action=editnews&id={$row['id']}'; return false;\">";

		if( $config['allow_alt_url'] ) {

			if( $config['seo_type'] == 1 OR $config['seo_type'] == 2 ) {

				if( $row['category'] and $config['seo_type'] == 2 ) {

					$cats_url = get_url( $row['category'] );
					
					if($cats_url) {
						
						$full_link = $config['http_home_url'] . $cats_url . "/" . $row['id'] . "-" . $row['alt_name'] . ".html";
						
					} else $full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
				
				} else {
					
					$full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
				
				}

			} else {

				$full_link = $config['http_home_url'] . date( 'Y/m/d/', strtotime( $row['date'] ) ) . $row['alt_name'] . ".html";
			}

		} else {

			$full_link = $config['http_home_url'] . "index.php?newsid=" . $row['id'];

		}

		if( $row['comm_num'] > 0 ) {
			
			$row['comm_num'] = number_format( $row['comm_num'], 0, ',', ' ');
			
			$comm_link = <<<HTML
<div class="btn-group">
<a href="{$full_link}" target="_blank" data-toggle="dropdown" data-original-title="{$lang['edit_com']}" class="tip">{$row['comm_num']}</a>
  <ul class="dropdown-menu text-left">
   <li><a href="{$full_link}" target="_blank"><i class="fa fa fa-eye"></i> {$lang['comm_view']}</a></li>
   <li><a href="?mod=comments&action=edit&id={$row['id']}"><i class="fa fa-pencil"></i> {$lang['vote_edit']}</a></li>
   <li><a href="?mod=comments&user_hash={$dle_login_hash}&action=dorebuild&id={$row['id']}"><i class="fa fa-retweet"></i> {$lang['news_r_comments']}</a></li>
   <li class="divider"></li>
   <li><a onclick="javascript:cdelete('{$row['id']}'); return(false)" href="?mod=comments&user_hash={$dle_login_hash}&action=dodelete&id={$row['id']}"><i class="fa fa-trash-o"></i> {$lang['comm_del']}</a></li>
  </ul>
</div>
HTML;

		} else {
			$comm_link = <<<HTML
<div class="btn-group">
<a href="{$full_link}" target="_blank" data-toggle="dropdown" data-original-title="{$lang['edit_com']}" class="tip">{$row['comm_num']}</a>
  <ul class="dropdown-menu text-left">
   <li><a href="?mod=comments&user_hash={$dle_login_hash}&action=dorebuild&id={$row['id']}"><i class="fa fa-retweet"></i> {$lang['news_r_comments']}</a></li>
  </ul>
</div>
HTML;
		}
		
		$row['news_read'] = number_format( $row['news_read'], 0, ',', ' ');
		
		if( $row['fixed'] ) $entries .= "<span class=\"badge badge-danger position-left\">{$lang['edit_fix']}</span>";

		if( $row['votes'] ) $entries .= "<i class=\"fa fa-bar-chart position-left text-muted\"></i>";
		if( $row['need_pass'] ) $entries .= "<i class=\"fa fa-lock position-left text-muted\"></i>";

		$gpt_date = date("d.m.Y H:i", $row['rewrite_date']);

		$entries .= "<a title='{$lang['edit_act']}' href=\"?mod=editnews&action=editnews&id={$row['id']}\">{$title}</a></td>
		<td>{$gpt_date}</td>
        <td class=\"hidden-xs text-nowrap text-center\"><a data-original-title=\"{$lang['st_views']}\" class=\"tip\" href=\"{$full_link}\" target=\"_blank\">{$row['news_read']}</a></td>";

		$entries .= "<td class=\"hidden-xs text-nowrap text-center\" style=\"text-align: center\">{$comm_link}</td><td style=\"text-align: center\" class=\"cursor-pointer\" onclick=\"document.location = '?mod=editnews&action=editnews&id={$row['id']}'; return false;\">";

		if( $row['approve'] ) $erlaub = "<span class=\"text-success\"><b><i class=\"fa fa-check-circle\"></i></b></span>";
		else $erlaub = "<span class=\"text-danger\"><b><i class=\"fa fa-exclamation-circle\"></i></b></span>";
		$entries .= $erlaub;

		if( ! $row['category'] ) $my_cat = "---";
		else {

			$my_cat = array ();
			$cat_list = explode( ',', $row['category'] );

			foreach ( $cat_list as $element ) {
				if( $element AND $cat_info[$element]['name'] ) $my_cat[] = $cat_info[$element]['name'];
			}
			
			if( count($my_cat) ) $my_cat = implode( ',<br />', $my_cat );
			else $my_cat = "---";
			
		}
		
		$entries .= "</td><td class=\"hidden-xs cursor-pointer text-center\" onclick=\"document.location = '?mod=editnews&action=editnews&id={$row['id']}'; return false;\">{$my_cat}</td>";
		
		if( $user_group[$member_id['user_group']]['admin_editusers'] ) {
			$entries .= "<td class=\"hidden-xs hidden-sm\"><a href=\"?mod=editusers&action=edituser&id=" . $row['user_id'] . "\" target=\"_blank\">" . $row['autor'] . "</a></td>";
		} else {
			$entries .= "<td class=\"hidden-xs hidden-sm\">" . $row['autor'] . "</td>";
		}
		
		$entries .= "<td style=\"text-align: center\"><input name=\"selected_news[]\" value=\"{$row['id']}\" type=\"checkbox\" class=\"icheck\"></td></tr>";

		$entries_showed ++;

	}

	// End prelisting
	$result_count = $db->super_query( "SELECT COUNT(*) as count FROM " . PREFIX . "_post p LEFT JOIN " . PREFIX . "_post_extras e ON (p.id=e.news_id) " . $where);

	$all_count_news = $result_count['count'];

	///////////////////////////////////////////
	// Options Bar
	$category_list = CategoryNewsSelection( $search_cat, 0, false );

	if( !count($search_cat) AND !$comb_cat) $c_all_s = "selected"; else $c_all_s = "";

	if( $comb_cat ) $c_none_s = "selected"; else $c_none_s = "";

	echo <<<HTML
<script language="javascript">
    function search_submit(prm){
      document.optionsbar.start_from.value=prm;
      document.optionsbar.submit();
      return false;
    }
    function gopage_submit(prm){
      document.optionsbar.start_from.value= (prm - 1) * {$news_per_page};
      document.optionsbar.submit();
      return false;
    }
	
	$(function(){
		$('.categoryselect').chosen({allow_single_deselect:true, no_results_text: '{$lang['addnews_cat_fault']}'});
	});
</script>
<div class="modal fade" id="advancedsearch" name="advancedsearch" role="dialog" aria-labelledby="advancedsearchLabel">
<div class="modal-dialog modal-lg" role="document">
<div class="modal-content">
<form action="?mod=editnews&amp;action=list" method="GET" name="optionsbar" id="optionsbar">
<input type="hidden" name="mod" value="gpt_editnews">
<input type="hidden" name="action" value="list">
<input type="hidden" name="start_from" id="start_from" value="{$start_from}">
  <div class="modal-header ui-dialog-titlebar">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <span class="ui-dialog-title" id="newcatsLabel">{$lang['edit_stat']} {$entries_showed} {$lang['edit_stat_1']} {$all_count_news}</span>
  </div>
  <div class="modal-body">

	<div class="form-group">
		<div class="row">
			<div class="col-sm-12">
				<label>{$lang['edit_search_news']}</label>
				<div class="input-group">
					<input name="search_field" value="{$search_field}" type="text" class="form-control">
					<span class="input-group-btn">
						<select name="search_area" class="uniform form-control"><option value="0" {$search_area[0]}>{$lang['filter_search_0']}</option><option value="1" {$search_area[1]}>{$lang['filter_search_3']}</option><option value="2" {$search_area[2]}>{$lang['filter_search_4']}</option><option value="3" {$search_area[3]}>{$lang['filter_search_5']}</option><option value="4" {$search_area[4]}>{$lang['filter_search_6']}</option><option value="5" {$search_area[5]}>{$lang['filter_search_10']}</option></select>
					</span>
				</div>
			</div>
		</div>
	</div>
	<div class="form-group">
		<div class="row">
			<div class="col-sm-12">
				<label>{$lang['edit_cat']}</label>
				<div class="dblock">
					<select data-placeholder="{$lang['addnews_cat_sel']}" name="search_cat[]" class="categoryselect" style="width:100%;max-width:350px;" multiple><option value="" {$c_all_s}>{$lang['edit_all']}</option><option value="-1" {$c_none_s}>{$lang['cat_in_none']}</option>{$category_list}</select>
				</div>
			</div>
		</div>
	</div>
	
	
	<div class="form-group">
		<div class="row">
			<div class="col-sm-6">
				<label>{$lang['search_by_author']}</label>
				<input name="search_author" value="{$search_author}" type="text" class="form-control">
			</div>
			<div class="col-sm-6">
				<label>{$lang['search_by_date']}</label>
				<div style="width:100%">{$lang['edit_fdate']} <input data-rel="calendar" class="form-control" style="width:160px;" type="text" name="fromnewsdate" id="fromnewsdate" value="{$fromnewsdate}" autocomplete="off">
				{$lang['edit_tdate']} <input data-rel="calendar" class="form-control" style="width:160px;" type="text" name="tonewsdate" id="tonewsdate" value="{$tonewsdate}" autocomplete="off"></div>
			</div>
		</div>
	</div>
	<div class="form-group">
		<div class="row">
			<div class="col-sm-6">
				<label>{$lang['search_by_status']}</label>
				<select class="uniform" data-width="100%" name="news_status" id="news_status">
					<option {$news_status_sel['0']} value="0">{$lang['news_status_all']}</option>
					<option {$news_status_sel['1']} value="1">{$lang['news_status_approve']}</option>
					<option {$news_status_sel['2']} value="2">{$lang['news_status_mod']}</option>
				</select>
			</div>
	
			<div class="col-sm-6">
				<label>{$lang['edit_page']}</label>
				<input class="form-control text-center" name="news_per_page" value="{$news_per_page}" type="text">
			</div>
		</div>
	</div>
	
	<div class="form-group">
		<div class="row">
			<div class="col-sm-6">
				<div class="checkbox"><label><input class="icheck" type="checkbox" name="have_poll" value="1" {$ifch1}>{$lang['have_poll']}</label></div>
			</div>
			<div class="col-sm-6">
				<div class="checkbox"><label><input class="icheck" type="checkbox" name="have_pass" value="1" {$ifch2}>{$lang['have_pass']}</label></div>
			</div>
			<div class="col-sm-6">
				<div class="checkbox"><label><input class="icheck" type="checkbox" name="disable_index" value="1" {$ifch3}>{$lang['disable_index']}</label></div>
			</div>
			<div class="col-sm-6">
				<div class="checkbox"><label><input class="icheck" type="checkbox" name="disable_search" value="1" {$ifch4}>{$lang['disable_search']}</label></div>
			</div>
		</div>
	</div>	
	
	<div class="pb-10">{$lang['news_order']}</div>
	<div class="form-group">
		<div class="row">
			<div class="col-sm-4">
				<label>{$lang['news_order_fixed']}</label>
				<select class="uniform" data-width="100%" name="search_order_f" id="search_order_f">
				   <option {$search_order_fixed['----']} value="">{$lang['user_order_no']}</option>
				   <option {$search_order_fixed['asc']} value="asc">{$lang['user_order_plus']}</option>
				   <option {$search_order_fixed['desc']} value="desc">{$lang['user_order_minus']}</option>
				</select>
			</div>
			<div class="col-sm-4">
				<label>{$lang['edit_approve']}</label>
				<select class="uniform" data-width="100%" name="search_order_m" id="search_order_m">
					<option {$search_order_mod['----']} value="">{$lang['user_order_no']}</option>
					<option {$search_order_mod['asc']} value="asc">{$lang['user_order_plus']}</option>
					<option {$search_order_mod['desc']} value="desc">{$lang['user_order_minus']}</option>
				</select>
			</div>
			
			<div class="col-sm-4">
				<label>{$lang['search_by_date']}</label>
				<select class="uniform" data-width="100%" name="search_order_d" id="search_order_d">
					<option {$search_order_date['----']} value="">{$lang['user_order_no']}</option>
					<option {$search_order_date['asc']} value="asc">{$lang['user_order_plus']}</option>
					<option {$search_order_date['desc']} value="desc">{$lang['user_order_minus']}</option>
				</select>
			</div>
		</div>
	</div>
	<div class="form-group">
		<div class="row">
			<div class="col-sm-4">
				<label>{$lang['edit_et']}</label>
				<select class="uniform" data-width="100%" name="search_order_t" id="search_order_t">
					<option {$search_order_title['----']} value="">{$lang['user_order_no']}</option>
					<option {$search_order_title['asc']} value="asc">{$lang['user_order_plus']}</option>
					<option {$search_order_title['desc']} value="desc">{$lang['user_order_minus']}</option>
				</select>
			</div>
			<div class="col-sm-4">
				<label>{$lang['search_by_comment']}</label>
				<select class="uniform" data-width="100%" name="search_order_c" id="search_order_c">
					<option {$search_order_comments['----']} value="">{$lang['user_order_no']}</option>
					<option {$search_order_comments['asc']} value="asc">{$lang['user_order_plus']}</option>
					<option {$search_order_comments['desc']} value="desc">{$lang['user_order_minus']}</option>
				</select>
			</div>
			
			<div class="col-sm-4">
				<label>{$lang['search_by_view']}</label>
				<select class="uniform" data-width="100%" name="search_order_v" id="search_order_v">
					<option {$search_order_view['----']} value="">{$lang['user_order_no']}</option>
					<option {$search_order_view['asc']} value="asc">{$lang['user_order_plus']}</option>
					<option {$search_order_view['desc']} value="desc">{$lang['user_order_minus']}</option>
				</select>
			</div>
		</div>
	</div>
	<button onclick="search_submit(0); return(false);" class="btn bg-teal btn-sm btn-raised position-left"><i class="fa fa-search position-left"></i>{$lang['edit_act_1']}</button>
	<button onclick="document.location='?mod=editnews&action=list'; return(false);" class="btn bg-danger btn-sm btn-raised"><i class="fa fa-eraser position-left"></i>{$lang['drop_search']}</button>
   </div>
</form>
 </div>
</div>
</div>
HTML;
// End Options Bar


	echo <<<JSCRIPT
<script>
<!--
function ckeck_uncheck_all() {

    var frm = document.editnews;
    for (var i=0;i<frm.elements.length;i++) {
        var elmnt = frm.elements[i];
        if (elmnt.type=='checkbox') {
            if(frm.master_box.checked == true){ elmnt.checked=false; $(elmnt).parents('tr').removeClass('warning'); }
            else{ elmnt.checked=true; $(elmnt).parents('tr').addClass('warning'); }
        }
    }
    if(frm.master_box.checked == true){ frm.master_box.checked = false; }
    else{ frm.master_box.checked = true; }
	
	$(frm.master_box).parents('tr').removeClass('warning');
	
	$.uniform.update();
}
$(function() {
    $('.table').find('tr > td:last-child').find('input[type=checkbox]').on('change', function() {
        if($(this).is(':checked')) {
            $(this).parents('tr').addClass('warning');
        }
        else {
            $(this).parents('tr').removeClass('warning');
        }
    });
});
-->
</script>
JSCRIPT;

	if( $entries_showed == 0 ) {

		echo <<<HTML
<div class="panel panel-default">
  <div class="panel-heading">
    {$lang['news_list']}
	<div class="heading-elements not-collapsible">

	</div>
  </div>
  <div class="panel-body">
	<div style="display: table;min-height:100px;width:100%;">
	  <div class="text-center" style="display: table-cell;vertical-align:middle;">{$lang['edit_nonews']}</div>
	</div>
   </div>
</div>
HTML;

	} else {

		echo <<<HTML
<script>
<!--
function cdelete(id){

	    DLEconfirm( '{$lang['db_confirmclear']}', '{$lang['p_confirm']}', function () {
			document.location='?mod=comments&user_hash={$dle_login_hash}&action=dodelete&id=' + id + '';
		} );
}
//-->
</script>
<form action="" method="post" name="editnews">
<input type=hidden name="mod" value="massactions">
<input type="hidden" name="user_hash" value="{$dle_login_hash}" />
<div class="panel panel-default">
  <div class="panel-heading">
    Список обработанных записей &nbsp;&nbsp;&nbsp;<a href="{$PHP_SELF}?mod=movie_rewrite">Вернуться назад</a>
	<div class="heading-elements not-collapsible">

	</div>
  </div>

    <table class="table table-striped table-xs table-hover">
      <thead>
      <tr>
        <th class="hidden-xs hidden-sm" style="width: 60px;">&nbsp;</th>
        <th>{$lang['edit_title']}</th>
		<th>Дата рерайта</th>
        <th class="hidden-xs text-center" style="width: 60px;"><i class="fa fa-eye tip" data-original-title="{$lang['st_views']}"></i></th>
        <th class="hidden-xs text-center" style="width: 60px;"><i class="fa fa-comment-o tip" data-original-title="{$lang['edit_com']}"></i></th>
        <th style="width: 30px;text-align:center;">&nbsp;</th>
        <th class="hidden-xs text-center">{$lang['edit_cl']}</th>
        <th class="hidden-xs hidden-sm" style="max-width: 140px">{$lang['edit_autor']}</th>
        <th style="width: 40px"><input type="checkbox" name="master_box" title="{$lang['edit_selall']}" onclick="javascript:ckeck_uncheck_all();" class="icheck"></th>
      </tr>
      </thead>
	  <tbody>
		{$entries}
	  </tbody>
	</table>
</div>
HTML;

		// pagination
		$npp_nav = "";

		if( $all_count_news > $news_per_page ) {

			if( $start_from > 0 ) {
				$previous = $start_from - $news_per_page;
				$npp_nav .= "<li><a onclick=\"javascript:search_submit($previous); return(false);\" href=\"#\" title=\"{$lang['edit_prev']}\"><i class=\"fa fa-backward\"></i></a></li>";
			}
			
			if( !$start_from ) $start_from = 0;

			$enpages_count = @ceil( $all_count_news / $news_per_page );
			$enpages_start_from = 0;
			$enpages = "";

			if( $enpages_count <= 10 ) {

				for($j = 1; $j <= $enpages_count; $j ++) {

					if( $enpages_start_from != $start_from ) {

						$enpages .= "<li><a onclick=\"javascript:search_submit($enpages_start_from); return(false);\" href=\"#\">$j</a></li>";

					} else {

						$enpages .= "<li class=\"active\"><span>$j</span></li>";
					}

					$enpages_start_from += $news_per_page;
				}

				$npp_nav .= $enpages;

			} else {

				$start = 1;
				$end = 10;

				if( $start_from > 0 ) {

					if( ($start_from / $news_per_page) > 4 ) {

						$start = @ceil( $start_from / $news_per_page ) - 3;
						$end = $start + 9;

						if( $end > $enpages_count ) {
							$start = $enpages_count - 10;
							$end = $enpages_count - 1;
						}

						$enpages_start_from = ($start - 1) * $news_per_page;

					}

				}

				if( $start > 2 ) {

					$enpages .= "<li><a onclick=\"javascript:search_submit(0); return(false);\" href=\"#\">1</a></li> <li><span>...</span></li>";

				}

				for($j = $start; $j <= $end; $j ++) {

					if( $enpages_start_from != $start_from ) {

						$enpages .= "<li><a onclick=\"javascript:search_submit({$enpages_start_from}); return(false);\" href=\"#\">{$j}</a></li>";

					} else {

						$enpages .= "<li class=\"active\"><span>{$j}</span></li>";
					}

					$enpages_start_from += $news_per_page;
				}

				$enpages_start_from = ($enpages_count - 1) * $news_per_page;
				$enpages .= "<li><span>...</span></li>";
				
				if( $enpages_start_from != $start_from ) {

					$enpages .= "<li><a onclick=\"javascript:search_submit({$enpages_start_from}); return(false);\" href=\"#\">{$enpages_count}</a></li>";

				} else {

					$enpages .= "<li class=\"active\"><span>{$enpages_count}</span></li>";
				}
					
				$npp_nav .= $enpages;

			}

			if( $all_count_news > $i ) {
				$how_next = $all_count_news - $i;
				if( $how_next > $news_per_page ) {
					$how_next = $news_per_page;
				}
				$npp_nav .= "<li><a onclick=\"javascript:search_submit($i); return(false);\" href=\"#\" title=\"{$lang['edit_next']}\"><i class=\"fa fa-forward\"></i></a></li>";
			}

			echo "<ul class=\"pagination pagination-sm mb-20\">".$npp_nav."</ul>";


		}
// pagination

			echo <<<HTML
</form>
HTML;

	}

	echofooter();

} elseif( $action == "editnews" ) {
	
	if( !isset( $_SESSION['admin_referrer'] ) ) {

		$_SESSION['admin_referrer'] = "?mod=editnews&amp;action=list";

	}
	
	$id = intval( $_GET['id'] );
	$row = $db->super_query( "SELECT * FROM " . PREFIX . "_post LEFT JOIN " . PREFIX . "_post_extras ON (" . PREFIX . "_post.id=" . PREFIX . "_post_extras.news_id) WHERE id = '$id'" );

	$found = FALSE;

	if( isset($row['id']) AND $id == $row['id'] ) $found = TRUE;
	
	if( !$found ) {
		msg( "error", $lang['cat_error'], $lang['edit_nonews'] );
	}

	$cat_list = explode( ',', $row['category'] );
	
	if( count($cat_list) > 1 ) {
		
		$sort_catlist = "['".implode("','", $cat_list)."']";
		
	} else { $sort_catlist = "[]"; }
	
	$have_perm = 0;

	if( $user_group[$member_id['user_group']]['allow_edit'] AND $row['autor'] == $member_id['name'] ) {
		$have_perm = 1;
	}

	if( $user_group[$member_id['user_group']]['allow_all_edit'] ) {
		$have_perm = 1;
		
		if($member_id['cat_add']) $allow_list = explode( ',', $member_id['cat_add'] );
		else $allow_list = explode( ',', $user_group[$member_id['user_group']]['cat_add'] );

		foreach ( $cat_list as $selected ) {
			if( $allow_list[0] != "all" and !in_array( $selected, $allow_list ) AND $row['approve']) $have_perm = 0;
		}
	}

	if( $user_group[$member_id['user_group']]['max_edit_days'] ) {
		$newstime = strtotime( $row['date'] );
		$maxedittime = $_TIME - ($user_group[$member_id['user_group']]['max_edit_days'] * 3600 * 24);
		if( $maxedittime > $newstime ) $have_perm = 0;
	}
	
	if( ($member_id['user_group'] == 1) ) {
		$have_perm = 1;
	}

	if( !$have_perm ) {
		msg( "error", $lang['addnews_denied'], $lang['edit_denied'], "?mod=editnews&action=list" );
	}

	$row['title'] = $parse->decodeBBCodes( $row['title'], false );
	$row['title'] = str_replace("&amp;","&", $row['title'] );
	$row['descr'] = $parse->decodeBBCodes( $row['descr'], false );
	$row['descr'] = str_replace("&amp;","&", $row['descr'] );
	$row['keywords'] = $parse->decodeBBCodes( $row['keywords'], false );

	$row['metatitle'] = stripslashes( $row['metatitle'] );

	if( $row['allow_br'] != '1' OR $config['allow_admin_wysiwyg'] ) {
		$row['short_story'] = $parse->decodeBBCodes( $row['short_story'], true, $config['allow_admin_wysiwyg'] );
		$row['full_story'] = $parse->decodeBBCodes( $row['full_story'], true, $config['allow_admin_wysiwyg'] );
	} else {
		$row['short_story'] = $parse->decodeBBCodes( $row['short_story'], false );
		$row['full_story'] = $parse->decodeBBCodes( $row['full_story'], false );
	}

	$access = permload( $row['access'] );

	$poll = array();
	
	if( $row['votes'] ) {
		
		$poll = $db->super_query( "SELECT * FROM " . PREFIX . "_poll WHERE news_id = '{$row['id']}'" );
		
		$poll['title'] = $parse->decodeBBCodes( $poll['title'], false );
		$poll['frage'] = $parse->decodeBBCodes( $poll['frage'], false );
		$poll['body'] = $parse->decodeBBCodes( $poll['body'], false );
		$poll['multiple'] = $poll['multiple'] ? "checked" : "";

		if ($user_group[$member_id['user_group']]['allow_all_edit'] AND $poll['votes']) {
			$clear_poll = "<button onclick=\"clearPoll('{$id}'); return false;\" class=\"btn bg-danger btn-sm btn-raised\"><i class=\"fa fa-trash-o position-left\"></i>{$lang['clear_poll']}</button>";
		} else $clear_poll = "";
		
	} else {
		$clear_poll = "";
		$poll['title'] = '';
		$poll['frage'] = '';
		$poll['body'] = '';
		$poll['multiple'] = '';
	}
	
	$password = "";
	
	if( $row['need_pass'] ) {
		$password = $db->super_query( "SELECT password FROM " . PREFIX . "_post_pass WHERE news_id = '{$row['id']}'" );
		$password  = htmlspecialchars( $password['password'], ENT_QUOTES, $config['charset'] );
	}

	
	if( $config['allow_subscribe'] AND $member_id['user_group'] == 1 ) {
		$count_subscribe = $db->super_query( "SELECT COUNT(*) as count FROM " . PREFIX . "_subscribe WHERE news_id = '{$row['id']}' " );
		
		if($count_subscribe['count']) {
			
			$lang['count_subscribe'] = str_replace("{count}", $count_subscribe['count'], $lang['count_subscribe']);
			
			$clear_subscribe = <<<HTML
<div class="form-group">
	<label class="control-label col-md-2"></label>
	<div class="col-md-10">
		{$lang['count_subscribe']}
		<br /><br />
		<button onclick="clearsubscribe('{$id}'); return false;" class="btn bg-danger btn-sm btn-raised"><i class="fa fa-user-times position-left"></i>{$lang['btn_clearsubscribe']}</button>
	</div>
</div>
HTML;

		} else $clear_subscribe = "";
		
	} else $clear_subscribe = "";

	$expires = $db->super_query( "SELECT * FROM " . PREFIX . "_post_log where news_id = '{$row['id']}'" );

	if ( isset($expires['expires']) AND $expires['expires'] ) $expires['expires'] = date("Y-m-d", $expires['expires']); else $expires['expires'] = '';
	
	if( $config['allow_admin_wysiwyg'] == 1 ) {
		$js_array[] = "engine/skins/codemirror/js/code.js";
		$js_array[] = "engine/editor/jscripts/froala/editor.js";
		$js_array[] = "engine/editor/jscripts/froala/languages/{$lang['wysiwyg_language']}.js";
		$css_array[] = "engine/editor/jscripts/froala/css/editor.css";
	}
	
	if( $config['allow_admin_wysiwyg'] == 2 ) {
		$js_array[] = "engine/editor/jscripts/tiny_mce/tinymce.min.js";
	}
	
	if( !$config['allow_admin_wysiwyg'] ) {
		$js_array[] = "engine/classes/js/typograf.min.js";
	}
	
	$js_array[] = "engine/classes/js/sortable.js";
	$js_array[] = "engine/classes/uploads/html5/fileuploader.js";
		
	echoheader( "<i class=\"fa fa-pencil-square-o position-left\"></i><span class=\"text-semibold\">{$lang['header_ed_title']}</span>", array($_SESSION['admin_referrer'] => $lang['edit_all_title'], '' => $lang['edit_etitle'] ) );

	if ( !$user_group[$member_id['user_group']]['allow_html'] ) $config['allow_admin_wysiwyg'] = 0;

	$xfieldsaction = "categoryfilter";
	include (DLEPlugins::Check(ENGINE_DIR . '/inc/xfields.php'));
	echo $categoryfilter;

	$author = urlencode($row['autor']);

	echo <<<HTML
<script>
<!-- 
function clearPoll(id) {

    DLEconfirm( '{$lang['clear_poll_1']}', '{$lang['p_confirm']}', function () {

		ShowLoading('');

		$.get("engine/ajax/controller.php?mod=adminfunction", { id: id, action: 'clearpoll', user_hash: '{$dle_login_hash}' }, function(data){

			HideLoading('');

			DLEalert(data, '{$lang['p_info']}');

		});

	} );

	return false;
	
}

function clearsubscribe(id) {

    DLEconfirm( '{$lang['confirm_action']}', '{$lang['p_confirm']}', function () {

		ShowLoading('');

		$.get("engine/ajax/controller.php?mod=adminfunction", { id: id, action: 'clearsubscribenews', user_hash: '{$dle_login_hash}' }, function(data){

			HideLoading('');

			Growl.info({
				title: '{$lang['p_info']}',
				text: data
			});

		});

	} );

	return false;
	
}

function MarkSpam(id, hash) {

    DLEconfirm( '{$lang['mark_spam']}', '{$lang['p_confirm']}', function () {

		ShowLoading('');

		$.get("engine/ajax/controller.php?mod=adminfunction", { id: id, action: 'newsspam', user_hash: hash }, function(data){

			HideLoading('');

			if (data != "error") {

			    DLEconfirm( data, '{$lang['p_info']}', function () {
					document.location='{$_SESSION['admin_referrer']}';
				} );

			}

		});

	} );

	return false;
};
// -->
</script>
HTML;

	echo "
    <script>
    function preview(){";

	if( $config['allow_admin_wysiwyg'] == 2 ) {
		echo "document.getElementById('short_story').value = $('#short_story').html();
	document.getElementById('full_story').value = $('#full_story').html();";
	}

	echo "if(document.addnews.title.value == ''){ Growl.error({
				title: '{$lang['p_info']}',
				text: '{$lang['addnews_alert']}'
			}); return false; }
    else{
        dd=window.open('','prv','height=400,width=750,left=0,top=0,resizable=1,scrollbars=1')
        document.addnews.mod.value='preview';document.addnews.target='prv'
        document.addnews.submit();dd.focus()
        setTimeout(\"document.addnews.mod.value='editnews';document.addnews.target='_self'\",500)
    }
    }
    function sendNotice( id ){
		var b = {};

		b[dle_act_lang[3]] = function() {
			$(this).dialog('close');
		};

		b['{$lang['p_send']}'] = function() {
			if ( $('#dle-promt-text').val().length < 1) {
				$('#dle-promt-text').addClass('ui-state-error');
			} else {
				var response = $('#dle-promt-text').val()
				$(this).dialog('close');
				$('#dlepopup').remove();
				$.post('engine/ajax/controller.php?mod=message', { id: id,  text: response, user_hash: '{$dle_login_hash}', allowdelete: \"no\" },
					function(data){
						if (data == 'ok') { DLEalert('{$lang['p_send_ok']}', '{$lang['p_info']}'); }
					});

			}
		};

		$('#dlepopup').remove();

		$('body').append(\"<div id='dlepopup' class='dle-promt' title='{$lang['p_title']}' style='display:none'>{$lang['p_text']}<br /><br /><textarea name='dle-promt-text' id='dle-promt-text' class='classic' style='width:100%;height:100px; padding: .4em;'></textarea></div>\");

		$('#dlepopup').dialog({
			autoOpen: true,
			width: 500,
			resizable: false,
			buttons: b
		});

	}

    function confirmDelete(url, id){

		var b = {};

		b[dle_act_lang[1]] = function() {
						$(this).dialog(\"close\");
				    };

		b['{$lang['p_message']}'] = function() {
						$(this).dialog(\"close\");

						var bt = {};

						bt[dle_act_lang[3]] = function() {
										$(this).dialog('close');
								    };

						bt['{$lang['p_send']}'] = function() {
										if ( $('#dle-promt-text').val().length < 1) {
											 $('#dle-promt-text').addClass('ui-state-error');
										} else {
											var response = $('#dle-promt-text').val()
											$(this).dialog('close');
											$('#dlepopup').remove();
											$.post('engine/ajax/controller.php?mod=message', { id: id,  text: response, user_hash: '{$dle_login_hash}' },
											  function(data){
											    if (data == 'ok') { document.location=url; } else { DLEalert('{$lang['p_not_send']}', '{$lang['p_info']}'); }
										  });

										}
									};

						$('#dlepopup').remove();

						$('body').append(\"<div id='dlepopup' title='{$lang['p_title']}' class='dle-promt' style='display:none'>{$lang['p_text']}<br /><br /><textarea name='dle-promt-text' id='dle-promt-text' class='classic' style='width:100%;height:100px;'></textarea></div>\");

						$('#dlepopup').dialog({
							autoOpen: true,
							width: 500,
							resizable: false,
							buttons: bt
						});

				    };

		b[dle_act_lang[0]] = function() {
						$(this).dialog(\"close\");
						document.location=url;
					};

		$(\"#dlepopup\").remove();

		$(\"body\").append(\"<div id='dlepopup' title='{$lang['p_confirm']}' class='dle-promt' style='display:none'><div id='dlepopupmessage'>{$lang['edit_cdel']}</div></div>\");

		$('#dlepopup').dialog({
			autoOpen: true,
			width: 500,
			resizable: false,
			buttons: b
		});


    }

	function auto_keywords ( key )
	{
		var wysiwyg = '{$config['allow_admin_wysiwyg']}';

		if (wysiwyg == \"2\") {
			tinyMCE.triggerSave();
		}

		var short_txt = document.getElementById('short_story').value;
		var full_txt = document.getElementById('full_story').value;

		ShowLoading('');

		$.post(\"engine/ajax/controller.php?mod=keywords\", { short_txt: short_txt, full_txt: full_txt, key: key, user_hash: '{$dle_login_hash}' }, function(data){

			HideLoading('');

			if (key == 1) { $('#autodescr').val(data); }
			else { $('#keywords').tokenfield('setTokens', data);}

		});

		return false;
	}

	function find_relates ()
	{
		var title = document.getElementById('title').value;

		ShowLoading('');

		$.post('engine/ajax/controller.php?mod=find_relates', { title: title, id: '{$row['id']}', user_hash: '{$dle_login_hash}' }, function(data){

			HideLoading('');

			$('#related_news').html(data);

		});

		return false;

	};
	
	function find_related_ids ( id ){

		var wysiwyg = '{$config['allow_admin_wysiwyg']}';

		if (wysiwyg == \"2\") {
			tinyMCE.triggerSave();
		}
		
		var title = document.getElementById('title').value;
		var short_txt = document.getElementById('short_story').value;
		var full_txt = document.getElementById('full_story').value;

		ShowLoading('');

		$.post(\"engine/ajax/controller.php?mod=adminfunction\", { action: 'relatedids', id: id, title: title, short_txt: short_txt, full_txt: full_txt, user_hash: '{$dle_login_hash}' }, function(data){
	
			HideLoading('');

			$('#related_ids').val(data);
	
		});

		return false;
	}
	
	function xfimagedelete( xfname, xfvalue )
	{
		
		DLEconfirm( '{$lang['image_delete']}', '{$lang['p_info']}', function () {
		
			ShowLoading('');
			
			$.post('engine/ajax/controller.php?mod=upload', { subaction: 'deluploads', user_hash: '{$dle_login_hash}', news_id: '{$row['id']}', author: '{$author}', 'images[]' : xfvalue }, function(data){
	
				HideLoading('');
				
				$('#uploadedfile_'+xfname).html('');
				$('#xf_'+xfname).val('');
				$('#xfupload_' + xfname + ' .qq-upload-button, #xfupload_' + xfname + ' .qq-upload-button input').removeAttr('disabled');
				$('#mediaupload').remove();
			});
			
		} );

		return false;

	};

	function xffiledelete( xfname, xfvalue )
	{
		
		DLEconfirm( '{$lang['file_delete']}', '{$lang['p_info']}', function () {
		
			ShowLoading('');
			
			$.post('engine/ajax/controller.php?mod=upload', { subaction: 'deluploads', user_hash: '{$dle_login_hash}', news_id: '{$row['id']}', author: '{$author}', 'files[]' : xfvalue }, function(data){
	
				HideLoading('');
				
				$('#uploadedfile_'+xfname).html('');
				$('#xf_'+xfname).val('');
				$('#xf_'+xfname).hide('');
				$('#xfupload_' + xfname + ' .qq-upload-button, #xfupload_' + xfname + ' .qq-upload-button input').removeAttr('disabled');
				$('#mediaupload').remove();
			});
			
		} );

		return false;

	};
	
	function xfaddalt( id, xfname ) {
	
		var sel_alt = $('#xf_'+id).data('alt').toString().trim();
		sel_alt = sel_alt.replace(/\"/g, '&quot;');
		
		DLEprompt('{$lang['bb_alt_image']}', sel_alt, '{$lang['p_prompt']}', function (r) {
	
			r = r.replace(/</g, '');
			r = r.replace(/>/g, '');
			r = r.replace(/,/g, '&#44;');
			
			$('#xf_'+id).data('alt', r);
			xfsinc(xfname);
		
		}, true);
		
	};
	
	function xfsinc(xfname) {
	
		var order = [];
		
		$( '#uploadedfile_' + xfname + ' .uploadedfile' ).each(function() {
			var xfurl = $(this).data('id').toString().trim();
			var xfalt = $(this).data('alt').toString().trim();
			
			if(xfalt) {
				order.push(xfalt + '|'+ xfurl);
			} else {
				order.push(xfurl);
			}

		});
	
		$('#xf_' + xfname).val(order.join(','));
	};
	
	function checkxf ( )
	{
		var wysiwyg = '{$config['allow_admin_wysiwyg']}';
		var status = '';
		var xfempty = false;

		if (wysiwyg == \"2\") {
			tinyMCE.triggerSave();
		}

		$('[uid=\"essential\"]:visible').each(function(indx) {

			if($.trim($(this).find('[rel=\"essential\"]').val()).length < 1) {
				
				if( $(this).find('[rel=\"essential\"]').data('alert') ) {
				
					var alert_text = '{$lang['addnews_xf_alert_1']}';
					
					alert_text = alert_text.replace(/{field}/g, $(this).find('[rel=\"essential\"]').data('alert') );
				
					Growl.error({
						text: alert_text
					});
					
				} else {
					xfempty = true;
				}
			
				status = 'fail';
			}

		});

		if(xfempty) {
			Growl.error({
				text: '{$lang['addnews_xf_alert']}'
			});
		}

		if(document.addnews.title.value == ''){

			Growl.error({
				text: '{$lang['addnews_alert']}'
			});

			status = 'fail';

		}

		return status;

	};
	
	function moveCategoryChange(obj) {
  
	  var value = $(obj).val();

	  if (value == 5) {
		$('#movecatlist').show();
	  } else {
		$('#movecatlist').hide();
	  }
	  
	}
	
	function onPassChange(obj) {
  
	  var value = obj.checked;
	  
	  if (value == true) {
		$('#passlist').show();
	  } else {
		$('#passlist').hide();
	  }
	  
	}
	
	$(function(){

		$('#tags').tokenfield({
		  autocomplete: {
		    source: 'engine/ajax/controller.php?mod=find_tags&user_hash={$dle_login_hash}',
			minLength: 3,
		    delay: 500
		  },
		  createTokensOnBlur:true
		});

		$('[data-rel=links]').tokenfield({
		  autocomplete: {
		    source: 'engine/ajax/controller.php?mod=find_tags&user_hash={$dle_login_hash}&mode=xfield',
			minLength: 3,
		    delay: 500
		  },
		  createTokensOnBlur:true
		});

		$('.categoryselect').chosen({allow_single_deselect:true, no_results_text: '{$lang['addnews_cat_fault']}'});
			
		if( $('#category').hasClass('categoryselect') ) {

			$('#category').setSelectionOrder({$sort_catlist});
			
			var category_results = $('#category').getSelectionOrder();
			
			$('#category').on('change',function(){
				var selected_values = $(this).val();
				var temp_results = category_results;
				category_results = [];
			
				//FOR REMOVED VALUES
				for(i in temp_results){
					if($.inArray(temp_results[i],selected_values)>=0){
						category_results.push(temp_results[i]);
					}
				}
			
				//FOR ADDED VALUES
				for(i in selected_values){
					if($.inArray(selected_values[i],temp_results)<=-1){
						category_results.push(selected_values[i]);
					}
				}
				
				$('#category_custom_sort').val(category_results.join('::'));
	
			});
			
			$('#category_custom_sort').val(category_results.join('::'));
		
		}
		
		moveCategoryChange($('#expires_action'));
		
		if( document.getElementById('need_pass') ) {
			onPassChange(document.getElementById('need_pass'));
		}
		
	});
    </script>";

	$categories_list = CategoryNewsSelection( $cat_list, 0 );

	if( $config['allow_multi_category'] ) $category_multiple = "class=\"categoryselect\" multiple";
	else $category_multiple = "class=\"uniform\" data-live-search=\"true\" data-none-results-text=\"{$lang['addnews_cat_fault']}\" data-width=\"350\"";

	if( $member_id['user_group'] == 1 ) {

		$author_info = "<input type=\"text\" name=\"new_author\" class=\"form-control position-left\" style=\"width:190px;\" value=\"{$row['autor']}\"><input type=\"hidden\" name=\"old_author\" value=\"{$row['autor']}\" />";

	} else {

		$author_info = "<b>{$row['autor']}</b>";

	}


	if ( $user_group[$member_id['user_group']]['admin_editusers'] ) {

		$author_info .= "<a href=\"?mod=editusers&action=edituser&id=" . $row['user_id'] . "\" target=\"_blank\"><i class=\"fa fa-user-circle-o\"></i></a>";

	}

	if( $row['allow_comm'] ) $ifch = "checked";	else $ifch = "";
	if( $row['allow_main'] ) $ifmain = "checked"; else $ifmain = "";
	if( $row['approve'] ) $ifapp = "checked"; else $ifapp = "";
	if( $row['fixed'] ) $iffix = "checked";	else $iffix = "";
	if( $row['allow_rate'] ) $ifrat = "checked"; else $ifrat = "";
	if( $row['disable_index'] ) $ifdis = "checked"; else $ifdis = "";
	if( $row['disable_search'] ) $ifdiss = "checked"; else $ifdiss = "";
	if( $row['need_pass'] ) $ifnpass = "checked"; else $ifnpass = "";

	if( $row['allow_rss'] ) $ifrss = "checked"; else $ifrss = "";
	if( $row['allow_rss_turbo'] ) $ifrsst = "checked"; else $ifrsst = "";
	if( $row['allow_rss_dzen'] ) $ifrssd = "checked"; else $ifrssd = "";
	
	if( $user_group[$member_id['user_group']]['allow_fixed'] and $config['allow_fixed'] ) $fix_input = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" id=\"news_fixed\" name=\"news_fixed\" value=\"1\" {$iffix}>{$lang['addnews_fix']}</label></div>"; else $fix_input = "";
	if( $user_group[$member_id['user_group']]['allow_main'] ) $main_input = "<div class=\"checkbox\" id=\"opt_holder_main\"><label><input class=\"icheck\" type=\"checkbox\" id=\"allow_main\" name=\"allow_main\" value=\"1\" {$ifmain}>{$lang['addnews_main']}</label></div>"; else $main_input = "";

	if($member_id['user_group'] < 3 ) {
		$disable_index = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" id=\"disable_index\" name=\"disable_index\" value=\"1\" {$ifdis}>{$lang['add_disable_index']}</label></div>";
		$disable_search = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" id=\"disable_search\" name=\"disable_search\" value=\"1\" {$ifdiss}>{$lang['cat_d_search']}</label></div>";
		$need_pass = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" id=\"need_pass\" name=\"need_pass\" onchange=\"onPassChange(this)\" value=\"1\" {$ifnpass}>{$lang['pass_list_1']}</label></div>";

		if( $config['allow_yandex_turbo'] ) {
			$yandex_turbo = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" name=\"allow_rss_turbo\" value=\"1\" {$ifrsst}>{$lang['allow_rss_turbo']}</label></div>";
		} else $yandex_turbo = "";

		if( $config['allow_yandex_dzen'] ) {
			$yandex_dzen = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" name=\"allow_rss_dzen\" value=\"1\" {$ifrssd}>{$lang['allow_rss_dzen']}</label></div>";
		} else $yandex_dzen = "";
		
		if( $config['allow_rss'] ) {
			
			$rss_option = <<<HTML
				<div class="row mt-15" id="opt_cat_rss">
					<div class="col-sm-6" style="max-width:300px;">
						<div class="checkbox"><label><input class="icheck" type="checkbox" name="allow_rss" value="1" {$ifrss}>{$lang['allow_rss_news']}</label></div>
						{$yandex_turbo}
					</div>
					<div class="col-sm-6">
						{$yandex_dzen}
					</div>
				</div>
			
HTML;
		}
	
	} else {
		$disable_index = "";
		$disable_search = "";
		$need_pass = "";
		$rss_option = "";
	}

	if( $row['allow_br'] == '1' ) $fix_br_cheked = "checked";
	else $fix_br_cheked = "";

	if( !$config['allow_admin_wysiwyg'] ) $fix_br = "<div class=\"checkbox\"><label><input class=\"icheck\" type=\"checkbox\" id=\"allow_br\" name=\"allow_br\" value=\"1\" {$fix_br_cheked}>{$lang['allow_br']}</label></div>";
	else $fix_br = "";

	if( $row['editdate'] ) {
		
		if( $langformatdatefull ) {
			$row['editdate'] = date( $langformatdatefull, $row['editdate'] );
		} else {
			$row['editdate'] = date( "d.m.Y H:i:s", $row['editdate'] );
		}
		
		$lang['news_edit_date'] = $lang['news_edit_date'] . " " . $row['editor'] . " - " . $row['editdate'];
	} else
		$lang['news_edit_date'] = "";
	if( $row['view_edit'] == '1' ) $view_edit_cheked = "checked";
	else $view_edit_cheked = "";

	$exp_action = array('', '', '', '', '', '');
	
	if( isset($expires['action']) AND $expires['action']) {
		$exp_action[$expires['action']] = "selected=\"selected\"";
	}
	
	if( isset($expires['action']) AND $expires['move_cat'] ) {
		$move_cat_list = CategoryNewsSelection( explode( ',', $expires['move_cat'] ), 0 );
	} else $move_cat_list = CategoryNewsSelection( 0, 0 );
	
	
	if ($row['autor'] != $member_id['name']) $notice_btn = "<button  onclick=\"sendNotice('{$id}');  return false;\" class=\"btn bg-slate-600 btn-sm btn-raised position-left\"><i class=\"fa fa-envelope-o position-left\"></i>{$lang['btn_notice']}</button>"; else $notice_btn = "";
	if ($row['autor'] != $member_id['name'] AND $user_group[$member_id['user_group']]['allow_all_edit'] AND !$row['approve']) $spam_btn = "<button  onclick=\"MarkSpam('{$id}', '{$dle_login_hash}'); return false;\" class=\"btn bg-brown-600 btn-sm btn-raised position-left\"><i class=\"fa fa-minus-square-o position-left\"></i> {$lang['btn_spam']}</button>"; else $spam_btn = "";

	echo <<<HTML
<div class="panel panel-default">

		    <div class="panel-heading">
				<ul class="nav nav-tabs nav-tabs-solid">
					<li class="active"><a href="#tabhome" data-toggle="tab"><i class="fa fa-home position-left"></i> {$lang['tabs_news']}</a></li>
					<li><a href="#tabvote" data-toggle="tab"><i class="fa fa-bar-chart position-left"></i> {$lang['tabs_vote']}</a></li>
					<li><a href="#tabextra" data-toggle="tab"><i class="fa fa-tasks position-left"></i> {$lang['tabs_extra']}</a></li>
					<li id="tab-perimit"><a href="#tabperm" data-toggle="tab"><i class="fa fa-lock position-left"></i> {$lang['tabs_perm']}</a></li>
				</ul>
                <div class="heading-elements">
	                <ul class="icons-list">
						<li><a href="#" class="panel-fullscreen"><i class="fa fa-expand"></i></a></li>
					</ul>
                </div>
			</div>

			<form method="post" class="form-horizontal" name="addnews" id="addnews" onsubmit="if(checkxf()=='fail') return false;" action="">
                 <div class="panel-tab-content tab-content">
                     <div class="tab-pane active" id="tabhome">
						<div class="panel-body">

							<div class="form-group">
							  <label class="control-label col-sm-2">{$lang['edit_info']}</label>
							  <div class="col-sm-10">
								<span class="position-left">ID=<b>{$row['id']}</b>, {$lang['edit_eau']}</span>{$author_info}
							  </div>
							 </div>

							<div class="form-group">
							  <label class="control-label col-sm-2">{$lang['edit_et']}</label>
							  <div class="col-sm-10">
								<input type="text" class="form-control width-550 position-left" name="title" id="title" value="{$row['title']}" maxlength="250"><button onclick="find_relates(); return false;" class="visible-lg-inline-block btn bg-info-800 btn-sm btn-raised">{$lang['b_find_related']}</button><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['hint_title']}" ></i><span id="related_news"></span>
							  </div>
							 </div>

							<div class="form-group">
							  <label class="control-label col-sm-2">{$lang['edit_edate']}</label>
							  <div class="col-sm-10">
								<input type="text" name="newdate" data-rel="calendar" class="form-control position-left" style="width:190px;" value="{$row['date']}" autocomplete="off"><label class="checkbox-inline"><input class="icheck" type="checkbox" name="allow_now" id="allow_now" value="yes">{$lang['edit_jdate']}</label>
							  </div>
							 </div>

							<div class="form-group">
							  <label class="control-label col-sm-2">{$lang['edit_cat']}</label>
							  <div class="col-sm-10">
								<select data-placeholder="{$lang['addnews_cat_sel']}" name="category[]" id="category" onchange="onCategoryChange(this)" {$category_multiple} style="width:100%;max-width:350px;">{$categories_list}</select><input type="hidden" name="category_custom_sort" id="category_custom_sort" value="">
							  </div>
							 </div>

							 <div class="form-group editor-group">
							  <label class="control-label col-md-2">{$lang['addnews_short']}</label>
							  <div class="col-md-10">
HTML;

	if( $config['allow_admin_wysiwyg'] ) {

		include (DLEPlugins::Check(ENGINE_DIR . '/editor/shortnews.php'));

	} else {

		$bb_editor = true;
		include (DLEPlugins::Check(ENGINE_DIR . '/inc/include/inserttag.php'));
		echo "<div class=\"editor-panel\"><div class=\"shadow-depth1\">{$bb_code}<textarea class=\"editor\" style=\"width:100%;height:300px;\" onfocus=\"setFieldName(this.name)\" name=\"short_story\" id=\"short_story\" >{$row['short_story']}</textarea></div></div>";
	}

echo <<<HTML
							  </div>
							</div>

							 <div class="form-group editor-group">
							  <label class="control-label col-md-2">{$lang['addnews_full']}</label>
							  <div class="col-md-10">
HTML;
	if( $config['allow_admin_wysiwyg'] ) {

		include (DLEPlugins::Check(ENGINE_DIR . '/editor/fullnews.php'));

	} else {

		echo "<div class=\"editor-panel\"><div class=\"shadow-depth1\">{$bb_panel}<textarea class=\"editor\" style=\"width:100%;height:350px;\" onfocus=\"setFieldName(this.name)\" name=\"full_story\" id=\"full_story\">{$row['full_story']}</textarea></div></div>";
	}
	// XFields Call
	$xfieldsaction = "list";
	$xfieldsid = $row['xfields'];
	$xfieldscat = $row['category'];
	$news_id = $id;
	$author = urlencode($row['autor']);
	include (DLEPlugins::Check(ENGINE_DIR . '/inc/xfields.php'));
	// End XFields Call

	if( !$config['allow_admin_wysiwyg'] ) $output = str_replace("<!--panel-->", $bb_panel, $output);
echo <<<HTML
							  </div>
							</div>
{$output}

							<div class="form-group">
							  <label class="control-label col-md-2">{$lang['news_edit_reason']}</label>
							  <div class="col-md-10">
								<div class="checkbox"><label><input class="icheck" type="checkbox" id="view_edit" name="view_edit" value="1" {$view_edit_cheked}>{$lang['allow_view_edit']}</label></div><input type="text" class="form-control width-450 position-left" name="editreason" id="editreason" value="{$row['reason']}">{$lang['news_edit_date']}
							  </div>
							 </div>

							<div class="form-group">
							  <label class="control-label col-md-2">{$lang['addnews_option']}</label>
							  <div class="col-md-10">
								<div class="row">
									<div class="col-sm-6" style="max-width:300px;">
										<div class="checkbox"><label><input class="icheck" type="checkbox" id="approve" name="approve" value="1" {$ifapp}>{$lang['addnews_mod']}</label></div>
										{$main_input}
										<div class="checkbox" id="opt_holder_rating"><label><input class="icheck" type="checkbox" id="allow_rating" name="allow_rating" value="1" {$ifrat}>{$lang['addnews_allow_rate']}</label></div>
										{$fix_br}
									</div>
									<div class="col-sm-6">
										<div class="checkbox" id="opt_holder_comments"><label><input class="icheck" type="checkbox" id="allow_comm" name="allow_comm" value="1" {$ifch}>{$lang['addnews_comm']}</label></div>
										{$fix_input}
										{$disable_index}
										{$disable_search}
									</div>
								</div>
								{$rss_option}
							  </div>
							 </div>


						</div>
					</div>
                    <div class="tab-pane" id="tabvote" >
						<div class="panel-body">

							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['v_ftitle']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="vote_title" class="form-control width-400" maxlength="200" value="{$poll['title']}"><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right position-left" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['hint_ftitle']}" ></i>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['vote_title']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="frage" class="form-control width-400" maxlength="200" value="{$poll['frage']}"><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right position-left" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['hint_vtitle']}" ></i>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['vote_body']}<div class="text-muted text-size-small">{$lang['vote_str_1']}</div></label>
							  <div class="col-md-10 col-sm-9">
								<textarea rows="7" class="classic width-400" name="vote_body">{$poll['body']}</textarea>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3"></label>
							  <div class="col-md-10 col-sm-9">
								<div class="checkbox"><label><input class="icheck" type="checkbox" id="allow_m_vote" name="allow_m_vote" value="1" {$poll['multiple']}>{$lang['v_multi']}</label></div>
								<br />{$clear_poll}
							  </div>
							 </div>

							<div class="form-group">
								<div class="col-md-12"><span class="text-muted text-size-small"> <i class="fa fa-exclamation-triangle position-left"></i>{$lang['v_info']}</span></div>
							</div>


						</div>
                     </div>
                    <div class="tab-pane" id="tabextra" >
						<div class="panel-body">

							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['catalog_url']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="catalog_url" class="form-control" maxlength="3" style="width:55px;" value="{$row['symbol']}"><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right position-left" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['catalog_hint_url']}" ></i>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['addnews_url']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="alt_name" class="form-control width-500" maxlength="190" value="{$row['alt_name']}"><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right position-left" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['hint_url']}" ></i>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-sm-2">{$lang['label_related']}</label>
							  <div class="col-sm-10">
								<input type="text" class="form-control width-350 position-left" name="related_ids" id="related_ids" value="{$row['related_ids']}"><button onclick="find_related_ids('{$row['id']}'); return false;" class="visible-lg-inline-block btn bg-info-800 btn-sm btn-raised">{$lang['b_related_renew']}</button>
							  </div>	
							</div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['addnews_tags']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="tags" id="tags" autocomplete="off" value="{$row['tags']}" />
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['date_expires']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="expires" data-rel="calendardate" class="form-control" style="width:200px;" value="{$expires['expires']}" autocomplete="off"><span class="position-right position-left">{$lang['cat_action']}</span><select class="uniform" name="expires_action" id="expires_action" onchange="moveCategoryChange(this)"><option value="0">{$lang['mass_noact']}</option><option value="1" {$exp_action[1]}>{$lang['edit_dnews']}</option><option value="2" {$exp_action[2]}>{$lang['mass_edit_notapp']}</option><option value="3" {$exp_action[3]}>{$lang['mass_edit_notmain']}</option><option value="4" {$exp_action[4]}>{$lang['mass_edit_notfix']}</option><option value="5" {$exp_action[5]}>{$lang['m_cat_list_2']}</option></select><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right position-left" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['hint_expires']}" ></i>
							  </div>
							 </div> 
							 <div class="form-group" id="movecatlist" style="display:none;">
							  <label class="control-label col-sm-2">{$lang['m_cat_list_1']}</label>
							  <div class="col-sm-10">
								<select data-placeholder="{$lang['addnews_cat_sel']}" title="{$lang['addnews_cat_sel']}" name="movecat[]" $category_multiple style="width:100%;max-width:350px;">{$move_cat_list}</select>
							  </div>
							</div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3"></label>
							  <div class="col-md-10 col-sm-9">
								{$need_pass}
							  </div>
							 </div>
							<div class="form-group" id="passlist" style="display:none;">
							  <label class="control-label col-md-2 col-sm-3">{$lang['pass_list_2']}<div class="text-muted text-size-small">{$lang['pass_list_3']}</div></label>
							  <div class="col-md-10 col-sm-9">
								<textarea rows="5" class="classic width-500" name="password">{$password}</textarea>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3"></label>
							  <div class="col-md-10 col-sm-9">
								<span class="text-muted text-size-small">{$lang['add_metatags']}</span><i class="help-button visible-lg-inline-block text-primary-600 fa fa-question-circle position-right position-left" data-rel="popover" data-trigger="hover" data-placement="auto right" data-content="{$lang['hint_metas']}" ></i>
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['meta_title']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="meta_title" class="form-control width-500" maxlength="140" value="{$row['metatitle']}">
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['meta_descr']}</label>
							  <div class="col-md-10 col-sm-9">
								<input type="text" name="descr" id="autodescr" class="form-control width-500" maxlength="300" value="{$row['descr']}">
							  </div>
							 </div>
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$lang['meta_keys']}</label>
							  <div class="col-md-10 col-sm-9">
								<textarea class="tags" name="keywords" id='keywords'>{$row['keywords']}</textarea><br /><br />
									<button onclick="auto_keywords(1); return false;" class="btn bg-primary-600 btn-sm btn-raised position-left"><i class="fa fa-exchange position-left"></i>{$lang['btn_descr']}</button>
									<button onclick="auto_keywords(2); return false;" class="btn bg-primary-600 btn-sm btn-raised"><i class="fa fa-exchange position-left"></i>{$lang['btn_keyword']}</button>
							  </div>
							 </div>
							{$clear_subscribe}
						</div>
                     </div>
                    <div class="tab-pane" id="tabperm" >
						<div class="panel-body">
HTML;

	if( $member_id['user_group'] < 3 ) {
		foreach ( $user_group as $group ) {
			if( $group['id'] > 1 ) {
				
				$access[$group['id']][1] = isset($access[$group['id']][1]) ? $access[$group['id']][1] : '';
				$access[$group['id']][2] = isset($access[$group['id']][2]) ? $access[$group['id']][2] : '';
				$access[$group['id']][3] = isset($access[$group['id']][3]) ? $access[$group['id']][3] : '';
				
				echo <<<HTML
							<div class="form-group">
							  <label class="control-label col-md-2 col-sm-3">{$group['group_name']}</label>
							  <div class="col-md-10 col-sm-9">
								<select class="uniform" name="group_extra[{$group['id']}]">
										<option value="0">{$lang['ng_group']}</option>
										<option value="1" {$access[$group['id']][1]}>{$lang['ng_read']}</option>
										<option value="2" {$access[$group['id']][2]}>{$lang['ng_all']}</option>
										<option value="3" {$access[$group['id']][3]}>{$lang['ng_denied']}</option>
								</select>
							   </div>
							 </div>
HTML;
			}
		}
	} else {

		echo <<<HTML
    <div class="text-center pt-20 pb-20">{$lang['tabs_not']}</div>
HTML;

	}
	
	$expires['expires'] = isset($expires['expires']) ? $expires['expires'] : '';
	$expires['action'] = isset($expires['action']) ? $expires['action'] : '';
	$expires['move_cat'] = isset($expires['move_cat']) ? $expires['move_cat'] : '';

echo <<<HTML
							<div class="row">
								<div class="col-md-12"><span class="text-muted text-size-small"><i class="fa fa-exclamation-triangle position-left"></i>{$lang['tabs_g_info']}</span></div>
							</div>
						</div>
                     </div>
				</div>
				<div class="panel-footer">
					<button type="submit" class="btn bg-teal btn-sm btn-raised position-left"><i class="fa fa-floppy-o position-left"></i>{$lang['news_save']}</button>
					<button onclick="preview(); return false;" class="btn bg-slate-600 btn-sm btn-raised position-left"><i class="fa fa-desktop position-left"></i>{$lang['btn_preview']}</button>
					{$notice_btn}
					{$spam_btn}
					<button onclick="confirmDelete('?mod=editnews&action=doeditnews&ifdelete=yes&id=$id&user_hash=$dle_login_hash', '{$id}'); return false;" class="btn bg-danger btn-sm btn-raised"><i class="fa fa-trash-o position-left"></i>{$lang['edit_dnews']}</button>
					<input type="hidden" name="id" value="$id" />
					<input type="hidden" name="expires_alt" value="{$expires['expires']}{$expires['action']}{$expires['move_cat']}" />
					<input type="hidden" name="user_hash" value="{$dle_login_hash}" />
					<input type="hidden" name="action" value="doeditnews" />
					<input type="hidden" name="mod" value="editnews" />
				</div>
</form>
</div>
HTML;

	echofooter();

} elseif( $action == "doeditnews" ) {
	
	if( $_REQUEST['user_hash'] == "" OR $_REQUEST['user_hash'] != $dle_login_hash ) {
		msg( "error", $lang['addnews_error'], $lang['sess_error'], "javascript:history.go(-1)" );
	}
	
	@header('X-XSS-Protection: 0;');
	
	$id = intval( $_GET['id'] );
	$mail_send = false;

	$allow_comm = isset( $_POST['allow_comm'] ) ? intval( $_POST['allow_comm'] ) : 0;
	$allow_main = isset( $_POST['allow_main'] ) ? intval( $_POST['allow_main'] ) : 0;
	$approve = isset( $_POST['approve'] ) ? intval( $_POST['approve'] ) : 0;
	$allow_rating = isset( $_POST['allow_rating'] ) ? intval( $_POST['allow_rating'] ) : 0;
	$news_fixed = isset( $_POST['news_fixed'] ) ? intval( $_POST['news_fixed'] ) : 0;
	$allow_br = isset( $_POST['allow_br'] ) ? intval( $_POST['allow_br'] ) : 0;
	$view_edit = isset( $_POST['view_edit'] ) ? intval( $_POST['view_edit'] ) : 0;
	$category = isset( $_POST['category'] ) ? $_POST['category'] : array();
	$disable_index = isset( $_POST['disable_index'] ) ? intval( $_POST['disable_index'] ) : 0;
	$disable_search = isset( $_POST['disable_search'] ) ? intval( $_POST['disable_search'] ) : 0;
	$need_pass = isset( $_POST['need_pass'] ) ? intval( $_POST['need_pass'] ) : 0;

	$allow_rss = isset( $_POST['allow_rss'] ) ? intval( $_POST['allow_rss'] ) : 0;
	$allow_rss_turbo = isset( $_POST['allow_rss_turbo'] ) ? intval( $_POST['allow_rss_turbo'] ) : 0;
	$allow_rss_dzen = isset( $_POST['allow_rss_dzen'] ) ? intval( $_POST['allow_rss_dzen'] ) : 0;

	if( isset($_POST['category_custom_sort']) AND count(explode('::', $_POST['category_custom_sort'])) > 1 ) {
		$category = explode('::', $_POST['category_custom_sort']);
	}
	
	$disable_rss_dzen = 0;
	$disable_rss_turbo = 0;
	
	if($member_id['user_group'] > 2 ) {
		$disable_index = 0;
		$disable_search = 0;
		$need_pass = 0;
		$allow_rss = 1;
		$allow_rss_turbo = 1;
		$allow_rss_dzen = 1;
	}

	if( !$config['allow_rss'] ) { $allow_rss = 1; }
	if( !$config['allow_yandex_dzen'] ) { $allow_rss_dzen = 0; }
	if( !$config['allow_yandex_turbo'] ) { $allow_rss_turbo = 0; }
	
	if( isset($_POST['password']) AND trim($_POST['password']) )$need_pass = 1; else $need_pass = 0;
	
	if( !is_array($category) ) $category = array ();
	
	if( !count($category) ) $category[] = '0';

	$category_list = array();

	foreach ( $category as $value ) {
		$category_list[] = intval($value);
	}
	
	if($member_id['cat_add']) $allow_list = explode( ',', $member_id['cat_add'] );
	else $allow_list = explode( ',', $user_group[$member_id['user_group']]['cat_add'] );

	foreach ( $category_list as $selected ) {
		
		if( $allow_list[0] != "all" AND !in_array( $selected, $allow_list ) ) {
			$approve = 0;
			$mail_send = true;
		}
		
		if(isset($cat_info[$selected]['disable_main']) AND $cat_info[$selected]['disable_main']) $allow_main = 0;
		if(isset($cat_info[$selected]['disable_comments']) AND $cat_info[$selected]['disable_comments']) $allow_comm = 0;
		if(isset($cat_info[$selected]['disable_rating']) AND $cat_info[$selected]['disable_rating']) $allow_rating = 0;

		if($member_id['user_group'] > 2 ) {
			if(!$cat_info[$selected]['enable_dzen']) $disable_rss_dzen ++;
			if(!$cat_info[$selected]['enable_turbo']) $disable_rss_turbo ++;
		}
		
	}

	if($member_id['user_group'] > 2 ) {
		if( $disable_rss_dzen AND $disable_rss_dzen = count($category_list) ) $allow_rss_dzen = 0;
		if( $disable_rss_turbo AND $disable_rss_turbo = count($category_list) ) $allow_rss_turbo = 0;
	}
	
	if($member_id['cat_allow_addnews']) $allow_list = explode( ',', $member_id['cat_allow_addnews'] );
	else $allow_list = explode( ',', $user_group[$member_id['user_group']]['cat_allow_addnews'] );

	foreach ( $category_list as $selected ) {
		if( $allow_list[0] != "all" AND ! in_array( $selected, $allow_list ) AND $ifdelete != "yes") msg( "error", $lang['addnews_error'], $lang['news_err_41'], "javascript:history.go(-1)" );
	}

	$category_list = $db->safesql( implode( ',', $category_list ) );

	if( !$user_group[$member_id['user_group']]['moderation'] ) {
		$approve = 0;
		$mail_send = true;
	}

	$_POST['title'] = isset($_POST['title']) ? $_POST['title'] : '';
	$title = $parse->process( trim( strip_tags ($_POST['title']) ) );

	if ( !$user_group[$member_id['user_group']]['allow_html'] ) {

		$_POST['short_story'] = strip_tags ($_POST['short_story']);
		$_POST['full_story'] = strip_tags ($_POST['full_story']);

	}

	if ( $config['allow_admin_wysiwyg'] ) $parse->allow_code = false;

	$_POST['full_story'] = isset($_POST['full_story']) ? $_POST['full_story'] : '';
	$_POST['short_story'] = isset($_POST['short_story']) ? $_POST['short_story'] : '';
	
	$full_story = $parse->process( $_POST['full_story'] );
	$short_story = $parse->process( $_POST['short_story'] );

	if( $config['allow_admin_wysiwyg'] or $allow_br != '1' ) {

		$full_story = $db->safesql( $parse->BB_Parse( $full_story ) );
		$short_story = $db->safesql( $parse->BB_Parse( $short_story ) );

	} else {

		$full_story = $db->safesql( $parse->BB_Parse( $full_story, false ) );
		$short_story = $db->safesql( $parse->BB_Parse( $short_story, false ) );

	}

	if( $parse->not_allowed_text ) {
		msg( "error", $lang['addnews_error'], $lang['news_err_39'], "javascript:history.go(-1)" );
	}

	if( !$title AND $ifdelete != "yes" ) msg( "error", $lang['cat_error'], $lang['addnews_alert'], "javascript:history.go(-1)" );

	if( dle_strlen( $title, $config['charset'] ) > 255 ) {
		msg( "error", $lang['cat_error'], $lang['addnews_ermax'], "javascript:history.go(-1)" );
	}

	$_POST['alt_name'] = isset($_POST['alt_name']) ? $_POST['alt_name'] : '';
	
	$alt_name = trim($_POST['alt_name']);
	
	if(!$alt_name) $alt_name = totranslit( stripslashes( $title ), true, false );
	else $alt_name = totranslit( stripslashes( $alt_name ), true, false );
	
	if( dle_strlen( $alt_name, $config['charset'] ) > 190 ) {
		$alt_name = dle_substr( $alt_name, 0, 190, $config['charset'] );
	}
	
	$title = $db->safesql( $title );
	$alt_name = $db->safesql( $alt_name );
	
	$metatags = create_metatags( $short_story." ".$full_story );

	$_POST['catalog_url'] = isset($_POST['catalog_url']) ? $_POST['catalog_url'] : '';
	$catalog_url = $db->safesql( dle_substr( htmlspecialchars( strip_tags( stripslashes( trim( $_POST['catalog_url'] ) ) ), ENT_QUOTES, $config['charset'] ), 0, 3, $config['charset'] ) );

	if ($config['create_catalog'] AND !$catalog_url) $catalog_url = $db->safesql( dle_substr( htmlspecialchars( strip_tags( stripslashes( trim( $title ) ) ), ENT_QUOTES, $config['charset'] ), 0, 1, $config['charset'] ) );

	$_POST['editreason'] = isset($_POST['editreason']) ? $_POST['editreason'] : '';
	$editreason = $db->safesql( htmlspecialchars( strip_tags( stripslashes( trim( $_POST['editreason'] ) ) ), ENT_QUOTES, $config['charset'] ) );

	$_POST['tags'] = isset($_POST['tags']) ? $_POST['tags'] : '';
	
	if( @preg_match( "/[\||\<|\>]/", $_POST['tags'] ) ) $_POST['tags'] = "";
	else $_POST['tags'] = @$db->safesql( htmlspecialchars( strip_tags( stripslashes( trim( $_POST['tags'] ) ) ), ENT_COMPAT, $config['charset'] ) );

	if ( $_POST['tags'] ) {

		$temp_array = array();
		$tags_array = array();
		$temp_array = explode (",", $_POST['tags']);

		if (count($temp_array)) {

			foreach ( $temp_array as $value ) {
				if( trim($value) ) $tags_array[] = trim( $value );
			}

		}

		if ( count($tags_array) ) $_POST['tags'] = implode(", ", $tags_array); else $_POST['tags'] = "";

	}

	$_POST['vote_title'] = isset($_POST['vote_title']) ? $_POST['vote_title'] : '';
	
	if( trim( $_POST['vote_title'] ) ) {

		$add_vote = 1;
		$vote_title = trim( $db->safesql( $parse->process( strip_tags($_POST['vote_title']) ) ) );
		$frage = trim( $db->safesql( $parse->process( strip_tags($_POST['frage']) ) ) );
		$vote_body = $db->safesql( $parse->BB_Parse( $parse->process( strip_tags($_POST['vote_body']) ), false ) );
		$allow_m_vote = isset($_POST['allow_m_vote']) ? intval( $_POST['allow_m_vote'] ) : 0;

	} else $add_vote = 0;

	$_POST['related_ids'] = isset($_POST['related_ids']) ? $_POST['related_ids'] : '';
	
	if( trim( $_POST['related_ids'] ) ) {
		
		$_POST['related_ids'] = explode(',', $_POST['related_ids']);
		
		foreach ( $_POST['related_ids'] as $value ) {
			if( intval($value) ){
				$related_ids[] = intval($value);
			}
		}
		
		$related_ids = implode(',', $related_ids);
	
	} else $related_ids = '';
	
	if( $member_id['user_group'] < 3 and $ifdelete != "yes" ) {

		$group_regel = array ();

		foreach ( $_POST['group_extra'] as $key => $value ) {
			if( $value ) $group_regel[] = intval( $key ) . ':' . intval( $value );
		}

		if( count( $group_regel ) ) $group_regel = implode( "||", $group_regel );
		else $group_regel = "";

	} else $group_regel = '';

	$movecat = isset($_POST['movecat']) ? $_POST['movecat'] : array();
	
	if( !is_array($movecat) ) $movecat = array ();

	if( !count($movecat) ) $movecat[] = '0';

	$movecat_list = array();

	foreach ( $movecat as $value ) {
		$movecat_list[] = intval($value);
	}
				
	$movecat_list = $db->safesql( implode( ',', $movecat_list ) );
	
	$_POST['expires'] = isset($_POST['expires']) ? $_POST['expires'] : '';
	$_POST['expires_action'] = isset($_POST['expires_action']) ? $_POST['expires_action'] : '';
	$_POST['expires_alt'] = isset($_POST['expires_alt']) ? $_POST['expires_alt'] : '';
	
	if ( ($_POST['expires'].$_POST['expires_action'].$movecat_list) != $_POST['expires_alt'] ) {
		
		if( trim( $_POST['expires'] ) != "" ) {
			if( (($expires = strtotime( $_POST['expires'] )) === - 1) OR !$expires) {
				msg( "error", $lang['addnews_error'], $lang['addnews_erdate'], "javascript:history.go(-1)" );
			}
		} else $expires = '';

		$expires_change = true;

	} else $expires_change = false;

	$no_permission = FALSE;
	$okdeleted = FALSE;
	$okchanges = FALSE;

	$db->query( "SELECT id, autor, date, xfields, title, category, approve, tags, news_id, disable_index, disable_search, need_pass, allow_rss, allow_rss_turbo, allow_rss_dzen  FROM " . PREFIX . "_post LEFT JOIN " . PREFIX . "_post_extras ON (" . PREFIX . "_post.id=" . PREFIX . "_post_extras.news_id) WHERE id = '$id'" );

	while ( $row = $db->get_row() ) {
		$item_db[0] = $row['id'];
		$item_db[1] = $row['autor'];
		$item_db[2] = $row['tags'];
		$item_db[3] = $row['approve'];
		$item_db[4] = $db->safesql( $row['title'] );
		$item_db[5] = explode( ',', $row['category'] );
		$item_db[6] = $row['news_id'];
		$item_db[7] = strtotime( $row['date'] );
		$item_db[8] = $row['category'];
		$xf_existing = xfieldsdataload($row['xfields']);
		
		if($member_id['user_group'] > 2 ) {
			$disable_index = $row['disable_index'];
			$disable_search = $row['disable_search'];
			$need_pass = $row['need_pass'];
			$allow_rss = $row['allow_rss'];
			$allow_rss_turbo = $row['allow_rss_turbo'];
			$allow_rss_dzen = $row['allow_rss_dzen'];
		}
		
	}

	$db->free();

	if( $ifdelete != "yes" ) {

		$xfieldsaction = "init";
		$xfieldsid = $item_db[0];
		include (DLEPlugins::Check(ENGINE_DIR . '/inc/xfields.php'));

	}


	if( isset($item_db[0]) AND $item_db[0] ) {

		$have_perm = 0;

		if( $user_group[$member_id['user_group']]['allow_all_edit'] ) $have_perm = 1;

		if( $user_group[$member_id['user_group']]['allow_edit'] and $item_db[1] == $member_id['name'] ) {
			$have_perm = 1;
		}

		if( $ifdelete == "yes" ) {
			
			if($member_id['cat_add']) $allow_list = explode( ',', $member_id['cat_add'] );
			else $allow_list = explode( ',', $user_group[$member_id['user_group']]['cat_add'] );

			foreach ( $item_db[5] as $selected ) {
				if( $allow_list[0] != "all" AND !in_array($selected, $allow_list) ) $have_perm = 0;
			}

			if( !$user_group[$member_id['user_group']]['moderation']) {

				$have_perm = 0;

			}
		}
		
		if( $user_group[$member_id['user_group']]['max_edit_days'] ) {
			$maxedittime = $_TIME - ($user_group[$member_id['user_group']]['max_edit_days'] * 3600 * 24);
			if( $maxedittime > $item_db[7] ) $have_perm = 0;
		}
		
		if( ($member_id['user_group'] == 1) ) {
			$have_perm = 1;
		}
		
		if( $have_perm ) {

			if( $ifdelete != "yes" ) {
				$okchanges = TRUE;

				$added_time = time();
				$newdate = trim($_POST['newdate']);
				
				if( $config['allow_alt_url'] AND !$config['seo_type'] ) {
					
					$db->query( "SELECT id, date FROM " . PREFIX . "_post WHERE alt_name ='{$alt_name}' AND id != '$item_db[0]' " );
			
					while($found_news = $db->get_row()) {
						if( $found_news['id'] AND date( 'Y-m-d', strtotime( $found_news['date'] ) ) == date( 'Y-m-d', $_TIME ) ) {
							msg( "error", array($_SESSION['admin_referrer'] => $lang['edit_all_title'], '' => $lang['addnews_error'] ), $lang['news_err_42'], "javascript:history.go(-1)" );
						}	
					}
				
				}
	
				if( $newdate ) {

					if( isset($_POST['allow_now']) AND $_POST['allow_now'] == "yes" ) {
						
						$thistime = date( "Y-m-d H:i:s", $added_time );
						
					} elseif( (($newsdate = strtotime( $newdate )) === - 1) OR !$newsdate ) {
						
						msg( "error", $lang['cat_error'], $lang['addnews_erdate'], "javascript:history.go(-1)" );
						
					} else {

						$thistime = date( "Y-m-d H:i:s", $newsdate );

						if( ! intval( $config['no_date'] ) and $newsdate > $added_time ) {
							$thistime = date( "Y-m-d H:i:s", $added_time );
						}

					}

				} else $thistime = date( "Y-m-d H:i:s", $added_time );

				$db->query( "UPDATE " . PREFIX . "_post SET title='{$title}', date='{$thistime}', short_story='{$short_story}', full_story='{$full_story}', xfields='{$filecontents}', descr='{$metatags['description']}', keywords='{$metatags['keywords']}', category='{$category_list}', alt_name='{$alt_name}', allow_comm='{$allow_comm}', approve='{$approve}', allow_main='{$allow_main}', fixed='{$news_fixed}', allow_br='{$allow_br}', symbol='{$catalog_url}', tags='{$_POST['tags']}', metatitle='{$metatags['title']}' WHERE id='{$item_db[0]}'" );

				if ($item_db[6]) $db->query( "UPDATE " . PREFIX . "_post_extras SET allow_rate='{$allow_rating}', votes='{$add_vote}', disable_index='{$disable_index}', related_ids='{$related_ids}', access='{$group_regel}', editdate='{$added_time}', editor='{$member_id['name']}', reason='{$editreason}', view_edit='{$view_edit}', disable_search='{$disable_search}', need_pass='{$need_pass}', allow_rss='{$allow_rss}', allow_rss_turbo='{$allow_rss_turbo}', allow_rss_dzen='{$allow_rss_dzen}' WHERE news_id='{$item_db[0]}'" );
				else $db->query( "INSERT INTO " . PREFIX . "_post_extras (news_id, allow_rate, votes, disable_index, related_ids, access, editdate, editor, reason, view_edit, disable_search, need_pass, allow_rss, allow_rss_turbo, allow_rss_dzen) VALUES('{$item_db[0]}', '{$allow_rating}', '{$add_vote}', '{$disable_index}', '{$related_ids}', '{$group_regel}', '{$added_time}', '{$member_id['name']}', '{$editreason}', '{$view_edit}', '{$disable_search}', '{$need_pass}', '{$allow_rss}', '{$allow_rss_turbo}', '{$allow_rss_dzen}')" );

				$db->query( "INSERT INTO " . USERPREFIX . "_admin_logs (name, date, ip, action, extras) values ('".$db->safesql($member_id['name'])."', '{$_TIME}', '{$_IP}', '25', '{$title}')" );


				if( $add_vote ) {

					$count = $db->super_query( "SELECT COUNT(*) as count FROM " . PREFIX . "_poll WHERE news_id = '$item_db[0]'" );

					if( $count['count'] ) $db->query( "UPDATE  " . PREFIX . "_poll set title='$vote_title', frage='$frage', body='$vote_body', multiple='$allow_m_vote' WHERE news_id = '$item_db[0]'" );
					else $db->query( "INSERT INTO " . PREFIX . "_poll (news_id, title, frage, body, votes, multiple, answer) VALUES('$item_db[0]', '$vote_title', '$frage', '$vote_body', 0, '$allow_m_vote', '')" );

				} else {
					
					$db->query( "DELETE FROM " . PREFIX . "_poll WHERE news_id='$item_db[0]'" );
					$db->query( "DELETE FROM " . PREFIX . "_poll_log WHERE news_id='$item_db[0]'" );
					
				}
				
				if ( $need_pass ) {
					$post_password = $db->safesql($_POST['password']);
					
					$count = $db->super_query( "SELECT COUNT(*) as count FROM " . PREFIX . "_post_pass WHERE news_id = '{$item_db[0]}'" );
					
					if($post_password) {
						if( $count['count'] ) $db->query( "UPDATE  " . PREFIX . "_post_pass SET password='{$post_password}' WHERE news_id = '{$item_db[0]}'" );
						else $db->query( "INSERT INTO " . PREFIX . "_post_pass (news_id, password) VALUES('{$item_db[0]}', '{$post_password}')" );
					}

				} else {
					
					$db->query( "DELETE FROM " . PREFIX . "_post_pass WHERE news_id='$item_db[0]'" );
					
				}
	
				if ( $expires_change ) {

					$expires_action = intval($_POST['expires_action']);
		
					$db->query( "DELETE FROM " . PREFIX . "_post_log WHERE news_id='$item_db[0]'" );

					if( $expires AND $expires_action ) {
						$db->query( "INSERT INTO " . PREFIX . "_post_log (news_id, expires, action, move_cat) VALUES('$item_db[0]', '$expires', '$expires_action', '$movecat_list')" );
					}

				}

				if( $_POST['tags'] != $item_db[2] OR $approve != $item_db[3] ) {
					$db->query( "DELETE FROM " . PREFIX . "_tags WHERE news_id = '$item_db[0]'" );

					if( $_POST['tags'] != "" AND $approve ) {

						$tags = array ();

						$_POST['tags'] = explode( ",", $_POST['tags'] );

						foreach ( $_POST['tags'] as $value ) {

							$tags[] = "('" . $item_db[0] . "', '" . trim( $value ) . "')";
						}

						$tags = implode( ", ", $tags );
						$db->query( "INSERT INTO " . PREFIX . "_tags (news_id, tag) VALUES " . $tags );

					}
				}

				if( $category_list != $item_db[8] OR $approve != $item_db[3] ) {
					$db->query( "DELETE FROM " . PREFIX . "_post_extras_cats WHERE news_id = '$item_db[0]'" );

					if( $category_list AND $approve ) {

						$cat_ids = array ();

						$cat_ids_arr = explode( ",", $category_list );

						foreach ( $cat_ids_arr as $value ) {

							$cat_ids[] = "('" . $item_db[0] . "', '" . trim( $value ) . "')";
						}

						$cat_ids = implode( ", ", $cat_ids );
						$db->query( "INSERT INTO " . PREFIX . "_post_extras_cats (news_id, cat_id) VALUES " . $cat_ids );

					}
				}
				
				$db->query( "DELETE FROM " . PREFIX . "_xfsearch WHERE news_id = '{$item_db[0]}'" );

				if ( count($xf_search_words) AND $approve ) {
					
					$temp_array = array();
					
					foreach ( $xf_search_words as $value ) {
						
						$temp_array[] = "('" . $item_db[0] . "', '" . $value[0] . "', '" . $value[1] . "')";
					}
					
					$xf_search_words = implode( ", ", $temp_array );
					$db->query( "INSERT INTO " . PREFIX . "_xfsearch (news_id, tagname, tagvalue) VALUES " . $xf_search_words );
				}
				
				if( $member_id['user_group'] == 1 AND $_POST['new_author'] != $_POST['old_author'] ) {

					$_POST['new_author'] = $db->safesql( $_POST['new_author'] );

					$row = $db->super_query( "SELECT user_id  FROM " . USERPREFIX . "_users WHERE name = '{$_POST['new_author']}'" );

					if( $row['user_id'] ) {

						$db->query( "UPDATE " . PREFIX . "_post SET autor='{$_POST['new_author']}' WHERE id='$item_db[0]'" );
						$db->query( "UPDATE " . PREFIX . "_post_extras SET user_id='{$row['user_id']}' WHERE news_id='$item_db[0]'" );
						$db->query( "UPDATE " . PREFIX . "_images SET author='{$_POST['new_author']}' WHERE news_id='$item_db[0]'" );
						$db->query( "UPDATE " . PREFIX . "_files SET author='{$_POST['new_author']}' WHERE news_id='$item_db[0]'" );

						$db->query( "UPDATE " . USERPREFIX . "_users SET news_num=news_num+1 WHERE user_id='{$row['user_id']}'" );
						$db->query( "UPDATE " . USERPREFIX . "_users SET news_num=news_num-1 WHERE name='$item_db[1]'" );

					} else {

						msg( "warning", $lang['addnews_error'], $lang['edit_no_author'], "javascript:history.go(-1)" );

					}

				}
				
				if( !$approve AND $approve != $item_db[3] AND $mail_send AND $config['mail_news'] ) {
					
					$row = $db->super_query( "SELECT * FROM " . PREFIX . "_email WHERE name='new_news' LIMIT 0,1" );
					$mail = new dle_mail( $config, $row['use_html'] );
					
					$row['template'] = stripslashes( $row['template'] );
					$row['template'] = str_replace( "{%username%}", $member_id['name'], $row['template'] );
					$row['template'] = str_replace( "{%date%}", langdate( "j F Y H:i", $added_time, true ), $row['template'] );
					$row['template'] = str_replace( "{%title%}", stripslashes( stripslashes( $title ) ), $row['template'] );
					
					$category_list = explode( ",", $category_list );
					$my_cat = array ();
					
					foreach ( $category_list as $element ) {
						
						$my_cat[] = $cat_info[$element]['name'];
					
					}
					
					$my_cat = stripslashes( implode( ', ', $my_cat ) );
					
					$row['template'] = str_replace( "{%category%}", $my_cat, $row['template'] );
					
					$mail->send( $config['admin_mail'], $lang['mail_news'], $row['template'] );
				
				}
	
			} else {
	
				deletenewsbyid( $item_db[0] );
				$okdeleted = TRUE;

				$db->query( "INSERT INTO " . USERPREFIX . "_admin_logs (name, date, ip, action, extras) values ('".$db->safesql($member_id['name'])."', '{$_TIME}', '{$_IP}', '26', '{$item_db[4]}')" );

			}
		} else
			$no_permission = TRUE;

	}

	$item_db[0] = isset($item_db[0]) ? $item_db[0] : '';
	
	clear_cache( array('news_', 'full_'.$item_db[0], 'comm_'.$item_db[0], 'tagscloud_', 'archives_', 'related_', 'calendar_', 'rss', 'stats') );

	if( ! $_SESSION['admin_referrer'] ) {

		$_SESSION['admin_referrer'] = "?mod=editnews&amp;action=list";

	}

	if( $no_permission ) {
		msg( "error", $lang['addnews_error'], $lang['edit_denied'], $_SESSION['admin_referrer'] );
	} elseif( $okdeleted ) {
		msg( "success", $lang['edit_delok'], $lang['edit_delok_1'], array( $_SESSION['admin_referrer'] => $lang['add_s_3'] ) );
	} elseif( $okchanges ) {
		
		$row = $db->super_query( "SELECT id, date, category, alt_name FROM " . PREFIX . "_post WHERE id='{$item_db[0]}' LIMIT 1" );
		
		if( $config['allow_alt_url'] ) {
			if( $config['seo_type'] == 1 OR $config['seo_type'] == 2 ) {
				
				if( $row['category'] and $config['seo_type'] == 2 ) {

					$cats_url = get_url( $row['category'] );
					
					if($cats_url) {
						
						$full_link = $config['http_home_url'] . $cats_url . "/" . $row['id'] . "-" . $row['alt_name'] . ".html";
						
					} else $full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
				
				} else {
					
					$full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
				
				}
				
			} else {
				$full_link = $config['http_home_url'] . date( 'Y/m/d/', strtotime( $row['date'] ) ) . $row['alt_name'] . ".html";
			}
		} else {
			$full_link = $config['http_home_url'] . "index.php?newsid=" . $row['id'];
		}
		
		msg( "success", $lang['edit_alleok'], $lang['edit_alleok_1'], array( $_SESSION['admin_referrer'] => $lang['add_s_3'], '?mod=editnews&action=editnews&id='.$item_db[0] => $lang['add_s_4'], $full_link => $lang['add_s_5'] ) );
		
	} else {
		msg( "error", $lang['addnews_error'], $lang['edit_allerr'], $_SESSION['admin_referrer'] );
	}
}
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/gpt_comments.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
/*
=====================================================
 DataLife Engine - by SoftNews Media Group 
-----------------------------------------------------
 http://dle-news.ru/
-----------------------------------------------------
 Copyright (c) 2004-2021 SoftNews Media Group
=====================================================
 This code is protected by copyright
=====================================================
 File: comments.php
-----------------------------------------------------
 Use: comments edit
=====================================================
*/
if( !defined( 'DATALIFEENGINE' ) OR !defined( 'LOGGED_IN' ) ) {
	header( "HTTP/1.1 403 Forbidden" );
	header ( 'Location: ../../' );
	die( "Hacking attempt!" );
}



if( ! $user_group[$member_id['user_group']]['admin_comments'] ) {
	msg( "error", $lang['addnews_denied'], $lang['addnews_denied'], $_SESSION['admin_referrer'] );
}
	
$id = isset($_REQUEST['id']) ? intval( $_REQUEST['id'] ) : 0;

if( !isset($_SESSION['admin_referrer']) OR (isset($_SESSION['admin_referrer']) AND !$_SESSION['admin_referrer']) ) {

	$_SESSION['admin_referrer'] = "?mod=comments&amp;action=edit";

}

if( $action == "dorebuild" AND $id) {

	if( $_REQUEST['user_hash'] == "" or $_REQUEST['user_hash'] != $dle_login_hash ) {
		
		die( "Hacking attempt! User not found" );
	
	}
	
	$row = $db->super_query("SELECT COUNT(*) as count FROM " . PREFIX . "_comments WHERE post_id = '{$id}'");
	
	$db->query("UPDATE " . PREFIX . "_post SET comm_num='{$row['count']}' WHERE id='{$id}'");
	
	$lang['news_r_comments_1'] = str_ireplace ("{num}", $row['count'], $lang['news_r_comments_1']);
	
	msg( "success", $lang['db_ok'], $lang['news_r_comments_1'], $_SESSION['admin_referrer'] );
	
} elseif( $action == "dodelete" AND $id) {

	if( $_REQUEST['user_hash'] == "" or $_REQUEST['user_hash'] != $dle_login_hash ) {
		
		die( "Hacking attempt! User not found" );
	
	}
	
	deletecommentsbynewsid($id);
	$db->query( "UPDATE " . PREFIX . "_post SET comm_num='0' WHERE id ='{$id}'" );

	clear_cache();
	$db->query( "INSERT INTO " . USERPREFIX . "_admin_logs (name, date, ip, action, extras) values ('".$db->safesql($member_id['name'])."', '{$_TIME}', '{$_IP}', '20', '$id')" );
	
	msg( "success", $lang['massusers_head_1'], $lang['mass_delokc'], $_SESSION['admin_referrer'] );

} elseif( $action == "mass_delete" ) {

	if( $_REQUEST['user_hash'] == "" or $_REQUEST['user_hash'] != $dle_login_hash ) {
		
		die( "Hacking attempt! User not found" );
	
	}

	if( ! isset($_POST['selected_comments']) ) {
		msg( "error", $lang['mass_error'], $lang['mass_dcomm'], $_SESSION['admin_referrer'] );
	}
	
	foreach ( $_POST['selected_comments'] as $c_id ) {

		$c_id = intval( $c_id );
		
		deletecomments( $c_id );

	}
	
	clear_cache( array('news_', 'full_', 'comm_', 'rss') );

	$db->query( "INSERT INTO " . USERPREFIX . "_admin_logs (name, date, ip, action, extras) values ('".$db->safesql($member_id['name'])."', '{$_TIME}', '{$_IP}', '21', '')" );
	
	msg( "success", $lang['mass_head'], $lang['mass_delokc'], "?mod=comments&action=edit&id={$id}" );

} elseif( $action == "edit" ) {

	$_SESSION['admin_referrer'] = "?mod=comments&amp;action=edit";

	$where = array ( PREFIX . "_comments.approve = '1'");
	
	if ( $id ) $where[] = "post_id = '{$id}'";
	
	if(isset($_REQUEST['search_field']) AND $_REQUEST['search_field']) {
		
		$search_field = $db->safesql( addslashes(addslashes(trim( urldecode( $_REQUEST['search_field'] ) ) ) ) );
		$search_field = preg_replace('/\s+/u', '%', $search_field);
		
		$search_field2 = $db->safesql(trim( htmlspecialchars( urldecode( $_REQUEST['search_field'] ), ENT_QUOTES, $config['charset']  ) ) );
		$search_field2 = preg_replace('/\s+/u', '%', $search_field2);
		
		$where[] = "(".PREFIX ."_comments.text like '%{$search_field}%' OR ".PREFIX."_comments.text like '%{$search_field2}%')";
		
		$search_field = trim( htmlspecialchars( urldecode( $_REQUEST['search_field'] ), ENT_QUOTES, $config['charset']  ) );
		
	} else $search_field = "";

	$where = implode( " AND ", $where );

	$start_from = isset($_GET['start_from']) ? intval( $_GET['start_from'] ) : 0;
	if( $start_from < 0 ) $start_from = 0;
	$news_per_page = 20;
	$i = $start_from;

	$gopage = isset($_GET['gopage']) ? intval( $_GET['gopage'] ) : 0;
	if( $gopage > 0 ) $start_from = ($gopage - 1) * $news_per_page;

	if ($config['allow_comments_wysiwyg'] == "2") {
	
		$js_array[] = "engine/editor/jscripts/tiny_mce/tinymce.min.js";
	
	}
	
	if ($config['allow_comments_wysiwyg'] == "1") {
		
		$js_array[] = "engine/skins/codemirror/js/code.js";
		$js_array[] = "engine/editor/jscripts/froala/editor.js";
		$js_array[] = "engine/editor/jscripts/froala/languages/{$lang['wysiwyg_language']}.js";
		$css_array[] = "engine/editor/jscripts/froala/css/editor.css";
	
	}
	
	echoheader( "<i class=\"fa fa-file-text-o position-left\"></i><span class=\"text-semibold\">{$lang['header_c_1']}</span>", $lang['header_c_3'] );
	
	$entries = "";

	$result_count = $db->super_query( "SELECT COUNT(*) as count FROM " . PREFIX . "_comments WHERE gpt_comment=1 and  {$where}" );

	$db->query( "SELECT " . PREFIX . "_comments.id, post_id, " . PREFIX . "_comments.date, " . PREFIX . "_comments.autor, text, ip, " . PREFIX . "_post.title, " . PREFIX . "_post.date as newsdate, " . PREFIX . "_post.alt_name, " . PREFIX . "_post.category FROM " . PREFIX . "_comments LEFT JOIN " . PREFIX . "_post ON " . PREFIX . "_comments.post_id=" . PREFIX . "_post.id WHERE gpt_comment=1 and {$where} ORDER BY " . PREFIX . "_comments.date DESC LIMIT $start_from,$news_per_page" );
	
	while ( $row = $db->get_array() ) {
		$i ++;
		
		$row['text'] = str_ireplace( '{THEME}', 'templates/' . $config['skin'], $row['text'] );
		$row['text'] = "<div id='comm-id-" . $row['id'] . "'>" . stripslashes( $row['text'] ) . "</div>";
		$row['newsdate'] = strtotime( $row['newsdate'] );
		$row['date'] = strtotime( $row['date'] );
		if( !$langformatdatefull ) $langformatdatefull = "d.m.Y H:i:s";
		$date = date( $langformatdatefull, $row['date'] );
		
		if( $config['allow_alt_url'] ) {
			
			if( $config['seo_type'] == 1 OR $config['seo_type'] == 2 ) {
				
				if( intval( $row['category'] ) and $config['seo_type'] == 2 ) {
					
					$full_link = $config['http_home_url'] . get_url( intval( $row['category'] ) ) . "/" . $row['post_id'] . "-" . $row['alt_name'] . ".html";
				
				} else {
					
					$full_link = $config['http_home_url'] . $row['post_id'] . "-" . $row['alt_name'] . ".html";
				
				}
			
			} else {
				
				$full_link = $config['http_home_url'] . date( 'Y/m/d/', $row['newsdate'] ) . $row['alt_name'] . ".html";
			}
		
		} else {
			
			$full_link = $config['http_home_url'] . "index.php?newsid=" . $row['post_id'];
		
		}
		
		$news_title = "<a href=\"" . $full_link . "\"  target=\"_blank\">" . stripslashes( $row['title'] ) . "</a>";
		$row['autor'] = "<a href=\"?mod=editusers&action=edituser&user=".urlencode($row['autor'])."\" target=\"_blank\">{$row['autor']}</a>";
		$row['ip'] = "<a href=\"?mod=blockip&ip=".urlencode($row['ip'])."\" target=\"_blank\">{$row['ip']}</a>";

	
	$entries .= <<<HTML
<a name="comment{$row['id']}"></a>
<div id='table-comm-{$row['id']}' class="panel panel-default">
  <div class="panel-heading">
    <span class="label label-info position-left">{$lang['edit_autor']}</span><strong class="position-left">{$row['autor']}</strong>IP: {$row['ip']} {$lang['cmod_n_title']} {$news_title}
	<div class="heading-elements">
		<div class="checkbox checkbox-right"><label><input name="selected_comments[]" value="{$row['id']}" type="checkbox" class="icheck"></label></div>
	</div>
  </div>
  <div class="panel-body">
  {$row['text']}
  </div>
  <div class="panel-footer">
	<button onclick="ajax_comm_edit('{$row['id']}'); return false;" type="button" class="btn bg-primary-600 btn-sm btn-raised position-left"><i class="fa fa-pencil-square-o position-left"></i>{$lang['group_sel1']}</button>
	<button onclick="MarkSpam('{$row['id']}'); return false;" type="button" class="btn bg-brown-600 btn-sm btn-raised position-left"><i class="fa fa-minus-circle position-left"></i>{$lang['btn_spam']}</button>
	<button onclick="DeleteComments('{$row['id']}'); return false;" type="button" class="btn bg-danger btn-sm btn-raised"><i class="fa fa-trash-o position-left"></i>{$lang['edit_dnews']}</button>
	<span class="pull-right" style="margin-top: 4px;"><i class="fa fa-clock-o position-left"></i>{$date}</span>
  </div>
</div>
<input type="hidden" name="post_id[{$row['id']}]" value="{$row['post_id']}">
HTML;
	
	}
	
	$db->free();

		// pagination

		$npp_nav = "";
		
		if( $start_from > 0 ) {
			$previous = $start_from - $news_per_page;
			$npp_nav .= "<li><a href=\"?mod=gpt_comments&action=edit&id={$id}&start_from={$previous}&search_field={$search_field}\" title=\"{$lang['edit_prev']}\">&lt;&lt;</a></li>";
		}
		
		if( $result_count['count'] > $news_per_page ) {
			
			$enpages_count = @ceil( $result_count['count'] / $news_per_page );
			$enpages_start_from = 0;
			$enpages = "";
			
			if( $enpages_count <= 10 ) {
				
				for($j = 1; $j <= $enpages_count; $j ++) {
					
					if( $enpages_start_from != $start_from ) {
						
						$enpages .= "<li><a href=\"?mod=gpt_comments&action=edit&id={$id}&start_from={$enpages_start_from}&search_field={$search_field}\">$j</a></li>";
					
					} else {
						
						$enpages .= "<li class=\"active\"><span>$j</span></li>";
					}
					
					$enpages_start_from += $news_per_page;
				}
				
				$npp_nav .= $enpages;
			
			} else {
				
				$start = 1;
				$end = 10;
				
				if( $start_from > 0 ) {
					
					if( ($start_from / $news_per_page) > 4 ) {
						
						$start = @ceil( $start_from / $news_per_page ) - 3;
						$end = $start + 9;
						
						if( $end > $enpages_count ) {
							$start = $enpages_count - 10;
							$end = $enpages_count - 1;
						}
						
						$enpages_start_from = ($start - 1) * $news_per_page;
					
					}
				
				}
				
				if( $start > 2 ) {
					
					$enpages .= "<li><a href=\"?mod=gpt_comments&action=edit&id={$id}&start_from=0&search_field={$search_field}\">1</a></li> <li><span>...</span></li>";
				
				}
				
				for($j = $start; $j <= $end; $j ++) {
					
					if( $enpages_start_from != $start_from ) {
						
						$enpages .= "<li><a href=\"?mod=gpt_comments&action=edit&id={$id}&start_from={$enpages_start_from}&search_field={$search_field}\">$j</a></li>";
					
					} else {
						
						$enpages .= "<li class=\"active\"><span>$j</span></li>";
					}
					
					$enpages_start_from += $news_per_page;
				}
				
				$enpages_start_from = ($enpages_count - 1) * $news_per_page;
				$enpages .= "<li><span>...</span></li><li><a href=\"?mod=gpt_comments&action=edit&id={$id}&start_from={$enpages_start_from}&search_field={$search_field}\">$enpages_count</a></li>";
				
				$npp_nav .= $enpages;
			
			}
		
			if( $result_count['count'] > $i ) {
				$how_next = $result_count['count'] - $i;
				if( $how_next > $news_per_page ) {
					$how_next = $news_per_page;
				}
				$npp_nav .= "<li><a href=\"?mod=gpt_comments&action=edit&id={$id}&start_from={$i}&search_field={$search_field}\" title=\"{$lang['edit_next']}\">&gt;&gt;</a></li>";
			}
			
			$npp_nav = "<div class=\"pull-left\"><ul class=\"pagination pagination-sm\">".$npp_nav."</ul></div>";
		}		
		// pagination

	echo <<<HTML
<style type="text/css">
.bb-pane {
  height: 1%; overflow: hidden;
  padding-bottom: 5px;
  padding-left: 5px;
  margin: 0;
  height: auto !important;
  text-decoration:none;
  border-bottom-left-radius: 0px;
  border-top:1px solid #cccccc;
  border-left:1px solid #cccccc;
  border-right:1px solid #cccccc;
  box-shadow: none !important;
  margin: 0;
  text-decoration: none;
  box-shadow: none !important;
  background-color: #f6f6f6;
}
.dle_theme_dark .bb-pane {
    color: #fefefe;
    background-color: #363636;
    border-color: #363636;
}
.bb-pane>b {
    margin-top: 5px;
    margin-left: 0;
	vertical-align: middle;
}
.bb-pane .bb-btn + .bb-btn, .bb-pane .bb-btn + .bb-pane,.bb-pane .bb-pane + .bb-btn,.bb-pane .bb-pane + .bb-pane {
    margin-left:-1px;
}
.bb-btn {
	display: inline-block; overflow: hidden; float: left;
	padding: 4px 10px;
    border: 1px solid transparent;
}
 

.bb-btn:hover {
	background-color: #e6e6e6;
    border: 1px solid rgba(0, 0, 0, 0.23);
}

.dle_theme_dark .bb-btn:hover {
	background-color: transparent;
    border: 1px solid rgba(0, 0, 0, 0.23);
}

.bb-editor textarea { 
	font-size: 12px;
	font-family: verdana;
	-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
	box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
	-webkit-transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;
	transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;
	-webkit-border-radius: 0;
	border-radius: 0;
	color: #000;
	padding: 3px 5px 3px 5px;
	border:1px solid #cccccc;
	background: #ffffff;
	resize: vertical;
	outline: none;
	height: 300px;
	width: 100%;
}
.dle_theme_dark .bb-editor textarea {
    color: #ddd;
    background-color: #262626;
	border:1px solid #363636;
}
.ui-dialog input[type="text"], input[type="password"], textarea {
  -webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.075);
  box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.075);
  -webkit-transition:border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;
  transition:border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;
  -webkit-border-radius: 0;
  border-radius: 0;
  color: #000;
  padding: 3px 5px 3px 5px;
  border: 1px solid #cccccc;
  display: inline-block;
  background: #ffffff;
  font-size: 13px;
}

.ui-dialog input[type="text"]:focus, input[type="password"]:focus, .ui-dialog textarea:focus {
    border: 1px solid #009688; 
}

.dle_theme_dark .ui-dialog input[type="text"], .dle_theme_dark .ui-dialog input[type="password"], .dle_theme_dark .ui-dialog textarea {
  color: #fefefe;
  background-color: #555;
  border-color: #cbcbcb;
}

	.bb-pane-dropdown {
		position: absolute;
		top: 100%; left: 0;
		z-index: 1000;
		display: none;
		min-width: 180px;
		padding: 5px 0 !important;
		margin: 2px 0 0;
		list-style: none;
		font-size: 11px;
		border-radius: 2px;
		background: #fff;
		background-clip: padding-box;
		-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
		max-height: 300px;
    	overflow: auto;
	}
	.bb-pane-dropdown > li > a {
		display: block;
		padding: 3px 10px;
		clear: both;
		font-weight: normal;
		line-height: 1.42857;
		color: #353535;
		white-space: nowrap;
	}
	.bb-pane-dropdown > li > a:hover { text-decoration:none; color: #262626; background-color:whitesmoke; }
	.bb-pane-dropdown .color-palette div .color-btn {
		width: 17px; height: 17px;
		padding: 0; margin: 0;
		border: 1px solid #fff;
		cursor: pointer;
	}
	.bb-pane-dropdown .color-palette { padding: 0px 5px; }

	.bb-pane-dropdown table { margin: 0px; }
	
	.dle_theme_dark .bb-pane-dropdown {
		color: #fefefe;
		background-color: #363636!important;
	}
	
	.bb-sel { float: left; padding: 2px 2px 0 2px; }
	.bb-sel select { font-size: 11px; }
	.bb-sep { display: inline-block; float: left; width: 1px; padding: 2px; }
	.bb-btn { cursor: pointer;  outline: 0; }

	#b_font select, #b_size select { padding: 0;}

	.bb-pane h1, .bb-pane h2, .bb-pane h3, .bb-pane h4, .bb-pane h5, .bb-pane h6 { margin-top: 5px; margin-bottom: 5px; }
	.bb-pane h1 { font-size: 36px; }
	.bb-pane h2 { font-size: 30px; }
	.bb-pane h3 { font-size: 24px; }
	.bb-pane h4 { font-size:18px; }
	.bb-pane h5 { font-size:14px; }
	.bb-pane h6 { font-size:12px; }

	[class^="bb-btn"], [class*=" bb-btn"] {
	    font-family: 'bb-editor-font';
	    speak: none;
	    font-style: normal;
	    font-weight: normal;
	    font-variant: normal;
	    text-transform: none;
	    line-height: 1;
	    font-size: 14px;
	    -webkit-font-smoothing: antialiased;
	    -moz-osx-font-smoothing: grayscale;
	}

	.bb-sel { float: left; padding: 2px 2px 0 2px; }
	.bb-sel select { font-size: 11px; }
	.bb-sep { display: inline-block; float: left; width: 1px; padding: 2px; }
	.bb-btn { cursor: pointer;  outline: 0; }

	#b_font select, #b_size select { padding: 0;}

	#b_b:before {content: "\\f032";}
	#b_i:before {content: "\\f033";}
	#b_u:before {content: "\\f0cd";}
	#b_s:before {content: "\\f0cc";}
	#b_img:before { content: "\\f03e"; }
	#b_up:before { content: "\\e930"; }
	#b_emo:before { content: "\\f118"; }
	#b_url:before { content: "\\f0c1"; }
	#b_leech:before { content: "\\e98d"; }
	#b_mail:before { content: "\\f003"; }
	#b_video:before { content: "\\e913"; }
	#b_audio:before { content: "\\e911"; }
	#b_hide:before { content: "\\e9d1"; }
	#b_quote:before { content: "\\e977"; }
	#b_code:before { content: "\\f121"; }
	#b_left:before { content: "\\f036"; }
	#b_center:before { content: "\\f037"; }
	#b_right:before { content: "\\f038"; }
	#b_color:before { content: "\\e601"; }
	#b_spoiler:before { content: "\\e600"; }
	#b_fla:before { content: "\\ea8d"; }
	#b_yt:before { content: "\\f16a"; }
	#b_tf:before { content: "\\ea61"; }
	#b_list:before { content: "\\f0ca"; }
	#b_ol:before { content: "\\f0cb"; }
	#b_tnl:before { content: "\\ea61"; }
	#b_br:before { content: "\\ea68"; }
	#b_pl:before { content: "\\ea72"; }
	#b_size:before { content: "\\f034"; }
	#b_font:before { content: "\\f031"; }
	#b_header:before { content: "\\f1dc"; }
	#b_sub:before { content: "\\f12c"; }
	#b_sup:before { content: "\\f12b"; }
	#b_justify:before { content: "\\f039"; }
	.bbcodes {
		display:inline-block;
		padding: 4px 10px;
		margin-bottom:0;
		line-height: 1.5;
		cursor:pointer;
		border-width: 0;
        background-color: #1e88e5;
        border-color: #1e88e5;
        color: #fff;
		border-radius: 3px;
		white-space:nowrap;
		outline:0;
        -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        -webkit-transition: all ease-in-out 0.15s;
        transition: all ease-in-out 0.15s;

	}
	.bbcodes:hover {
      -webkit-box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
	}
	 .btn:focus {
		outline:0;
	}
	.emoji_box {
		width:100%;
		max-width: 390px;
	}
	.emoji_category {
		padding:7px;
		clear:both;
	}
	.emoji_list {
		margin-top:5px;
		margin-bottom:5px;
		width:100%;
		font-family:'Apple Color Emoji', 'Segoe UI Emoji', 'NotoColorEmoji', 'Segoe UI Symbol', 'Android Emoji', 'EmojiSymbols';
		font-size:2em;
	}
	.emoji_symbol {
		float:left;
		margin-bottom: 10px;
		width:12.5%;
		text-align:center;
	}
	
	.emoji_symbol a,  .emoji_symbol a:hover {
		cursor: pointer;
		text-decoration:none;
	}
</style>
<script>
<!--

var c_cache = [];
var dle_root = '';
var dle_prompt = '{$lang['p_prompt']}';
var dle_wysiwyg    = '{$config['allow_comments_wysiwyg']}';

function setNewField(which, formname)
{
	if (which != selField)
	{
		fombj    = formname;
		selField = which;

	}
};

function ajax_comm_edit( c_id )
{

	for (var i = 0, length = c_cache.length; i < length; i++) {
	    if (i in c_cache) {
			if ( c_cache[ i ] !== '' )
			{
				ajax_cancel_comm_edit( i );
			}
	    }
	}

	if ( ! c_cache[ c_id ] || c_cache[ c_id ] === '' )
	{
		c_cache[ c_id ] = $('#comm-id-'+c_id).html();
	}

	ShowLoading('');

	$.get("engine/ajax/controller.php?mod=editcomments", { id: c_id, area: 'news', action: "edit" }, function(data){

		HideLoading('');

		$('#comm-id-'+c_id).html(data);

		setTimeout(function() {
           $("html,body").stop().animate({scrollTop: $("#comm-id-" + c_id).offset().top - 70}, 700);
        }, 100);

	}, 'html');
	return false;
};

function ajax_cancel_comm_edit( c_id ) {
	if ( c_cache[ c_id ] != "" )
	{
		$("#comm-id-"+c_id).html(c_cache[ c_id ]);
	}

	c_cache[ c_id ] = '';

	return false;
};

function ajax_save_comm_edit( c_id, area )
{

	if (dle_wysiwyg == "2") {

		tinyMCE.triggerSave();

	}

	var comm_txt = $('#dleeditcomments'+c_id).val();


	ShowLoading('');

	$.post("engine/ajax/controller.php?mod=editcomments", { id: c_id, comm_txt: comm_txt, area: area, action: "save", user_hash: "{$dle_login_hash}" }, function(data){

		HideLoading('');
		c_cache[ c_id ] = '';
		$("#comm-id-"+c_id).html(data);

	});
	return false;
	
};

function DeleteComments(id) {

    DLEconfirm( '{$lang['d_c_confirm']}', '{$lang['p_confirm']}', function () {

		ShowLoading('');
	
		$.get("engine/ajax/controller.php?mod=deletecomments", { id: id, dle_allow_hash: '{$dle_login_hash}' }, function(r){
	
			HideLoading('');
	
			ShowOrHide('table-comm-'+id);
	
		});

	} );

};
function MarkSpam(id) {

    DLEconfirm( '{$lang['mark_spam_c']}', '{$lang['p_confirm']}', function () {

		ShowLoading('');
	
		$.get("engine/ajax/controller.php?mod=adminfunction", { id: id, action: 'commentsspam', user_hash: '{$dle_login_hash}' }, function(data){
	
			HideLoading('');
	
			if (data != "error") {
	
			    DLEconfirm( data, '{$lang['p_confirm']}', function () {
					location.reload(true);
				} );
	
			}
	
		});

	} );

};

function ckeck_uncheck_all() {
    var frm = document.dlemasscomments;
    for (var i=0;i<frm.elements.length;i++) {
        var elmnt = frm.elements[i];
        if (elmnt.type=='checkbox') {
            if(frm.master_box.checked == true){ elmnt.checked=false; $(elmnt).parents('.panel').find('.panel-body').removeClass('warning'); }
            else{ elmnt.checked=true; $(elmnt).parents('.panel').find('.panel-body').addClass('warning'); }
        }
    }
    if(frm.master_box.checked == true){ frm.master_box.checked = false; }
    else{ frm.master_box.checked = true; }
	
	$.uniform.update();
	
	return false;
};
$(function() {
    $('.heading-elements input[type=checkbox]').on('change', function() {
        if($(this).is(':checked')) {
            $(this).parents('.panel').find('.panel-body').addClass('warning');
        }
        else {
            $(this).parents('.panel').find('.panel-body').removeClass('warning');
        }
    });
});
//-->
</script>
<form action="" method="post" name="dlemasscomments" id="dlemasscomments">
<input type=hidden name="mod" value="comments">
<input type="hidden" name="user_hash" value="{$dle_login_hash}" />
<div class="panel panel-flat">
	<div class="panel-heading">
		<div class="has-feedback width-350">
			<input name="search_field" type="search" class="form-control" placeholder="{$lang['search_field']}" value="{$search_field}">
			<div class="form-control-feedback">
			    <a href="#" onclick="$(this).closest('form').submit(); return false;"><i class="fa fa-search text-size-base text-muted"></i></a>
			</div>
		</div>
		
		<div class="heading-elements">
			<div class="checkbox checkbox-right"><label><input name="master_box" id="master_box" type="checkbox" class="icheck" title="{$lang['edit_selall']}" onclick="javascript:ckeck_uncheck_all();">{$lang['edit_selall']}</label></div>
		</div>
	</div>
</div>
{$entries}
{$npp_nav}
<div class="pull-right">
	<select class="uniform" name="action"><option value="edit">---</option><option value="mass_delete">{$lang['edit_seldel']}</option></select>
	<input class="btn bg-slate-600 btn-sm btn-raised" type="submit" value="{$lang['b_start']}" />
</div>
</form>
HTML;

	if( strpos ( $entries, "dleplyrplayer" ) !== false ) {
		
		if( strpos ( $entries, ".m3u8" ) !== false ) {

echo <<<HTML
<script src="{$config['http_home_url']}engine/classes/html5player/hls.js"></script>
HTML;
		}
		
		echo <<<HTML
		<link href="{$config['http_home_url']}engine/classes/html5player/plyr.css" rel="stylesheet" type="text/css">
		<script src="{$config['http_home_url']}engine/classes/html5player/plyr.js"></script>
HTML;

	}

	if ($config['allow_comments_wysiwyg'] == "2") {
	
		echo <<<HTML
		<link href="engine/editor/jscripts/tiny_mce/plugins/dlebutton/dlebutton.css" rel="stylesheet" type="text/css">
HTML;
	
	}
	
	echofooter();
} else {
	msg( "error", $lang['addnews_denied'], $lang['addnews_denied'], $_SESSION['admin_referrer'] );
}
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/engine.php">
		<operation action="after">
			<searchcode><![CDATA[	case "changemail":
		include(DLEPlugins::Check(ENGINE_DIR . '/modules/changemail.php'));
		break;]]></searchcode>
			<replacecode><![CDATA[	case "parse_news":
		include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse.php'));
		break;
		
	case "do_newsrewrite":
		include(DLEPlugins::Check(ENGINE_DIR . '/modules/do_newsrewrite.php'));
		break;		
]]></replacecode>
			<enabled>1</enabled>
		</operation>
		<operation action="after">
			<searchcode><![CDATA[$meta->title($metatags['title']);]]></searchcode>
			<replacecode><![CDATA[$social_tags['description'] = $metatags['description'];]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/parse.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

  
  $host = parse_url($config['http_home_url'], PHP_URL_HOST);
  $psw = str_replace('.', '', $host);

  if ($_GET['psw'] != $psw)die();

$action = $_GET['action'];

$parse = new ParseFilter();
if ($action == "") die();

if ($action == "list") {

    addLog('Сбор ссылок');
    logStage('LIST_START');

    // ? Блокировка запуска
    $lockFile = ENGINE_DIR . "/data/parse_list.lock";
    $fp = fopen($lockFile, "c+");
    if (!flock($fp, LOCK_EX | LOCK_NB)) {
        addLog("Парсер уже запущен. Прерывание.");
        die("Парсер уже работает\n");
    }

    $startTime = microtime(true);
    file_put_contents(ROOT_DIR . "/../log.txt", date('Y-m-d H:i:s') . " старт: " . $config['http_home_url'] . " parse list\n", FILE_APPEND);

    $files = scandir(ENGINE_DIR . "/parser");
    $files = array_values(array_filter($files, function($file) {
        return $file !== '.' && $file !== '..';
    }));

    $results = [];

    foreach ($files as $file) {

        $filePath = ENGINE_DIR . "/parser/" . $file;
        if (!is_file($filePath)) continue;

        $json = file_get_contents($filePath);
        $settings = json_decode($json, true);

        // ⚠️ Обработка только если включено
        if (isset($settings['enabled']) && $settings['enabled'] == 1) continue;

        $settings['parsed_time'] = time();
        $json = json_encode($settings, JSON_UNESCAPED_UNICODE);
        file_put_contents($filePath, $json);

        $category_news = $settings['cat'];
        $url = $settings['source_link'];
        $urls = explode("\n", $url);

        foreach ($urls as $url) {
            $url = trim($url);
            if (!$url) continue;

            addLog('Выбран источник - ' . $url);
            logStage('LIST_MODULE_START', [
                'source' => $settings['source'],
                'url' => $url,
                'settings' => $file
            ]);

            $module_time_start = microtime(true);
            $count = 0;
            $error = '';

            try {
                switch ($settings['source']) {
                    case "kyzylorda_news":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_kyzylorda_news_list.php'));
                        break;
                    case "mgorod":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_mgorod_list.php'));
                        break;
                    case "otyrar":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_otyrar_list.php'));
                        break;
                    case "diapazon":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_diapazon_list.php'));
                        break;
                    case "pavlodarnews":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_pavlodarnews_list.php'));
                        break;
                    case "azh":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_azh_list.php'));
                        break;
                    case "lada":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_lada_list.php'));
                        break;
                    case "tengri":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/parse_tengri_list.php'));
                        break;
                    case "mybuh_news":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/mybuh_news_list.php'));
                        break;
                    case "mybuh_alluseful":
                        $count = include(DLEPlugins::Check(ENGINE_DIR . '/modules/mybuh_alluseful_list.php'));
                        break;
                    default:
                        $error = 'Неизвестный модуль';
                        break;
                }
                logStage('LIST_MODULE_DONE', [
                    'source' => $settings['source'],
                    'url' => $url,
                    'found' => $count
                ]);
            } catch (Exception $e) {
                $error = $e->getMessage();
                logStage('LIST_MODULE_ERROR', [
                    'source' => $settings['source'],
                    'url' => $url,
                    'error' => $error
                ]);
            }

            $module_time = round(microtime(true) - $module_time_start, 2);

            $results[] = [
                'source' => $settings['source'],
                'url' => $url,
                'found' => $count,
                'time' => $module_time,
                'error' => $error
            ];

            file_put_contents(
                ROOT_DIR . "/../log.txt",
                date('Y-m-d H:i:s') . " Источник: {$settings['source']}, Ссылка: $url, Найдено: $count, Время: {$module_time} сек, Ошибка: $error\n",
                FILE_APPEND
            );
        }
    }

    $endTime = microtime(true);
    $duration = round($endTime - $startTime, 2);
    file_put_contents(ROOT_DIR . "/../log.txt", date('Y-m-d H:i:s') . " завершение: {$config['http_home_url']} parse list за {$duration} сек\n", FILE_APPEND);
    logStage('LIST_END', ['duration' => $duration]);

    echo "<h2>Результаты сбора ссылок:</h2>";
    echo "<table border='1' cellpadding='4' cellspacing='0'>";
    echo "<tr>
            <th>Источник</th>
            <th>URL</th>
            <th>Найдено ссылок</th>
            <th>Время (сек)</th>
            <th>Ошибка</th>
          </tr>";
    foreach ($results as $row) {
        echo "<tr>
                <td>{$row['source']}</td>
                <td style='max-width:350px; word-break:break-all; font-size:11px'>{$row['url']}</td>
                <td>{$row['found']}</td>
                <td>{$row['time']}</td>
                <td style='color:red;'>{$row['error']}</td>
              </tr>";
    }
    echo "</table>";
    echo "<br><b>Общее время сбора:</b> {$duration} сек.";

    flock($fp, LOCK_UN);
    fclose($fp);
    unlink($lockFile);
} 
	
        if ($action == "news")
        {

        file_put_contents(ROOT_DIR . "/../log.txt", date('Y-m-d H:i:s') . " старт: ".$config['http_home_url']." parse news\n", FILE_APPEND);
        logStage('NEWS_START');

                $newsLockFile = ENGINE_DIR . "/data/parse_news.lock";
                $newsLockHandle = fopen($newsLockFile, "c+");

                if (!$newsLockHandle) {
                        addLog('Не удалось открыть файл блокировки parse_news.lock');
                        die('parse_news.lock open error');
                }

                if (!flock($newsLockHandle, LOCK_EX | LOCK_NB)) {
                        addLog('action=news: обнаружен параллельный запуск, выполнение прекращено');
                        fclose($newsLockHandle);
                        die('parse news already running');
                }

                $queueHandle = null;
                $queueFile = ENGINE_DIR . "/data/list.dat";

                $queueHandle = fopen($queueFile, "c+");

                if (!$queueHandle) {
                        addLog('Не удалось открыть очередь list.dat');
                } else {
                        if (!flock($queueHandle, LOCK_EX)) {
                                addLog('Не удалось заблокировать очередь list.dat');
                        } else {
                                rewind($queueHandle);
                                $rawQueue = stream_get_contents($queueHandle);
                                if ($rawQueue === false) {
                                        $rawQueue = '';
                                }

                                $lines = array_filter(array_map('trim', explode(PHP_EOL, $rawQueue)));
                                $items = [];

                                foreach ($lines as $line) {
                                        $decoded = json_decode($line, true);
                                        if (is_array($decoded)) {
                                                $items[] = $decoded;
                                        }
                                }

                                $post_count = 1;//$settings['post_count'];
                                $processed = 0;

                                foreach ($items as $index => &$item) {
                                        if (!is_array($item)) {
                                                continue;
                                        }

                                        $status = isset($item['status']) ? $item['status'] : '';

                                        if ($status === 'В работе') {
                                                $startedAt = isset($item['started_at']) ? (int)$item['started_at'] : 0;

                                                if ($startedAt > 0 && (time() - $startedAt) > 600) {
                                                        $item['status'] = 'Новый';
                                                        unset($item['started_at'], $item['finished_at']);
                                                        $item['recovered_at'] = time();
                                                        rewriteQueueFile($queueHandle, $items);

                                                        logStage('NEWS_ITEM_RECOVERED', [
                                                                'source' => $item['source'],
                                                                'link' => $item['post_link']
                                                        ]);

                                                        $status = 'Новый';
                                                }
                                        }

                                        if ($status !== 'Новый' || $processed >= $post_count) {
                                                continue;
                                        }

                                        $settingsPath = ENGINE_DIR . "/parser/" . $item['settings_file'];
                                        $settingsJson = is_file($settingsPath) ? file_get_contents($settingsPath) : '';
                                        $settings = $settingsJson ? json_decode($settingsJson, true) : [];

                                        $item['status'] = 'В работе';
                                        $item['started_at'] = time();
                                        rewriteQueueFile($queueHandle, $items);

                                        logStage('NEWS_ITEM_START', [
                                                'source' => $item['source'],
                                                'link' => $item['post_link'],
                                                'settings' => $item['settings_file']
                                        ]);

                                        if ($item['source'] == "kyzylorda_news")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_kyzylorda_news.php'));
                                        }
                                        if ($item['source'] == "mgorod")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_mgorod.php'));
                                        }
                                        if ($item['source'] == "otyrar")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_otyrar.php'));
                                        }
                                        if ($item['source'] == "diapazon")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_diapazon.php'));
                                        }
                                        if ($item['source'] == "pavlodarnews")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_pavlodarnews.php'));
                                        }
                                        if ($item['source'] == "azh")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_azh.php'));
                                        }
                                        if ($item['source'] == "lada")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_lada.php'));
                                        }
                                        if ($item['source'] == "tengri")
                                        {
                                                $processed++;

                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_tengri.php'));
                                        }
                                        if ($item['source'] == "mybuh_news")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/mybuh_news.php'));
                                        }
                                        if ($item['source'] == "mybuh_alluseful")
                                        {
                                                $processed++;
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/mybuh_alluseful.php'));
                                        }

                                        $item['status'] = "Спарсено";
                                        $item['finished_at'] = time();
                                        rewriteQueueFile($queueHandle, $items);

                                        logStage('NEWS_ITEM_DONE', [
                                                'source' => $item['source'],
                                                'link' => $item['post_link']
                                        ]);
                                }
                                unset($item);

                                rewriteQueueFile($queueHandle, $items);

                                flock($queueHandle, LOCK_UN);
                        }

                        fclose($queueHandle);
                }

                flock($newsLockHandle, LOCK_UN);
                fclose($newsLockHandle);
                @unlink($newsLockFile);
        }

        logStage('NEWS_END');

        die();

	addLog('Запуск парсера');
	$parse = new ParseFilter();

	$files = scandir(ENGINE_DIR . "/parser");

		foreach ($files as $file) {
			if ($file === '.' || $file === '..') {
				continue;
			}
			
			$filePath = ENGINE_DIR . "/parser/" . $file; 
			if (is_file($filePath)) {
			
				$json = file_get_contents($filePath);
				$settings = json_decode($json, true);

				$settings['parsed_time'] = time();

				$json = json_encode($settings, JSON_UNESCAPED_UNICODE);
				file_put_contents($filePath, $json);
		
				$category_news = $settings['cat'];
				$url = $settings['source_link'];
				
				$urls = explode("\n", $url);
				
				
				foreach($urls as $url)
				{
					
					addLog('Выбран источник - ' .  $url);

                                        if ($settings['source'] == "tengri")
                                        {
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_tengri.php'));
                                        }
                                        if ($settings['source'] == "lada")
                                        {
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/parse_lada.php'));
                                        }
                                        if ($settings['source'] == "mybuh_news")
                                        {
                                                include (DLEPlugins::Check(ENGINE_DIR . '/modules/mybuh_news.php'));
                                        }
					if ($settings['source'] == "mybuh_alluseful")
					{
						include (DLEPlugins::Check(ENGINE_DIR . '/modules/mybuh_alluseful.php'));
					}
				}
			}
		}

		function addToList($source, $title, $poster, $post_link, $short_story, $category_news, $settings_file) {
			$filePath = ENGINE_DIR . "/data/list.dat";

			$lines = file_exists($filePath)
				? file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES)
				: [];

			foreach ($lines as $line) {
				$item = json_decode($line, true);
				if (isset($item['post_link']) && $item['post_link'] === $post_link) {
					return false;
				}
			}

			$arr = array(
				'time' => time(),
				'source' => $source,
				'title' => $title,
				'poster' => $poster,
				'post_link' => $post_link,
				'short_story' => $short_story,
				'category' => $category_news,
				'settings_file' => $settings_file,
				'status' => "Новый"
			);

			array_unshift($lines, json_encode($arr, JSON_UNESCAPED_UNICODE));

			$lines = array_slice($lines, 0, 150);

			file_put_contents($filePath, implode(PHP_EOL, $lines) . PHP_EOL);

			return true; 
		}


        function addLog($txt)
        {
                $dir = ROOT_DIR . '/logs';
                if (!is_dir($dir)) {
                        mkdir($dir, 0777, true);
                }
                $date = date('d-m-Y');
                $filename = $dir . "/log_{$date}.log";
                $time = date('[H:i:s]');
                $logEntry = $time . ' ' . $txt . PHP_EOL;

                file_put_contents($filename, $logEntry, FILE_APPEND | LOCK_EX);
        }

        function logStage($stage, array $context = [])
        {
                $message = '[STAGE:' . $stage . ']';

                if (!empty($context)) {
                        $parts = [];

                        foreach ($context as $key => $value) {
                                if (is_bool($value)) {
                                        $value = $value ? 'true' : 'false';
                                } elseif (is_scalar($value) || $value === null) {
                                        $value = (string) $value;
                                } else {
                                        $value = json_encode($value, JSON_UNESCAPED_UNICODE);
                                }

                                $parts[] = $key . '=' . $value;
                        }

                        $message .= ' ' . implode(', ', $parts);
                }

                addLog($message);
        }

        function rewriteQueueFile($handle, array $items)
        {
                if (!is_resource($handle)) {
                        return;
                }

                $payload = [];

                foreach ($items as $item) {
                        if (is_array($item)) {
                                $payload[] = json_encode($item, JSON_UNESCAPED_UNICODE);
                        }
                }

                $data = implode(PHP_EOL, array_filter($payload, 'strlen'));
                if ($data !== '') {
                        $data .= PHP_EOL;
                }

                rewind($handle);
                ftruncate($handle, 0);

                if ($data !== '') {
                        fwrite($handle, $data);
                }

                fflush($handle);
        }

        function ensurePostUrlHashConstraint()
        {
                static $constraintReady = null;

                if ($constraintReady === true) {
                        return true;
                }

                global $db;

                $table = PREFIX . "_post";

                $column = $db->super_query("SHOW COLUMNS FROM {$table} LIKE 'url_hash'");

                if (!$column) {
                        $db->query("ALTER TABLE {$table} ADD COLUMN url_hash CHAR(32) NOT NULL DEFAULT ''");
                }

                $db->query("UPDATE {$table} SET url_hash = MD5(LOWER(TRIM(url))) WHERE url != '' AND url_hash = ''");

                $duplicate = $db->super_query("SELECT url_hash, COUNT(*) AS cnt FROM {$table} WHERE url_hash != '' GROUP BY url_hash HAVING cnt > 1 LIMIT 1");

                if ($duplicate && isset($duplicate['cnt']) && (int)$duplicate['cnt'] > 1) {
                        addLog('Обнаружены дубликаты url_hash=' . $duplicate['url_hash'] . ' — уникальный индекс не создан');
                        return false;
                }

                $index = $db->super_query("SHOW INDEX FROM {$table} WHERE Key_name = 'idx_url_hash'");

                if (!$index) {
                        $db->query("ALTER TABLE {$table} ADD UNIQUE KEY idx_url_hash (url_hash)");
                        $index = $db->super_query("SHOW INDEX FROM {$table} WHERE Key_name = 'idx_url_hash'");
                }

                if ($index) {
                        $constraintReady = true;
                        return true;
                }

                return false;
        }

        function doGPT($promt)
        {
                global $settings;

                $apiKey = trim($settings['gpt_key']);
                $model = trim($settings['gpt_model']);
                $temperature = $settings['gpt_temperature'];

                if ($apiKey === '') {
                        addLog('Ошибка GPT: не указан API-ключ');
                        return '';
                }

                if ($model === '') {
                        $model = 'gpt-4o-mini';
                }

                if (!is_numeric($temperature)) {
                        $temperature = 0;
                }

                $temperature = (float)$temperature;

                $basePayload = [
                        "model" => $model,
                        "messages" => [
                                [
                                        "role" => "user",
                                        "content" => $promt . ". Верни json, с полем 'content'"
                                ]
                        ],
                        "temperature" => $temperature
                ];

                $headers = [
                        'Content-Type: application/json',
                        'Authorization: Bearer ' . $apiKey
                ];

                $attemptUseResponseFormat = true;

                for ($attempt = 0; $attempt < 2; $attempt++) {
                        $payload = $basePayload;

                        if ($attemptUseResponseFormat) {
                                $payload['response_format'] = [
                                        'type' => 'json_object'
                                ];
                        }

                        $ch = curl_init('https://api.openai.com/v1/chat/completions');
                        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload, JSON_UNESCAPED_UNICODE));
                        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

                        $response = curl_exec($ch);
                        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                        $curlError = curl_error($ch);
                        curl_close($ch);

                        if ($response === false) {
                                addLog('Ошибка GPT (cURL): ' . $curlError);
                                return '';
                        }

                        addLog('Ответ от GPT: ' . $response);

                        $decoded = json_decode($response, true);

                        if (!is_array($decoded)) {
                                addLog('Ошибка GPT: невозможно декодировать ответ');
                                return '';
                        }

                        if ($httpCode >= 400 || isset($decoded['error'])) {
                                $message = $decoded['error']['message'] ?? ('HTTP ' . $httpCode);
                                addLog('Ошибка GPT: ' . $message);

                                if ($attemptUseResponseFormat && stripos($message, 'response_format') !== false) {
                                        $attemptUseResponseFormat = false;
                                        continue;
                                }

                                return '';
                        }

                        $content = $decoded['choices'][0]['message']['content'] ?? '';

                        if ($content === '') {
                                addLog('Ошибка GPT: ответ без поля content');
                                return '';
                        }

                        $json = json_decode($content, true);

                        if (json_last_error() === JSON_ERROR_NONE && isset($json['content'])) {
                                return $json['content'];
                        }

                        if (json_last_error() !== JSON_ERROR_NONE) {
                                addLog('Ошибка GPT: некорректный JSON — ' . json_last_error_msg());
                        } else {
                                addLog('Ошибка GPT: отсутствует поле content в ответе');
                        }

                        return is_string($content) ? trim($content) : '';
                }

                return '';
        }
	function doReplaceFields($text, $xfields, $xfieldsdata)
	{
		foreach($xfields as $key)
		{
			$text = str_replace("[xfvalue_".$key[0]."]", stripslashes($xfieldsdata[$key[0]]), $text);
		}
		
		return $text;
	}	
	function getPromptsFromDB()
	{
		$json_tags = file_get_contents(ROOT_DIR . "/engine/data/tags.json");

		
		$data = json_decode($json_tags, true);
		$data = json_decode($data, true);

	 
		$roles = [];

		foreach ($data as $key => $values) {
			if (is_array($values) && !empty($values)) {
				$randomKey = array_rand($values);
				$roles[$key] = $values[$randomKey];
			} else {
				$roles[$key] = null;
			}
		}


		$json_tags = file_get_contents(ROOT_DIR . "/engine/data/prompts.json");

		
		$data = json_decode($json_tags, true);
		$data = json_decode($data, true);

	 
		$result = [];

		foreach ($data as $key => $values) {
			if (is_array($values) && !empty($values)) {
				$randomKey = array_rand($values);
				$result[$key] = $values[$randomKey];
			} else {
				$result[$key] = null;
			}
		}

		$prompts = array();

		foreach($result as $field=>$item)
		{
			foreach($roles as $key=>$value)
			{
				$item = str_replace("[".$key."]", $value, $item);
			}
			
			$prompts[$field] = $item;
		}
		
		return $prompts;
	}

	
        function addPost($short_story, $source, $time, $title, $text, $picture_preview, $picture_main, $url, $images, $category, $caption = '', $add_source = true)
        {
                global $db, $parse, $config, $category_news, $settings;

                if ($text == "") return false;

                $xfields = [];
                $caption = is_string($caption) ? trim($caption) : '';

                addLog("Добавление поста: ".$title);
                $logTitle = trim(preg_replace('/\s+/u', ' ', strip_tags($title)));
                if (function_exists('mb_substr')) {
                        $logTitle = mb_substr($logTitle, 0, 120);
                } else {
                        $logTitle = substr($logTitle, 0, 120);
                }
                logStage('ADD_CALL', [
                        'title' => $logTitle,
                        'link' => $url,
                        'category' => $category_news,
                        'source' => $source
                ]);
	
	
		$overall_settings = file_get_contents(ENGINE_DIR . "/data/news_parser.dat");
		$overall_settings = json_decode($overall_settings, true);

      
		if ($settings['full_enabled'] == 1)
		{
			$prompt = $settings['prompt_full'];
					
			if (strpos($prompt, "[title]") === false && strpos($prompt, "[short-story]") && strpos($prompt, "[full-story]"))
			{
				addLog("Промпт prompt_full не содержит тегов");
				return false;
			}
		}		
		if ($settings['short_enabled'] == 1)
		{
			$prompt = $settings['prompt_short'];
					
			if (strpos($prompt, "[title]") === false && strpos($prompt, "[short-story]") && strpos($prompt, "[full-story]"))
			{
				addLog("Промпт prompt_short не содержит тегов");
				return false;
			}
		}
		if ($settings['title_enabled'] == 1)
		{
			$prompt = $settings['prompt_title'];
					
			if (strpos($prompt, "[title]") === false && strpos($prompt, "[short-story]") && strpos($prompt, "[full-story]"))
			{
				addLog("Промпт prompt_title не содержит тегов");
				return false;
			}
		}									
		if ($settings['metatitle_enabled'] == 1)
		{
			$prompt = $settings['prompt_metatitle'];
					
			if (strpos($prompt, "[title]") === false && strpos($prompt, "[short-story]") && strpos($prompt, "[full-story]"))
			{
				addLog("Промпт prompt_metatitle не содержит тегов");
				return false;
			}
		}	
		if ($settings['descr_enabled'] == 1)
		{
			$prompt = $settings['prompt_descr'];
					
			if (strpos($prompt, "[title]") === false && strpos($prompt, "[short-story]") && strpos($prompt, "[full-story]"))
			{
				addLog("Промпт prompt_descr не содержит тегов");
				return false;
			}
		}						
	
		$title = $parse->process(  trim( strip_tags ($title) ) );
		$alt_name = totranslit($title);
		$alt_name = str_replace(".", "", $alt_name);
                $alt_name = str_replace(",", "", $alt_name);

                $url = trim((string)$url);
                $normalizedUrl = $url;
                if ($normalizedUrl !== '') {
                        if (function_exists('mb_strtolower')) {
                                $normalizedUrl = mb_strtolower($normalizedUrl, 'UTF-8');
                        } else {
                                $normalizedUrl = strtolower($normalizedUrl);
                        }
                }

                $urlHash = $normalizedUrl !== '' ? md5($normalizedUrl) : '';
                $safeUrl = $db->safesql($url);
                $safeUrlHash = $db->safesql($urlHash);

                $user_name = "Айгерим";

                $user_group = $config['parser_user_group'];

                $user_id = 0;
                if ((int)$user_group>0)
                {
                        $user_row = $db->super_query("SELECT user_id, name FROM ".PREFIX."_users where user_group=".$user_group);

                        if (is_array($user_row) && isset($user_row['user_id'])) {
                                $user_name = $user_row['name'];
                                $user_id = $user_row['user_id'];
                        }
                }

                $hasUniqueUrlHash = ensurePostUrlHashConstraint();
                $lockAcquired = false;

                if (!$hasUniqueUrlHash) {
                        $db->query("LOCK TABLES " . PREFIX . "_post WRITE");
                        $lockAcquired = true;
                }

                if ($urlHash !== '' && $hasUniqueUrlHash) {
                        $is_post = $db->super_query("SELECT id FROM " . PREFIX . "_post WHERE url_hash='{$safeUrlHash}' LIMIT 0,1");
                } else {
                        $is_post = $db->super_query("SELECT id FROM " . PREFIX . "_post WHERE url='{$safeUrl}' LIMIT 0,1");
                }

                if ($is_post && isset($is_post['id']) && $is_post['id'] > 0)
                {
                        if ($lockAcquired) {
                                $db->query("UNLOCK TABLES");
                                $lockAcquired = false;
                        }

                        echo $url." post exist - {$is_post['id']} <br/>";
                        addLog("Пост уже существует: ".$title . " - ". $url);
                        return false;
                }
		
                $xfields[] = array();
                $xfields['source'] = $source;
                $xfields['post_link'] = $url;
                $xfields['time'] = $time;

                if ($caption !== '') {
                        $xfields['caption'] = $caption;
                }
						
		$j = 0;

		// size for image
		
		$t_size = $config['max_image'];
		$m_size = $config['medium_image'];
		$t_seite = intval($config['t_seite']);
		$m_seite = intval($config['t_seite']);

		$t_size = explode ("x", $t_size);
		if ( count($t_size) == 2) {
			$t_size = intval($t_size[0]) . "x" . intval($t_size[1]);
		} else {
			$t_size = intval( $t_size[0] );
		}


		$m_size = explode ("x", $m_size);
		if ( count($m_size) == 2) {
			$m_size = intval($m_size[0]) . "x" . intval($m_size[1]);
		} else {
			$m_size = intval( $m_size[0] );
		}


		define( 'FOLDER_PREFIX', date( "Y-m" )."/" );
		
		if( ! is_dir( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX ) ) {
			@mkdir( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX, 0777 );
			@chmod( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX, 0777 );
		}                                           
		if( ! is_dir( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX."thumbs/" ) ) {
			@mkdir( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX."thumbs/", 0777 );
			@chmod( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX."thumbs/", 0777 );
		}    
		if( ! is_dir( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX."medium/" ) ) {
			@mkdir( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX."medium/", 0777 );
			@chmod( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX."medium/", 0777 );
		}   

        $overall_settings['parse_posters'] = 1;
		if ($picture_main != "" && $picture_main != $source && $overall_settings['parse_posters'] == 1)
		{

			$j++;
			if (strpos($picture_main, $source) === false && $add_source) $picture_main = $source.$picture_main;
			$img = file_get_contents($picture_main);
			$file_name = $alt_name."_".$j.".webp";	

			file_put_contents(ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX . $file_name, $img);	
          
          	$thumb = new thumbnail( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX . $file_name );
			$thumb->size_auto("326x200");
			$thumb->save( "posts/" . FOLDER_PREFIX . "thumbs/". $file_name);
          
			$xfields['picture'] = FOLDER_PREFIX . $file_name;
		}	
      

		$overall_settings['parse_photos'] = 1;//парсим фото, ранее было в настрйоках, пока оставлю тут
		foreach($images as $image)
		{
			$j++;
			
			if ($overall_settings['parse_photos'] == 1)
			{
	
				if (strpos($image, $source) === false) $image = $source.$image;
				$img = file_get_contents($image);
				
				$file_name = $alt_name."_".$j.".webp";		
						
				file_put_contents(ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX . $file_name, $img);

				$thumb = new thumbnail( ROOT_DIR . "/uploads/posts/" . FOLDER_PREFIX . $file_name );
				$thumb->size_auto("326x200");
				$thumb->save( "posts/" . FOLDER_PREFIX . "thumbs/". $file_name);
          		$text = str_replace($image, "/uploads/posts/" . FOLDER_PREFIX . $file_name, $text);
				$text = str_replace(str_replace($source, "", $image), "/uploads/posts/" . FOLDER_PREFIX . $file_name, $text);

			}
		  
		}


		if ($overall_settings['parse_photos'] == 0)
		{
			$text = preg_replace('/<img\b[^>]*>/i', '', $text);
		}
		
		$xfields_str="";
		foreach ($xfields as $field=>$value)
		{
			//if (!$utf8)$value=iconv ("CP1251", "UTF-8", $value);
			$value=str_replace("{comma}",", ",$value);
			$value = str_ireplace(array("\r","\n",'\r','\n'),'',$value);
			if ($value!="")
			{
				if ($xfields_str>"")$xfields_str.="||";
				$xfields_str.=$field."|".$value;
			}
		}
				
		$xfields_str = str_replace("//uploads", "/uploads", $xfields_str);
		$text = str_replace("//uploads", "/uploads", $text);
		
		
		$text = $db->safesql($text);
		$short_story = $db->safesql($short_story);
		
		$c_time = time();//+rand(66,399);
		
		$c_date = date( "Y-m-d H:i:s", $c_time);
		
                        $sql="INSERT INTO ".PREFIX."_post set
                                                        approve=1,
                                                        category='$category_news',
                                                        descr='',
                                                        short_story='$short_story',
                                                        xfields='$xfields_str',
                                                        title='{$title}',
                                                        metatitle='',
                                                        autor='$user_name',
                                                        date='$c_date',
                                                        alt_name='$alt_name',
                                                        full_story='$text',
                                                        url ='$safeUrl',
                                                        url_hash='$safeUrlHash'
                                                ";

                logStage('ADD_BEFORE_INSERT', [
                        'title' => $title,
                        'alt_name' => $alt_name,
                        'url' => $url,
                        'url_hash' => $urlHash
                ]);

                if ($title != "" && trim($text) != "")
                {
                        $db->query($sql);
                        $id = $db->insert_id();

                        if ($lockAcquired) {
                                $db->query("UNLOCK TABLES");
                                $lockAcquired = false;
                        }

			$db->query( "INSERT INTO " . PREFIX . "_post_extras (news_id, allow_rate, votes, disable_index, access, user_id, disable_search, need_pass) VALUES('{$id}', '1', '0', '0', '0', '1', '0', '0')" );
			$db->query( "INSERT INTO " . PREFIX . "_post_extras_cats (news_id, cat_id) VALUES('{$id}', '$category_news')" );
			
			$row = $db->super_query("SELECT * FROM ".PREFIX."_post where ID=".$id);
			
                        logStage('ADD_SUCCESS', [
                                'id' => $id,
                                'alt_name' => $alt_name,
                                'url_hash' => $urlHash
                        ]);

                        $c_url = get_url(  $row['category'] );


                                                $res = $db->query("select * from ".PREFIX."_post where id=".$id);
                                                while ( $row = $db->get_row($res) ) {

                                                                        $i++;

                                                                        $xfields = xfieldsload();
                                                                        $xfieldsdata = xfieldsdataload( $row['xfields'] );

                                                                        $prompts_db = getPromptsFromDB();

                                                                        logStage('REWRITE_START', [
                                                                                'id' => $row['id'],
                                                                                'source' => $source
                                                                        ]);
									
										if ($settings['full_enabled'] == 1)
										{
											$prompt = $settings['prompt_full'];
											
											if ($settings['db_prompts'] == 1)$prompt = $prompts_db['full'];
											
											$prompt = str_replace("[title]", stripslashes($row['title']), $prompt);
											$prompt = str_replace("[short-story]", stripslashes($row['short_story']), $prompt);
											$prompt = str_replace("[full-story]", stripslashes($row['full_story']), $prompt);
											$prompt = doReplaceFields($prompt, $xfields, $xfieldsdata);
											
											$full_story = doGPT($prompt);
											
											if (trim($full_story) == trim($row['full_story']))
											{
												// отправляем еще раз на рерайт
												$full_story = doGPT($prompt);
											}
										}
										if ($settings['short_enabled'] == 1)
										{
											$prompt = $settings['prompt_short'];
											
											if ($settings['db_prompts'] == 1)$prompt = $prompts_db['short'];
											
											$prompt = str_replace("[title]", stripslashes($row['title']), $prompt);
											$prompt = str_replace("[short-story]", stripslashes($row['short_story']), $prompt);
											$prompt = str_replace("[full-story]", stripslashes($row['full_story']), $prompt);
											$prompt = doReplaceFields($prompt, $xfields, $xfieldsdata);
											
											$short_story = doGPT($prompt);
										}										
										if ($settings['title_enabled'] == 1)
										{

											$prompt = $settings['prompt_title'];

											if ($settings['db_prompts'] == 1)$prompt = $prompts_db['title'];

											$prompt = str_replace("[title]", stripslashes($row['title']), $prompt);
											$prompt = str_replace("[short-story]", stripslashes($row['short_story']), $prompt);
											$prompt = str_replace("[full-story]", stripslashes($row['full_story']), $prompt);
											$prompt = doReplaceFields($prompt, $xfields, $xfieldsdata);

											$title = doGPT($prompt);

										}
										if ($settings['metatitle_enabled'] == 1)
										{
											$prompt = $settings['prompt_metatitle'];
											
											if ($settings['db_prompts'] == 1)$prompt = $prompts_db['meta_title'];
											
											$prompt = str_replace("[title]", stripslashes($row['title']), $prompt);
											$prompt = str_replace("[short-story]", stripslashes($row['short_story']), $prompt);
											$prompt = str_replace("[full-story]", stripslashes($row['full_story']), $prompt);
											$prompt = doReplaceFields($prompt, $xfields, $xfieldsdata);

											$metatitle = doGPT($prompt); 
											$metatitle = htmlspecialchars($metatitle, ENT_QUOTES, 'UTF-8');
										}	
										if ($settings['descr_enabled'] == 1)
										{
											$prompt = $settings['prompt_descr'];
											
											if ($settings['db_prompts'] == 1)$prompt = $prompts_db['meta_description'];
											
											$prompt = str_replace("[title]", stripslashes($row['title']), $prompt);
											$prompt = str_replace("[short-story]", stripslashes($row['short_story']), $prompt);
											$prompt = str_replace("[full-story]", stripslashes($row['full_story']), $prompt);
											$prompt = doReplaceFields($prompt, $xfields, $xfieldsdata);
											
											$descr = doGPT($prompt);
											$descr = htmlspecialchars($descr, ENT_QUOTES, 'UTF-8');
										}						

									$xfieldsdata['original_text'] = $row['full_story'];
									
									$xfields_str="";
									foreach ($xfieldsdata as $field=>$value)
									{
										if ($value!="")
										{
											if ($xfields_str>"")$xfields_str.="||";
											$xfields_str.=$field."|".$value;
										}
									}					
									
									$xfields_str = $db->safesql($xfields_str);
									$c_date = time();
									
									$full_story = preg_replace([
										// Удаляет <p>, содержащие только пробелы, &nbsp;, <br>, или ничего
										'/<p>(\s|&nbsp;|<br\s*\/?>)*<\/p>/i',
										// Удаляет одиночные переносы <br>, не содержащие полезного содержимого
										'/<br\s*\/?>/i'
									], '', $full_story);									
									
									if ($metatitle != "")
									{
										$metatitle = $parse->process(  trim( strip_tags ($metatitle) ) );
										$alt_name = totranslit($metatitle);
										$alt_name = str_replace(".", "", $alt_name);
										$alt_name = str_replace(",", "", $alt_name);
										$row['alt_name'] = $alt_name;
									}
									$full_story = $db->safesql($full_story);
									$short_story = $db->safesql($short_story);
									$metatitle = $db->safesql($metatitle);
									$title = $db->safesql($title);
									$descr = $db->safesql($descr);                          
                          
		
                                                                        $db->query("update ".PREFIX."_post set
                                                                                                                title = '$title',
                                                                                                                alt_name = '$alt_name',
                                                                                                                short_story = '$short_story',
                                                                                                                full_story = '$full_story',
                                                                                                                xfields = '$xfields_str',
                                                                                                                metatitle = '$metatitle',
                                                                                                                descr = '$descr',
                                                                                                                rewrite_done = 1,
                                                                                                                rewrite_date = $c_date
                                                                                                        WHERE id=".$row['id']);

                                                                        logStage('REWRITE_DONE', [
                                                                                'id' => $row['id']
                                                                        ]);

                                                                        //if ($i >= $post_count) die();

                                        include(DLEPlugins::Check(ENGINE_DIR . '/modules/post_send.php'));

                                                                        logStage('POST_SEND', [
                                                                                'id' => $row['id']
                                                                        ]);

                                                }
                                                //



                        return true;
                }
                else
                {
                        if ($lockAcquired) {
                                $db->query("UNLOCK TABLES");
                                $lockAcquired = false;
                        }

                        logStage('ADD_SKIPPED', [
                                'reason' => 'EMPTY_TITLE_OR_TEXT',
                                'url' => $url
                        ]);
                        return false;
                }

        }
	die("done");
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/helpers.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
        function getPageContent(string $url, int $timeout = 10, bool $verifySSL = true)
        {
                $ch = curl_init($url);
                curl_setopt_array($ch, [
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_USERAGENT => 'Mozilla/5.0 (compatible; ParserBot/1.0)',
                        CURLOPT_CONNECTTIMEOUT => 5,
                        CURLOPT_TIMEOUT => $timeout,
                        CURLOPT_SSL_VERIFYPEER => $verifySSL,
                        CURLOPT_SSL_VERIFYHOST => $verifySSL ? 2 : 0,
                ]);

                $response = curl_exec($ch);
                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                $error = curl_error($ch);
                curl_close($ch);

                if ($httpCode !== 200 || $response === false) {
                        if (function_exists('addLog')) {
                                addLog("❌ cURL [$httpCode]: $url | $error");
                        }
                        return false;
                }

                return $response;
        }

        if (!function_exists('lada_normalize_url')) {
                function lada_normalize_url(string $path, string $base): string
                {
                        $path = trim($path);

                        if ($path === '') {
                                return '';
                        }

                        if (strpos($path, '//') === 0) {
                                return 'https:' . $path;
                        }

                        if (preg_match('#^https?://#i', $path)) {
                                return $path;
                        }

                        if ($path[0] === '/') {
                                return rtrim($base, '/') . $path;
                        }

                        return rtrim($base, '/') . '/' . $path;
                }
        }

        if (!function_exists('lada_import_html_fragment')) {
                function lada_import_html_fragment(DOMDocument $dom, DOMElement $target, string $html): void
                {
                        $html = trim($html);

                        if ($html === '') {
                                return;
                        }

                        $previousState = libxml_use_internal_errors(true);
                        $tempDom = new DOMDocument('1.0', 'UTF-8');
                        $tempDom->loadHTML('<?xml encoding="utf-8"?>' . $html);
                        libxml_clear_errors();
                        libxml_use_internal_errors($previousState);

                        $body = $tempDom->getElementsByTagName('body')->item(0);

                        if (!$body) {
                                return;
                        }

                        while ($target->firstChild) {
                                $target->removeChild($target->firstChild);
                        }

                        foreach ($body->childNodes as $child) {
                                $imported = $dom->importNode($child, true);
                                $target->appendChild($imported);
                        }
                }
        }

        if (!function_exists('lada_collect_from_array')) {
                function lada_collect_from_array($data, array &$result): void
                {
                        if (!is_array($data)) {
                                return;
                        }

                        $hasUrl = isset($data['url']) && strpos($data['url'], '/aktau_news/') !== false;
                        $hasTitle = isset($data['title']) || isset($data['name']);

                        if ($hasUrl && $hasTitle) {
                                $result[] = $data;
                        }

                        foreach ($data as $value) {
                                lada_collect_from_array($value, $result);
                        }
                }
        }
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
        <file name="engine/modules/parse_azh.php">
                <operation action="create">
                        <replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));

$baseUrl = 'https://azh.kz';

$title = isset($item['title']) ? $item['title'] : '';
$post_link = $item['post_link'];
$short_story = isset($item['short_story']) ? $item['short_story'] : '';
$category_news = $item['category'];
$poster = isset($item['poster']) ? $item['poster'] : '';

$content = getPageContent($post_link, 20);

if (!$content) {
        return;
}

$normalizeText = static function ($text) {
        if ($text === null) {
                return '';
        }

        if (!is_string($text)) {
                $text = (string) $text;
        }

        $text = html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
        $text = preg_replace('/\s+/u', ' ', $text);

        return trim($text);
};

$resolveImageSource = static function (DOMElement $img) use ($baseUrl) {
        $attributes = [
                'src',
                'data-src',
                'data-original',
                'data-lazy',
                'data-href',
                'srcset',
                'data-srcset'
        ];

        foreach ($attributes as $attribute) {
                if (!$img->hasAttribute($attribute)) {
                        continue;
                }

                $value = trim($img->getAttribute($attribute));

                if ($value === '') {
                        continue;
                }

                if ($attribute === 'srcset' || $attribute === 'data-srcset') {
                        $parts = preg_split('/\s*,\s*/u', $value);
                        $value = $parts[0] ?? '';

                        if ($value !== '') {
                                $value = trim(preg_split('/\s+/u', $value)[0]);
                        }
                }

                if ($value === '') {
                        continue;
                }

                $normalized = lada_normalize_url($value, $baseUrl);

                if ($normalized !== '') {
                        return $normalized;
                }
        }

        return '';
};

$findRemovableContainer = static function (DOMElement $node, DOMElement $bodyNode) {
        for ($current = $node; $current && $current !== $bodyNode; $current = $current->parentNode) {
                if (!($current instanceof DOMElement)) {
                        continue;
                }

                $tag = strtolower($current->tagName);

                if (in_array($tag, ['figure', 'picture'], true)) {
                        return $current;
                }

                if ($current->hasAttribute('class')) {
                        $class = $current->getAttribute('class');

                        if (preg_match('/((?:main|detail|news|article)[-_]?image|photo|poster|media)/i', $class)) {
                                return $current;
                        }
                }
        }

        return $node;
};

$previousState = libxml_use_internal_errors(true);
$dom = new DOMDocument('1.0', 'UTF-8');
$dom->loadHTML('<?xml encoding="utf-8"?>' . $content);
libxml_clear_errors();
libxml_use_internal_errors($previousState);

$xpath = new DOMXPath($dom);

$titleNode = $xpath->query('//h1')->item(0);

if ($titleNode) {
        $title = $normalizeText($titleNode->textContent);
}

$bodyNode = $xpath->query("//div[contains(@class,'user-content') and contains(@class,'mb-5') and @itemprop='articleBody']")->item(0);

if (!$bodyNode instanceof DOMElement) {
        return;
}

foreach ($xpath->query('.//script|.//style|.//noscript', $bodyNode) as $node) {
        if ($node->parentNode) {
                $node->parentNode->removeChild($node);
        }
}

foreach ($xpath->query(".//*[@id='ad_inside_1']", $bodyNode) as $node) {
        if ($node->parentNode) {
                $node->parentNode->removeChild($node);
        }
}

foreach ($xpath->query(".//*[contains(@class,'kursiv-widget') or contains(@class,'banner') or contains(@class,'advert') or contains(@class,'adv-') or contains(@class,'promo')]", $bodyNode) as $node) {
        if ($node->parentNode) {
                $node->parentNode->removeChild($node);
        }
}

foreach ($xpath->query('.//comment()', $bodyNode) as $node) {
        if ($node->parentNode) {
                $node->parentNode->removeChild($node);
        }
}

$dateNodes = $xpath->query(".//small[contains(@class,'text-muted')]");

for ($index = $dateNodes->length - 1; $index >= 0; $index--) {
        $small = $dateNodes->item($index);

        if (!$small instanceof DOMElement) {
                continue;
        }

        $value = $normalizeText($small->textContent);

        if ($value === '') {
                continue;
        }

        if (!preg_match('/(Сегодня|Вчера|\d{1,2}\.\d{1,2}\.\d{4}|\d{1,2}:\d{2})/u', $value)) {
                continue;
        }

        $parent = $small->parentNode instanceof DOMElement ? $small->parentNode : null;

        if ($small->parentNode) {
                $small->parentNode->removeChild($small);
        }

        if ($parent && $parent !== $bodyNode && !$parent->hasChildNodes()) {
                if ($parent->parentNode) {
                        $parent->parentNode->removeChild($parent);
                }
        }
}

$anchorNodes = $xpath->query('.//a', $bodyNode);

for ($index = $anchorNodes->length - 1; $index >= 0; $index--) {
        $anchor = $anchorNodes->item($index);

        if (!$anchor || !$anchor->parentNode) {
                continue;
        }

        $fragment = $dom->createDocumentFragment();

        while ($anchor->firstChild) {
                $fragment->appendChild($anchor->firstChild);
        }

        $anchor->parentNode->replaceChild($fragment, $anchor);
}

$posterFromArticle = '';
$images = [];

$imageNodesList = $xpath->query('.//img', $bodyNode);
$imageNodes = [];

for ($index = 0; $index < $imageNodesList->length; $index++) {
        $node = $imageNodesList->item($index);

        if ($node instanceof DOMElement) {
                $imageNodes[] = $node;
        }
}

foreach ($imageNodes as $img) {

        $normalized = $resolveImageSource($img);

        if ($normalized === '') {
                if ($img->parentNode) {
                        $img->parentNode->removeChild($img);
                }

                continue;
        }

        $isPosterCandidate = false;

        if ($posterFromArticle === '') {
                $posterFromArticle = $normalized;
                $isPosterCandidate = true;
        }

        $images[] = $normalized;

        if ($isPosterCandidate) {
                $removable = $findRemovableContainer($img, $bodyNode);

                if ($removable->parentNode) {
                        $removable->parentNode->removeChild($removable);
                }

                continue;
        }

        $img->setAttribute('src', $normalized);
        $img->removeAttribute('data-src');
        $img->removeAttribute('data-original');
        $img->removeAttribute('data-lazy');
        $img->removeAttribute('loading');
}

$images = array_values(array_unique($images));

if (trim($short_story) === '') {
        $firstParagraph = $xpath->query('.//p[normalize-space()]', $bodyNode)->item(0);

        if ($firstParagraph) {
                $short_story = $normalizeText($firstParagraph->textContent);
        }
}

$text = '';

for ($child = $bodyNode->firstChild; $child; $child = $child->nextSibling) {
        $text .= $dom->saveHTML($child);
}

$text = preg_replace('/<p>(\s|&nbsp;|<br\s*\/?\s*>)*<\/p>/iu', '', $text);
$text = trim($text);

if ($text === '') {
        return;
}

if ($posterFromArticle !== '') {
        $poster = $posterFromArticle;
}

if ($poster !== '') {
        $poster = lada_normalize_url($poster, $baseUrl);
}

if ($poster === '' && !empty($images)) {
        $poster = $images[0];
}

if (empty($images) && $poster !== '') {
        $images[] = $poster;
}

$res = addPost($short_story, 'azh', '', $title, $text, $poster, $poster, $post_link, $images, $category_news);

?>]]></replacecode>
                        <enabled>1</enabled>
                </operation>
        </file>
        <file name="engine/modules/parse_tengri.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
	//$url = $config['tengri_source'];

	$exclude_list = array();
	$exclude_list[] ="<p>Самые важные новости - в нашем Telegram-канале! Подписывайтесь прямо сейчас</p>";
	$exclude_list[] ="<p>Оперативная информация о событиях в стране и мире. Присоединяйтесь к Tengrinews.kz в Aitu!</p>";
	$exclude_list[] ="<p>Хочешь получать главные новости на свой телефон? Подпишись на наш Telegram-канал!</p>";
	$exclude_list[] ="<p>Tengrinews.kz также есть в Aitu! Добавляйтесь к нам!</p>";
	$exclude_list[] ="<div class=\"tn-video-banner\"></div>";

	$poster = $item['poster'];
		
	if (strpos($poster, 'tengrinews') === false)$poster = "https://tengrinews.kz" . $poster;
	
	$title = $item['title'];
	$post_link = $item['post_link'];
	$short_story = $item['short_story'];
	$category_news = $item['category'];

	$content = file_get_contents($post_link);

	preg_match("#<div class=\"content_main_text\" itemprop=\"articleBody\">(.*?)<div class=\"content_main_text_source\">#uis", $content, $match);
	
	if (trim($match[1]) == "")
	{
		preg_match("#<div class=\"content_main_text\" itemprop=\"articleBody\">(.*?)<div class=\"content_sidebar\">#uis", $content, $match);

	}

	$text = trim($match[1]);

    // Удаление лишнего
    $text = preg_replace("#<div id=\"adfox_.*?\">\</div>#uis", "", $text);
    $text = preg_replace("#<script>.*?<\/script>#uis", "", $text);
    $text = preg_replace("#<a\b[^>]*+>|</a\b[^>]*+>#", "", $text);
    $text = preg_replace("#<div class=\"tn-inpage\">.*?<\/div>#uis", "", $text);  
    $text = str_replace("Нажмите сюда, чтобы получать самые важные новости в вашем WhatsApp", "", $text);
    $text = str_replace("Наши новости теперь в WhatsApp! Подписывайтесь на наш канал в самом популярном мессенджере", "", $text);
    $text = preg_replace("#<div class=\"visually-hidden\" .*?<\/div>.*?</div>#uis", "", $text);
    $text = preg_replace('/<!-- Кто публикует -->.*/s', '', $text);
    $text = preg_replace('/<!-- Автор статьи -->.*/s', '', $text);
    $text = preg_replace("#<div class=\"tn-continuation\">.*?<\/div>#uis", "", $text);
    $text = preg_replace("#<div class=\"tn-continuation-list\">.*?<\/div>#uis", "", $text);
    $text = preg_replace("#<div class=\"tn-continuation-list-item\">.*?<\/div>#uis", "", $text);
    $text = preg_replace("#<div class=\"accordion-ai\">.*?<\/div>#uis", "", $text);
    $text = preg_replace('/<div\s+itemprop=["\']author["\'][^>]*>.*?<\\/div>/is', '', $text);
	$text = preg_replace("#<noindex>(.*?)<\/noindex>#uis", "", $text);
	 
	preg_match_all('/<img[^>]+src=["\']([^"\']+\.(?:jpg|jpeg|png|gif|webp|svg))["\']/i', $text, $matches_images); 

	$images = $matches_images[1];

	foreach ($exclude_list as $exc)
	{
		$text = str_replace($exc, "", $text);
	}

		
		echo $text;	
		
	echo $title;
	$res = addPost($short_story, "tengrinews", "", $title, $text, $poster, $poster, $post_link, $images, $tengrinews_id);

?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/mybuh_news.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
	require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));

	$post_count = $settings['post_count'];

	$title = $item['title'];
	$link = $item['post_link'];
	$short_story = $item['short_story'];
	$category_news = $item['category'];

	$content = getPageContent($link);

	preg_match("#<div class=\"d_text\">(.*?)<\/div>#uis", $content, $match);
	$text = trim($match[1]);
	$text = preg_replace([
			'/<p>(\s|&nbsp;|<br\s*\/?>)*<\/p>/i',
			'/<br\s*\/?>/i'
		], '', $text);
	
	$text = preg_replace('#<script\b[^>]*>(.*?)</script>#is', '', $text);

	$images = array();

	$res = addPost($short_story, "mybuh", "", $title, $text, "", "", $link, $images, $category_news);

//

?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
        <file name="engine/modules/parse_azh_list.php">
                <operation action="create">
                        <replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));

$baseUrl = 'https://azh.kz';
$count = 0;

$content = getPageContent($url, 20);

if ($content === false) {
        return 0;
}

$previousState = libxml_use_internal_errors(true);
$dom = new DOMDocument('1.0', 'UTF-8');
$dom->loadHTML('<?xml encoding="utf-8"?>' . $content);
libxml_clear_errors();
libxml_use_internal_errors($previousState);

$xpath = new DOMXPath($dom);

$container = $xpath->query("//div[contains(concat(' ', normalize-space(@class), ' '), ' articles ')]")->item(0);

if (!$container instanceof DOMElement) {
        return 0;
}

$normalizeText = static function ($text) {
        if ($text === null) {
                return '';
        }

        if (!is_string($text)) {
                $text = (string) $text;
        }

        $text = html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
        $text = preg_replace('/\s+/u', ' ', $text);

        return trim($text);
};

$resolveImageSource = static function (DOMElement $node) use ($baseUrl) {
        $attributes = [
                'src',
                'data-src',
                'data-original',
                'data-lazy',
                'srcset',
                'data-srcset'
        ];

        foreach ($attributes as $attribute) {
                if (!$node->hasAttribute($attribute)) {
                        continue;
                }

                $value = trim($node->getAttribute($attribute));

                if ($value === '') {
                        continue;
                }

                if ($attribute === 'srcset' || $attribute === 'data-srcset') {
                        $parts = preg_split('/\s*,\s*/u', $value);
                        $value = $parts[0] ?? '';

                        if ($value !== '') {
                                $value = trim(preg_split('/\s+/u', $value)[0]);
                        }
                }

                if ($value === '') {
                        continue;
                }

                $normalized = lada_normalize_url($value, $baseUrl);

                if ($normalized !== '') {
                        return $normalized;
                }
        }

        return '';
};

if (!function_exists('azh_is_today_publication')) {
        function azh_is_today_publication(string $text): bool
        {
                $text = mb_strtolower(trim($text));

                if ($text === '') {
                        return false;
                }

                $text = str_replace(['&nbsp;', "\xC2\xA0"], ' ', $text);

                if (mb_stripos($text, 'сегодня') !== false) {
                        return true;
                }

                $months = [
                        'января' => 1,
                        'февраля' => 2,
                        'марта' => 3,
                        'апреля' => 4,
                        'мая' => 5,
                        'июня' => 6,
                        'июля' => 7,
                        'августа' => 8,
                        'сентября' => 9,
                        'октября' => 10,
                        'ноября' => 11,
                        'декабря' => 12,
                ];

                if (preg_match('/(\d{1,2})\s+([а-яё]+)(?:\s+(\d{4}))?/u', $text, $matches)) {
                        $day = (int) $matches[1];
                        $monthName = $matches[2];
                        $year = isset($matches[3]) && $matches[3] ? (int) $matches[3] : (int) date('Y');

                        if (isset($months[$monthName])) {
                                $formatted = sprintf('%04d-%02d-%02d', $year, $months[$monthName], $day);

                                return $formatted === date('Y-m-d');
                        }
                }

                return false;
        }
}

$articles = $xpath->query('.//article', $container);

foreach ($articles as $article) {
        if (!$article instanceof DOMElement) {
                continue;
        }

        $linkNode = $xpath->query(".//a[contains(@class,'news-list__item')]", $article)->item(0);

        if (!$linkNode instanceof DOMElement) {
                continue;
        }

        $href = trim($linkNode->getAttribute('href'));

        if ($href === '') {
                continue;
        }

        $fullLink = lada_normalize_url($href, $baseUrl);

        if ($fullLink === '') {
                continue;
        }

        $dateOk = false;
        $dateNodes = $xpath->query(".//small[contains(@class,'text-muted')]", $article);

        foreach ($dateNodes as $dateNode) {
                $dateText = $normalizeText($dateNode->textContent);

                if ($dateText !== '' && azh_is_today_publication($dateText)) {
                        $dateOk = true;
                        break;
                }
        }

        if (!$dateOk) {
                continue;
        }

        $titleNode = $xpath->query(".//h3[contains(@class,'news-list__title')]", $article)->item(0);
        $title = $titleNode ? $normalizeText($titleNode->textContent) : '';

        if ($title === '') {
                continue;
        }

        $announceNode = $xpath->query(".//span[contains(@class,'news-list__announce')]", $article)->item(0);
        $short_story = $announceNode ? $normalizeText($announceNode->textContent) : '';

        $poster = '';
        $posterNode = $xpath->query(".//span[contains(@class,'news-list__image')]//img", $article)->item(0);

        if ($posterNode instanceof DOMElement) {
                $poster = $resolveImageSource($posterNode);
        }

        $safe_link = $db->safesql($fullLink);
        $is_post = $db->super_query("SELECT count(*) as count FROM " . PREFIX . "_post WHERE url='$safe_link' LIMIT 1");

        if ($is_post['count'] > 0) {
                continue;
        }

        if (addToList('azh', $title, $poster, $fullLink, $short_story, $category_news, $file)) {
                $count++;
        }
}

return $count;
?>]]></replacecode>
                        <enabled>1</enabled>
                </operation>
        </file>
        <file name="engine/modules/parse_tengri_list.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));
$count = 0; // счетчик новых ссылок

$content = getPageContent($url);
if ($content === false) {
    // Не удалось загрузить страницу — лог уже был, просто выходим
    return 0;
}

preg_match_all("#<div class=\"content_main_item\">(.*?)<span class=\"content_item_meta_viewings\">#uis", $content, $matches);
foreach($matches[1] as $post)
{
    $post_ = str_replace(" ", "", $post);
    $post_ = str_replace("\n", "", $post_);

    if (strpos($post_, "<span>Сегодня</span>") === false) continue;

    preg_match("#src=\"(.*?)\"#uis", $post, $match);
    $poster = trim($match[1]);
    if (strpos($poster, 'tengrinews') === false) $poster = "https://tengrinews.kz" . $poster;
    preg_match("#<span class=\"content_main_item_title\">.*?<a href=.*?>(.*?)<\/a>#uis", $post, $match);
    $title = trim($match[1]);
    preg_match("#href=\"(.*?)\"#uis", $post, $match);
    $post_link = trim($match[1]);
    if (strpos($post_link, "https://") === false) $post_link = "https://tengrinews.kz" . $post_link;

    $post_link = $db->safesql($post_link);

    preg_match("#<span class=\"content_main_item_announce\">(.*?)<\/span>#uis", $post, $match);
    $short_story = trim($match[1]);		

    $is_post = $db->super_query("SELECT count(*) as count FROM ".PREFIX."_post where url='$post_link' limit 0,1");
    if ($is_post['count'] == 0)
    {
        addToList("tengri", $title, $poster, $post_link, $short_story, $category_news, $file);
        $count++; // ← Увеличиваем счетчик только при добавлении новой ссылки
    }
}

return $count; // ← Возвращаем число новых ссылок
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/mybuh_news_list.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));
$content = getPageContent($url);
if (!$content) return 0;

$count = 0;
$today = date("Y-m-d");

// Найти все <li>...</li>
preg_match_all('#<li[^>]*>(.*?)</li>#is', $content, $li_matches);

foreach ($li_matches[1] as $item) {
    // Ссылка
    if (!preg_match('#<a[^>]+class="list-item"[^>]+href="([^"]+)"#is', $item, $hrefMatch)) continue;
    $link = "https://mybuh.kz" . $hrefMatch[1];

    // Заголовок
    preg_match('#<h3[^>]*class="list-item__title title-hover"[^>]*>(.*?)</h3>#is', $item, $titleMatch);
    $title = isset($titleMatch[1]) ? trim(strip_tags($titleMatch[1])) : '';
    if (!$title) continue;

    // Краткое описание
    preg_match('#<p[^>]*class="list-item__description"[^>]*>(.*?)</p>#is', $item, $descMatch);
    $short_descr = isset($descMatch[1]) ? trim(strip_tags($descMatch[1])) : '';

    // Дата публикации
    preg_match('#<time[^>]+datetime="([^"]+)"#is', $item, $dateMatch);
    $date = isset($dateMatch[1]) ? substr(trim($dateMatch[1]), 0, 10) : '';

    // Фильтрация только за сегодня (или убери эту строку, если надо всё)
    if ($date !== $today) continue;

    // Проверка на уникальность
    $safe_link = $db->safesql($link);
    $is_post = $db->super_query("SELECT count(*) as count FROM " . PREFIX . "_post WHERE url='$safe_link' LIMIT 1");

    if ($is_post['count'] == 0) {
        addToList("mybuh_news", $title, "", $link, $short_descr, $category_news, $file);
        $count++;
    }
}
return $count;
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/inc/prompts_db.php">
		<operation action="create">
			<replacecode><![CDATA[<?php

if (!defined('DATALIFEENGINE') || !defined('LOGGED_IN')) {
    header("HTTP/1.1 403 Forbidden");
    header('Location: ../../');
    die("Hacking attempt!");
}

$prompts_file = ENGINE_DIR . '/data/prompts.json';
$tags_file = ENGINE_DIR . '/data/tags.json';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
	

	
    if (isset($_POST['prompts'])) {
        file_put_contents($prompts_file, json_encode($_POST['prompts'], JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
    }
    if (isset($_POST['tags'])) {
        file_put_contents($tags_file, json_encode($_POST['tags'], JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
    }
    echo json_encode(['status' => 'ok']);
    exit;
}

$prompts_json = '{}';
if (file_exists($prompts_file)) {
    $raw = file_get_contents($prompts_file);
    $decoded = json_decode($raw, true);
    if (json_last_error() === JSON_ERROR_NONE) {
        $prompts_json = json_encode($decoded, JSON_UNESCAPED_UNICODE);
    }
}
$tags_json = '{}';
if (file_exists($tags_file)) {
    $raw = file_get_contents($tags_file);
    $decoded = json_decode($raw, true);
    if (json_last_error() === JSON_ERROR_NONE) {
        $tags_json = json_encode($decoded, JSON_UNESCAPED_UNICODE);
    }
}

if (empty($tags_json) || $tags_json == '{}') {
    $tags_json = json_encode([
        "role" => ["редактор", "SEO-копирайтер", "учитель"],
        "task" => ["перепиши текст", "объясни проще", "сделай краткий пересказ"],
        "modifier" => ["без эмоций", "структурно", "в виде списка"],
        "token" => ["пожалуйста", "будь добр", "удели внимание"]
    ], JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
}

// Пример реальных данных из новости с ID 138626 (условно)
$demo = [
    'title' => 'Текст заголовка новости',
    'short' => 'Краткое описание новости.',
    'full' => 'Полный текст новости...',
];

// Заголовок страницы DLE админки
echoheader("<i class='fa fa-cogs position-left'></i><span class='text-semibold'>Конструктор промптов</span>", "Редактор шаблонов и тегов");
?>

<style>
    .tag-item { background: #f9f9f9; padding: 10px; border-radius: 5px; margin-bottom: 8px; }
    .prompt-item { white-space: pre-wrap; background: #f1f1f1; padding: 10px; border-radius: 5px; margin-bottom: 10px; }
    .demo-output { background: #eef9ff; padding: 10px; border-left: 4px solid #007bff; margin-top: 10px; white-space: pre-wrap; }
</style>

<div class="container-fluid py-4">
  <div class="row">
    <div class="col-md-6">
      <h4>? Вариации промптов</h4>
      <div class="panel-group" id="promptTypes"></div>
    </div>
    <div class="col-md-6">
      <h4>?️ Доступные параметры</h4>
      <div class="panel-group" id="tagsAccordion"></div>
    </div>
    <div class="col-md-12 mt-3">
      <h4>? Доступные переменные в шаблонах</h4>
      <div class="alert alert-info">
        <code>[title]</code>, <code>[short-story]</code>, <code>[full-story]</code>, <code>{role}</code>, <code>{task}</code>, <code>{modifier}</code>, <code>{token}</code>
      </div>
      <button onclick="saveAll()" class="btn btn-success">? Сохранить всё</button>
    </div>

  </div>
</div>

<script>
let prompts = JSON.parse(<?= $prompts_json ?>);
let tags = JSON.parse(<?= $tags_json ?>);
const demo = '';

if (typeof prompts !== 'object' || prompts === null) prompts = {};
if (typeof tags !== 'object' || tags === null) tags = {};

console.log(prompts);
console.log(prompts);
const promptLabels = {
  title: '? Заголовки',
  short: '? Краткое описание',
  full: '? Полная новость',
  meta_title: '? Мета-заголовок',
  meta_description: '? Мета-описание'
};

const tagDescriptions = {
  role: 'добавить роль',
  task: 'добавить задачу',
  modifier: 'добавить уточнение',
  token: 'добавить усилитель'
};

const requiredPlaceholders = {
  title: ['[title]', '[short-story]'],
  short: ['[title]', '[full-story]'],
  full: ['[title]', '[short-story]', '[full-story]'],
  meta_title: ['[title]', '[short-story]'],
  meta_description: ['[title]', '[short-story]']
};

function renderDemo() {
  const input = document.getElementById('demo-input').value;
  let output = input
    .replaceAll('[title]', demo.title)
    .replaceAll('[short-story]', demo.short)
    .replaceAll('[full-story]', demo.full)
    .replaceAll('{role}', tags.role?.[0] || '')
    .replaceAll('{task}', tags.task?.[0] || '')
    .replaceAll('{modifier}', tags.modifier?.[0] || '')
    .replaceAll('{token}', tags.token?.[0] || '');
  document.getElementById('demo-output').innerText = 'Вывод: ' + output;
}

function initPromptSections() {
  const container = document.getElementById("promptTypes");
  for (const type in promptLabels) {
    if (!Array.isArray(prompts[type])) prompts[type] = [];
    container.innerHTML += `
      <div class="panel panel-default">
        <div class="panel-heading">
          <h4 class="panel-title">
            <a data-toggle="collapse" href="#collapse-${type}">${promptLabels[type]}</a>
          </h4>
        </div>
        <div id="collapse-${type}" class="panel-collapse collapse">
          <div class="panel-body">
            <div id="prompts-${type}"></div>
            <textarea class="form-control mb-2" id="textarea-${type}" rows="3" placeholder="Введите текст промпта..."></textarea>
            <button onclick="addPrompt('${type}')" class="btn btn-sm btn-primary">+ Добавить промпт</button>
          </div>
        </div>
      </div>`;
  }
}

function initTagsUI() {
  const container = document.getElementById("tagsAccordion");
  for (const key in tagDescriptions) {
    if (!Array.isArray(tags[key])) tags[key] = [];
    container.innerHTML += `
      <div class="panel panel-default">
        <div class="panel-heading">
          <h4 class="panel-title">
            <a data-toggle="collapse" href="#block-${key}">{${key}} — ${tagDescriptions[key]}</a>
          </h4>
        </div>
        <div id="block-${key}" class="panel-collapse collapse">
          <div class="panel-body">
            <div id="${key}-box"></div>
            <div class="input-group">
              <input type="text" class="form-control" id="input-${key}" placeholder="Добавить...">
              <span class="input-group-btn">
                <button onclick="addTag('${key}')" class="btn btn-primary">Добавить</button>
              </span>
            </div>
          </div>
        </div>
      </div>`;
  }
}

function addPrompt(type) {
  const val = document.getElementById('textarea-' + type).value.trim();
  if (!val) return alert("Введите текст промпта.");

  const found = requiredPlaceholders[type].some(ph => val.includes(ph));
  console.log('Требуемые плейсхолдеры:', requiredPlaceholders[type]);
  console.log('Текст промпта:', val);
  console.log('Найден хотя бы один плейсхолдер:', found);

  if (!found) return alert("Промпт должен содержать хотя бы один из обязательных тегов: " + requiredPlaceholders[type].join(', '));

  prompts[type].push(val);
  document.getElementById('textarea-' + type).value = '';
  renderPrompts(type);
}


function renderPrompts(type) {
	
	
  const box = document.getElementById("prompts-" + type);
  if (!box) return;
  box.innerHTML = "";
  console.log(prompts[type]);
  prompts[type].forEach((p, i) => {
    box.innerHTML += `<div class='prompt-item'><textarea class='form-control' rows='3' onchange='updatePrompt("${type}", ${i}, this.value)'>${p}</textarea><div class='text-right'><button onclick='removePrompt("${type}", ${i})' class='btn btn-sm btn-danger'>Удалить</button></div></div>`;
  });
}

function updatePrompt(type, index, val) {
  prompts[type][index] = val;
}

function removePrompt(type, index) {
  if (confirm("Удалить этот промпт?")) {
    prompts[type].splice(index, 1);
    renderPrompts(type);
  }
}

function addTag(type) {
  const input = document.getElementById("input-" + type);
  const value = input.value.trim();
  if (!value) return;
  if (!Array.isArray(tags[type])) tags[type] = [];
  tags[type].push(value);
  input.value = "";
  renderTags(type);
//  renderDemo();
}

function removeTag(type, i) {
  if (confirm("Удалить элемент?")) {
    tags[type].splice(i, 1);
    renderTags(type);
//    renderDemo();
  }
}

function renderTags(type) {
  const box = document.getElementById(type + "-box");
  if (!box) return;
  box.innerHTML = "";
  tags[type].forEach((t, i) => {
    box.innerHTML += `<div class='tag-item'><input class='form-control mb-2' value="${t}" onchange='updateTag("${type}", ${i}, this.value)'><div class='text-right'><button onclick='removeTag("${type}", ${i})' class='btn btn-sm btn-danger'>Удалить</button></div></div>`;
  });
}

function updateTag(type, i, val) {
  tags[type][i] = val;
//  renderDemo();
}

function saveAll() {
  fetch(window.location.href, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: new URLSearchParams({
      prompts: JSON.stringify(prompts),
      tags: JSON.stringify(tags)
    })
  }).then(r => r.json()).then(data => {
    if (data.status === 'ok') alert('✅ Сохранено');
    else alert('❌ Ошибка сохранения');
  });
}

window.onload = () => {
  initPromptSections();
  initTagsUI();
  for (const type in prompts) renderPrompts(type);
  for (const key in tags) renderTags(key);
//  renderDemo();
};
</script>
<?php
echofooter();
?>
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/mybuh_alluseful_list.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));
$content = getPageContent($url);
if (!$content) return 0;

$count = 0;
$today = date("Y-m-d");

// Найти все <li>...</li>
preg_match_all('#<li[^>]*>(.*?)</li>#is', $content, $li_matches);

foreach ($li_matches[1] as $item) {
    // Ссылка
    if (!preg_match('#<a[^>]+class="list-item"[^>]+href="([^"]+)"#is', $item, $hrefMatch)) continue;
    $link = "https://mybuh.kz" . $hrefMatch[1];

    // Заголовок
    preg_match('#<h3[^>]*class="list-item__title title-hover"[^>]*>(.*?)</h3>#is', $item, $titleMatch);
    $title = isset($titleMatch[1]) ? trim(strip_tags($titleMatch[1])) : '';
    if (!$title) continue;

    // Краткое описание
    preg_match('#<p[^>]*class="list-item__description"[^>]*>(.*?)</p>#is', $item, $descMatch);
    $short_descr = isset($descMatch[1]) ? trim(strip_tags($descMatch[1])) : '';

    // Дата публикации
    preg_match('#<time[^>]+datetime="([^"]+)"#is', $item, $dateMatch);
    $date = isset($dateMatch[1]) ? substr(trim($dateMatch[1]), 0, 10) : '';

    // Фильтрация только за сегодня (или убери эту строку, если надо всё)
    if ($date !== $today) continue;

    // Проверка на уникальность
    $safe_link = $db->safesql($link);
    $is_post = $db->super_query("SELECT count(*) as count FROM " . PREFIX . "_post WHERE url='$safe_link' LIMIT 1");

    if ($is_post['count'] == 0) {
        addToList("mybuh_news", $title, "", $link, $short_descr, $category_news, $file);
        $count++;
    }
}
return $count;
?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
        <file name="engine/modules/mybuh_alluseful.php">
                <operation action="create">
                        <replacecode><![CDATA[<?php

        $post_count = $settings['post_count'];

	$title = $item['title'];
	$link = $item['post_link'];
	$short_story = $item['short_story'];
	$category_news = $item['category'];

	$content = file_get_contents($link);

	preg_match("#<div class=\"d_text\">(.*?)<\/div>#uis", $content, $match);
	$text = trim($match[1]);
	$text = preg_replace([
			'/<p>(\s|&nbsp;|<br\s*\/?>)*<\/p>/i',
			'/<br\s*\/?>/i'
		], '', $text);
	$text = preg_replace('#<script\b[^>]*>(.*?)</script>#is', '', $text);

    if (preg_match('~<a[^>]*href="([^"]+)"[^>]*>\s*РУС\s*</a>~u', $html, $m)) {
      $clean_str = str_replace("https://mybuh.kz", "", $link);
      if (trim($m[1]) != $clean_str)
      {
        $link = "https://mybuh.kz".trim($m[1]);
        $content = file_get_contents($link);

         preg_match("#<div class=\"d_text\">(.*?)<\/div>#uis", $content, $match);
         $text = trim($match[1]);
         $text = preg_replace([
              '/<p>(\s|&nbsp;|<br\s*\/?>)*<\/p>/i',
              '/<br\s*\/?>/i'
          ], '', $text);
         $text = preg_replace('#<script\b[^>]*>(.*?)</script>#is', '', $text);
      }
    }

	$images = array();

        $res = addPost($short_story, "mybuh", "", $title, $text, "", "", $link, $images, $category_news);
?>]]></replacecode>
                        <enabled>1</enabled>
                </operation>
        </file>
        <file name="engine/modules/parse_lada_list.php">
                <operation action="create">
                        <replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));

$baseUrl = 'https://www.lada.kz';
$content = getPageContent($url, 15, false);

if (!$content) {
        return 0;
}

$previousState = libxml_use_internal_errors(true);
$dom = new DOMDocument('1.0', 'UTF-8');
$dom->loadHTML('<?xml encoding="utf-8"?>' . $content);
libxml_clear_errors();
libxml_use_internal_errors($previousState);

$xpath = new DOMXPath($dom);
$seen = [];
$count = 0;

$cards = $xpath->query("//div[contains(concat(' ', normalize-space(@class), ' '), ' news ') and contains(concat(' ', normalize-space(@class), ' '), ' col-lg-4 ')]");

foreach ($cards as $card) {
        $linkNode = $xpath->query(
                ".//a[contains(concat(' ', normalize-space(@class), ' '), ' news__link ')][contains(@href, '/aktau_news/') and not(contains(@href, '#'))]",
                $card
        )->item(0);

        if (!$linkNode) {
                continue;
        }

        $href = trim($linkNode->getAttribute('href'));

        if ($href === '') {
                continue;
        }

        $fullLink = lada_normalize_url($href, $baseUrl);

        if ($fullLink === '' || isset($seen[$fullLink])) {
                continue;
        }

        $seen[$fullLink] = true;

        $title = trim(preg_replace('/\s+/u', ' ', $linkNode->textContent));

        if ($title === '') {
                $heading = $xpath->query(".//h1|.//h2|.//h3|.//h4", $card)->item(0);

                if ($heading) {
                        $title = trim(preg_replace('/\s+/u', ' ', $heading->textContent));
                }
        }

        if ($title === '') {
                continue;
        }

        $poster = '';
        $imageNode = $xpath->query(".//img", $card)->item(0);

        if ($imageNode) {
                $src = $imageNode->getAttribute('src');

                if ($src === '') {
                        $src = $imageNode->getAttribute('data-src');
                }

                if ($src === '') {
                        $src = $imageNode->getAttribute('data-original');
                }

                $poster = lada_normalize_url($src, $baseUrl);
        }

        $short_story = '';
        $summaryNode = $xpath->query(".//*[contains(@class,'descr') or contains(@class,'intro') or contains(@class,'announce') or contains(@class,'text')]", $card)->item(0);

        if ($summaryNode) {
                $short_story = trim(preg_replace('/\s+/u', ' ', $summaryNode->textContent));
        }

        $safe_link = $db->safesql($fullLink);
        $is_post = $db->super_query("SELECT count(*) as count FROM " . PREFIX . "_post WHERE url='$safe_link' LIMIT 1");

        if ($is_post['count'] > 0) {
                continue;
        }

        if (addToList("lada", $title, $poster, $fullLink, $short_story, $category_news, $file)) {
                $count++;
        }
}

$links = $xpath->query("//a[contains(concat(' ', normalize-space(@class), ' '), ' news__link ')][contains(@href, '/aktau_news/') and not(contains(@href, '#'))]");

foreach ($links as $linkNode) {
        $href = trim($linkNode->getAttribute('href'));

        if ($href === '') {
                continue;
        }

        $fullLink = lada_normalize_url($href, $baseUrl);

        if ($fullLink === '' || isset($seen[$fullLink])) {
                continue;
        }

        $seen[$fullLink] = true;

        $title = trim(preg_replace('/\s+/u', ' ', $linkNode->textContent));

        $container = $linkNode;
        $depth = 0;

        while ($container && $depth < 6) {
                $container = $container->parentNode;
                $depth++;

                if (!$container || $container->nodeType !== XML_ELEMENT_NODE) {
                        continue;
                }

                $classAttr = $container->attributes->getNamedItem('class');
                if ($classAttr && preg_match('/news|item|card|story|article|list/i', $classAttr->nodeValue)) {
                        break;
                }
        }

        if (!$container || $container->nodeType !== XML_ELEMENT_NODE) {
                $container = $linkNode->parentNode;
        }

        if ($title === '' && $container) {
                $heading = $xpath->query(".//h1|.//h2|.//h3|.//h4", $container)->item(0);
                if ($heading) {
                        $title = trim(preg_replace('/\s+/u', ' ', $heading->textContent));
                }
        }

        if ($title === '') {
                continue;
        }

        $short_story = '';

        if ($container) {
                foreach ($xpath->query(".//p", $container) as $paragraph) {
                        $text = trim(preg_replace('/\s+/u', ' ', $paragraph->textContent));
                        if ($text !== '') {
                                $short_story = $text;
                                break;
                        }
                }

                if ($short_story === '') {
                        $descNode = $xpath->query(".//*[contains(@class,'descr') or contains(@class,'intro') or contains(@class,'announce') or contains(@class,'text')]", $container)->item(0);
                        if ($descNode) {
                                $short_story = trim(preg_replace('/\s+/u', ' ', $descNode->textContent));
                        }
                }
        }

        $poster = '';

        if ($container) {
                foreach ($xpath->query(".//img", $container) as $img) {
                        $src = $img->getAttribute('src') ?: $img->getAttribute('data-src') ?: $img->getAttribute('data-original');
                        $src = lada_normalize_url($src, $baseUrl);

                        if ($src !== '') {
                                $poster = $src;
                                break;
                        }
                }
        }

        $safe_link = $db->safesql($fullLink);
        $is_post = $db->super_query("SELECT count(*) as count FROM " . PREFIX . "_post WHERE url='$safe_link' LIMIT 1");

        if ($is_post['count'] > 0) {
                continue;
        }

        if (addToList("lada", $title, $poster, $fullLink, $short_story, $category_news, $file)) {
                $count++;
        }
}

if ($count === 0 && preg_match('#window.__NUXT__\s*=\s*(\{.*?\});#is', $content, $nuxtMatch)) {
        $nuxtData = json_decode($nuxtMatch[1], true);
        $items = [];
        lada_collect_from_array($nuxtData, $items);

        foreach ($items as $entry) {
                $entryLink = isset($entry['url']) ? lada_normalize_url($entry['url'], $baseUrl) : '';

                if ($entryLink === '' || isset($seen[$entryLink])) {
                        continue;
                }

                $entryTitle = '';

                if (!empty($entry['title'])) {
                        $entryTitle = trim($entry['title']);
                } elseif (!empty($entry['name'])) {
                        $entryTitle = trim($entry['name']);
                }

                if ($entryTitle === '') {
                        continue;
                }

                $entryShort = '';

                foreach (['announce', 'description', 'anons', 'preview_text'] as $shortKey) {
                        if (!empty($entry[$shortKey])) {
                                $entryShort = trim($entry[$shortKey]);
                                break;
                        }
                }

                $entryPoster = '';

                foreach (['image', 'img', 'picture', 'preview'] as $posterKey) {
                        if (!empty($entry[$posterKey])) {
                                $entryPoster = lada_normalize_url($entry[$posterKey], $baseUrl);
                                if ($entryPoster !== '') {
                                        break;
                                }
                        }
                }

                $safe_link = $db->safesql($entryLink);
                $is_post = $db->super_query("SELECT count(*) as count FROM " . PREFIX . "_post WHERE url='$safe_link' LIMIT 1");

                if ($is_post['count'] > 0) {
                        continue;
                }

                if (addToList("lada", $entryTitle, $entryPoster, $entryLink, $entryShort, $category_news, $file)) {
                        $seen[$entryLink] = true;
                        $count++;
                }
        }
}

return $count;
?>]]></replacecode>
                        <enabled>1</enabled>
                </operation>
        </file>
        <file name="engine/modules/parse_lada.php">
                <operation action="create">
                        <replacecode><![CDATA[<?php
require_once (DLEPlugins::Check(ENGINE_DIR . '/modules/helpers.php'));

$baseUrl = 'https://www.lada.kz';

$title = $item['title'];
$post_link = $item['post_link'];
$short_story = $item['short_story'];
$category_news = $item['category'];
$poster = $item['poster'];

$content = getPageContent($post_link, 20, false);

if (!$content) {
        return;
}

$previousState = libxml_use_internal_errors(true);
$dom = new DOMDocument('1.0', 'UTF-8');
$dom->loadHTML('<?xml encoding="utf-8"?>' . $content);
libxml_clear_errors();
libxml_use_internal_errors($previousState);

$xpath = new DOMXPath($dom);

$resolveImageSource = static function ($node) use ($baseUrl) {
        if (!$node instanceof DOMElement) {
                return '';
        }

        $attributes = [
                'src',
                'data-src',
                'data-original',
                'data-lazy',
                'srcset',
                'data-srcset'
        ];

        foreach ($attributes as $attribute) {
                if (!$node->hasAttribute($attribute)) {
                        continue;
                }

                $value = trim($node->getAttribute($attribute));

                if ($value === '') {
                        continue;
                }

                if ($attribute === 'srcset' || $attribute === 'data-srcset') {
                        $parts = preg_split('/\s*,\s*/u', $value);
                        $value = $parts[0] ?? '';

                        if ($value !== '') {
                                $value = trim(preg_split('/\s+/u', $value)[0]);
                        }
                }

                if ($value === '') {
                        continue;
                }

                $normalized = lada_normalize_url($value, $baseUrl);

                if ($normalized !== '') {
                        return $normalized;
                }
        }

        return '';
};

$selectors = [
        "//div[contains(@class,'news__content')]",
        "//div[contains(@class,'news-detail__content')]",
        "//div[contains(@class,'article__content')]",
        "//div[contains(@class,'article-body')]",
        "//div[contains(@class,'article') and contains(@class,'content')]",
        "//article[contains(@class,'news')]",
        "//article[contains(@class,'article')]",
        "//div[contains(@class,'fullstory')]",
        "//div[contains(@class,'news-detail')]//div[contains(@class,'content')]",
        "//div[contains(@class,'post__text')]",
        "//div[contains(@class,'content') and contains(@class,'text')]"
];

$contentNode = null;
$posterFromArticle = '';

foreach ($selectors as $selector) {
        $candidate = $xpath->query($selector)->item(0);

        if ($candidate) {
                $contentNode = $candidate;
                break;
        }
}

if (!$contentNode) {
        $contentNode = $xpath->query("//article")->item(0);
}

if (!$contentNode) {
        $contentNode = $xpath->query("//div[contains(@class,'content')]")->item(0);
}

if (!$contentNode) {
        return;
}

$originalHtml = '';

if ($contentNode instanceof DOMElement) {
        $originalHtml = $contentNode->getAttribute('data-original');
}

if ($originalHtml !== '') {
        $decoded = html_entity_decode($originalHtml, ENT_QUOTES | ENT_HTML5, 'UTF-8');
        lada_import_html_fragment($dom, $contentNode, $decoded);
}

if ($contentNode instanceof DOMElement && $contentNode->hasAttribute('data-original')) {
        $contentNode->removeAttribute('data-original');
}

$dataOriginalNodes = $xpath->query(".//*[@data-original]", $contentNode);

if ($dataOriginalNodes instanceof DOMNodeList) {
        for ($index = 0; $index < $dataOriginalNodes->length; $index++) {
                $nodeWithAttribute = $dataOriginalNodes->item($index);

                if ($nodeWithAttribute instanceof DOMElement) {
                        $nodeWithAttribute->removeAttribute('data-original');
                }
        }
}

$extractNode = $xpath->query("//div[contains(@class,'news__extract')]")->item(0);
$preparedExtract = '';

if ($extractNode) {
        if ($extractNode instanceof DOMElement) {
                $dataOriginal = $extractNode->getAttribute('data-original');

                if ($dataOriginal !== '') {
                        $decodedExtract = html_entity_decode($dataOriginal, ENT_QUOTES | ENT_HTML5, 'UTF-8');

                        $previousState = libxml_use_internal_errors(true);
                        $tempDom = new DOMDocument('1.0', 'UTF-8');
                        $tempDom->loadHTML('<?xml encoding="utf-8"?>' . $decodedExtract);
                        libxml_clear_errors();
                        libxml_use_internal_errors($previousState);

                        $body = $tempDom->getElementsByTagName('body')->item(0);

                        if ($body) {
                                $preparedExtract = trim(preg_replace('/\s+/u', ' ', $body->textContent));
                        }
                }
        }

        if ($extractNode instanceof DOMElement && $extractNode->hasAttribute('data-original')) {
                $extractNode->removeAttribute('data-original');
        }

        if ($preparedExtract === '') {
                $preparedExtract = trim(preg_replace('/\s+/u', ' ', $extractNode->textContent));
        }
}

$posterSelectors = [
        "//div[contains(@class,'mainpic')]//img",
        "//div[contains(@class,'news__image')]//img",
        "//figure[contains(@class,'news__image')]//img",
        "//div[contains(@class,'news-detail__img')]//img"
];

foreach ($posterSelectors as $posterSelector) {
        $posterCandidateNode = $xpath->query($posterSelector)->item(0);

        if (!$posterCandidateNode) {
                continue;
        }

        $normalizedPoster = $resolveImageSource($posterCandidateNode);

        if ($normalizedPoster !== '') {
                $posterFromArticle = $normalizedPoster;
                break;
        }
}

$captionText = '';
$captionSelectors = [
        ".//*[contains(concat(' ', normalize-space(@class), ' '), ' news__image-caption ')]",
        ".//figcaption[contains(concat(' ', normalize-space(@class), ' '), ' image-caption ')]",
        ".//figcaption"
];

foreach ($captionSelectors as $captionSelector) {
        $captionNode = null;

        if ($contentNode) {
                $captionNode = $xpath->query($captionSelector, $contentNode)->item(0);
        }

        if (!$captionNode) {
                $captionNode = $xpath->query($captionSelector)->item(0);
        }

        if (!$captionNode) {
                continue;
        }

        $captionCandidate = trim(preg_replace('/\s+/u', ' ', $captionNode->textContent));

        if ($captionCandidate !== '') {
                $captionText = $captionCandidate;
        }

        if ($captionNode->parentNode) {
                $captionNode->parentNode->removeChild($captionNode);
        }

        if ($captionText !== '') {
                break;
        }
}

$removeSelectors = [
        ".//script",
        ".//style",
        ".//noscript",
        ".//div[contains(@class,'share')]",
        ".//div[contains(@class,'social')]",
        ".//div[contains(@class,'banner')]",
        ".//div[contains(@class,'adv')]",
        ".//div[contains(@class,'advert')]",
        ".//div[contains(@class,'promo')]",
        ".//div[contains(@class,'subscribe')]",
        ".//div[contains(@class,'breadcrumbs')]",
        ".//div[contains(@class,'tags')]",
        ".//ul[contains(@class,'tags')]",
        ".//div[contains(@class,'source')]",
        ".//div[contains(@class,'author')]",
        ".//section[contains(@class,'related')]",
        ".//aside",
        ".//footer",
        ".//div[contains(@class,'news__extract')]",
        ".//div[contains(@class,'news__reactions_widget')]",
        ".//div[contains(@class,'tg-subscribe')]",
        ".//div[contains(@class,'partner-news')]",
        ".//*[contains(@class,'google-auto-placed')]",
        ".//div[contains(@class,'comments')]",
        ".//button",
        ".//input"
];

foreach ($removeSelectors as $selector) {
        $nodes = $xpath->query($selector, $contentNode);

        for ($index = $nodes->length - 1; $index >= 0; $index--) {
                $node = $nodes->item($index);

                if ($node && $node->parentNode) {
                        $node->parentNode->removeChild($node);
                }
        }
}

$commentNodes = $xpath->query('.//comment()', $contentNode);

for ($index = $commentNodes->length - 1; $index >= 0; $index--) {
        $comment = $commentNodes->item($index);

        if ($comment && $comment->parentNode) {
                $comment->parentNode->removeChild($comment);
        }
}

$images = [];
$imageNodes = $xpath->query('.//img', $contentNode);

for ($index = $imageNodes->length - 1; $index >= 0; $index--) {
        $img = $imageNodes->item($index);
        if (!$img) {
                continue;
        }

        $normalized = $resolveImageSource($img);

        if ($normalized === '') {
                if ($img->parentNode) {
                        $img->parentNode->removeChild($img);
                }

                continue;
        }

        $images[] = $normalized;
        $img->setAttribute('src', $normalized);
        $img->removeAttribute('data-src');
        $img->removeAttribute('data-original');
        $img->removeAttribute('data-lazy');
        $img->removeAttribute('loading');
}

$images = array_values(array_unique($images));

if ($posterFromArticle !== '' && !in_array($posterFromArticle, $images, true)) {
        array_unshift($images, $posterFromArticle);
}

if (trim($short_story) === '' && $preparedExtract !== '') {
        $short_story = $preparedExtract;
}

if (trim($short_story) === '') {
        $firstParagraph = $xpath->query('.//p', $contentNode)->item(0);

        if ($firstParagraph) {
                $short_story = trim(preg_replace('/\s+/u', ' ', $firstParagraph->textContent));
        }
}

$anchorNodes = $xpath->query('.//a', $contentNode);

for ($index = $anchorNodes->length - 1; $index >= 0; $index--) {
        $anchor = $anchorNodes->item($index);

        if (!$anchor) {
                continue;
        }

        $fragment = $dom->createDocumentFragment();

        while ($anchor->firstChild) {
                $fragment->appendChild($anchor->firstChild);
        }

        if ($anchor->parentNode) {
                $anchor->parentNode->replaceChild($fragment, $anchor);
        }
}

$text = '';

if ($contentNode instanceof DOMElement) {
        $classAttribute = ' ' . preg_replace('/\s+/u', ' ', $contentNode->getAttribute('class')) . ' ';

        if (strpos($classAttribute, ' news__content ') !== false && strpos($classAttribute, ' xs-mb-25 ') !== false) {
                for ($child = $contentNode->firstChild; $child; $child = $child->nextSibling) {
                        $text .= $dom->saveHTML($child);
                }
        }
}

if ($text === '') {
        $text = $dom->saveHTML($contentNode);
}

$text = trim($text);

if ($captionText !== '' && stripos($text, 'news__image-caption') === false) {
        $escapedCaption = htmlspecialchars($captionText, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
        $captionHtml = '<div class="news__image-caption xs-mb-15 xl-mb-35">' . $escapedCaption . '</div>';

        $text = preg_replace('/(<img\b[^>]*>)/iu', '$1' . $captionHtml, $text, 1, $replacedCount);

        if ((int)$replacedCount === 0) {
                $text .= $captionHtml;
        }
}

if ($text === '') {
        return;
}

if ($posterFromArticle !== '') {
        $poster = $posterFromArticle;
}

if ($poster) {
        $poster = lada_normalize_url($poster, $baseUrl);
}

if (!$poster && !empty($images)) {
        $poster = $images[0];
}

addPost($short_story, "https://www.lada.kz", "", $title, $text, $poster, $poster, $post_link, $images, $category_news, $captionText);
?>]]></replacecode>
                        <enabled>1</enabled>
                </operation>
        </file>
        <file name="engine/modules/post_send.php">
                <operation action="create">
                        <replacecode><![CDATA[<?php

                        /*telegram*/
			if($c_url) {
				$full_link = $config['http_home_url'] . $c_url . "/" . $row['id'] . "-" . $row['alt_name'] . ".html";
			} else {
				$full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
			}

			$photo = $config['http_home_url'] . "uploads/posts/" . $xfieldsdata['picture'];

echo $photo;

			$title = strip_tags($title);
			$short = strip_tags($short_story);
			$link = htmlspecialchars($full_link, ENT_QUOTES, 'UTF-8');

			$caption = "<b>" . $title . "</b>\n\n" . $short . "\n\n<a href=\"" . $link . "\">Читать подробнее</a>";

			$upload_url = "https://api.telegram.org/bot7637833791:AAFtFAL9oxkU8FdI1ATtFVHsw3LyyOnV5IU/sendPhoto";

			if ($overall_settings['parse_posters'] != 1)$photo = "";

			$ch = curl_init($upload_url);

			curl_setopt($ch, CURLOPT_POSTFIELDS, [
				"chat_id" => "-".$config['tg_group'],
				"photo" => $photo,
				"caption" => $caption,
				"parse_mode" => "HTML"
			]);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);	
			$response = curl_exec($ch);
			file_put_contents(ENGINE_DIR . '/parser/logs/telegram_response.log', $response . "\n", FILE_APPEND);
			curl_close($ch);
			/*telegram*/

			/*facebook*/
			// ===================== НАСТРОЙКИ =====================
			$page_id = $config['facebook_page_id'];
			$access_token = $config['facebook_access_token'];

			// Проверяем, что все данные есть
			if(empty($row['id']) || empty($row['alt_name']) || empty($title) || empty($short_story)) {
				file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | Нет нужных данных для постинга\n", FILE_APPEND);
				return;
			}

			// ===================== ПОДГОТОВКА ДАННЫХ =====================
			if($c_url) {
				$full_link = $config['http_home_url'] . $c_url . "/" . $row['id'] . "-" . $row['alt_name'] . ".html";
			} else {
				$full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
			}

			$photo = $config['http_home_url'] . "uploads/posts/" . $xfieldsdata['picture'];

			if ($overall_settings['parse_posters'] != 1)$photo = "";

			$title = strip_tags($title);
			$short = strip_tags($short_story);
			$link = htmlspecialchars($full_link, ENT_QUOTES, 'UTF-8');
			$message = $title . "\n\n" . $short . "\n\nПодробнее: " . $link;

			// ===================== ЛОГИРОВАНИЕ ДЛЯ ОТЛАДКИ =====================
			file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | Start Facebook block\n", FILE_APPEND);

			// ===================== ОТПРАВКА В FACEBOOK =====================

			// ---- Если есть фото, публикуем фото с подписью ----
			if(!empty($xfieldsdata['picture'])) {
				$upload_url = "https://graph.facebook.com/{$page_id}/photos?access_token={$access_token}";
				$post_fields = [
					'caption' => $message,
					'url'     => $photo // Должна быть ПРЯМАЯ ссылка!
				];
				file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | Photo mode: $photo\n", FILE_APPEND);
			} else {
				// ---- Если нет фото, публикуем просто текст ----
				$upload_url = "https://graph.facebook.com/{$page_id}/feed?access_token={$access_token}";
				$post_fields = [
					'message' => $message
				];
				file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | Text mode (без фото)\n", FILE_APPEND);
			}

			// ===================== CURL =====================
			$ch = curl_init($upload_url);
			curl_setopt($ch, CURLOPT_POST, 1);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

			$response = curl_exec($ch);

			file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | RESPONSE: " . print_r($response,1) . "\n", FILE_APPEND);

			if (curl_errno($ch)) {
				file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | CURL ERROR: " . curl_error($ch) . "\n", FILE_APPEND);
			}

			curl_close($ch);

			// ===================== КОНЕЦ =====================
			file_put_contents(__DIR__ . '/facebook_debug.log', date('Y-m-d H:i:s') . " | END Facebook block\n", FILE_APPEND);
			/*facebook*/

			/*vk*/
			if (!empty($config['vk_group_id']) && !empty($config['vk_access_token'])) {
			$vk_group_id = $config['vk_group_id'];
			$vk_access_token = $config['vk_access_token'];
			$vk_api_version = "5.199";
			$vk_log = __DIR__ . '/vk_debug.log';

			// Формируем ссылку на новость
			if($c_url) {
				$full_link = $config['http_home_url'] . $c_url . "/" . $row['id'] . "-" . $row['alt_name'] . ".html";
			} else {
				$full_link = $config['http_home_url'] . $row['id'] . "-" . $row['alt_name'] . ".html";
			}

			$photo = $config['http_home_url'] . "uploads/posts/" . $xfieldsdata['picture'];
			$title = strip_tags($title);
			$short = strip_tags($short_story);
			$link = htmlspecialchars($full_link, ENT_QUOTES, 'UTF-8');

			// Текст для поста
			$message = $title . "\n\n" . $short . "\n\nПодробнее: " . $link;

			file_put_contents($vk_log, date('Y-m-d H:i:s') . " | VK: Начало блока\n", FILE_APPEND);

			// 1. Получить upload_url
			$upload_server_url = "https://api.vk.com/method/photos.getWallUploadServer?group_id=" . abs($vk_group_id) . "&access_token=$vk_access_token&v=$vk_api_version";
			$upload_response = file_get_contents($upload_server_url);
			file_put_contents($vk_log, date('Y-m-d H:i:s') . " | Ответ getWallUploadServer: " . $upload_response . "\n", FILE_APPEND);

			$upload_response = json_decode($upload_response, true);
			$upload_url = $upload_response['response']['upload_url'] ?? null;

			$photo_file_path = $_SERVER['DOCUMENT_ROOT'] . "/uploads/posts/" . $xfieldsdata['picture']; // путь на сервере

			if (!file_exists($photo_file_path)) {
				file_put_contents($vk_log, "Файл фото не найден: $photo_file_path\n", FILE_APPEND);
			} else {
				$photo_file = new CURLFile($photo_file_path);
				$ch = curl_init($upload_url);
				curl_setopt($ch, CURLOPT_POST, 1);
				curl_setopt($ch, CURLOPT_POSTFIELDS, ['photo' => $photo_file]);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				$upload_result = curl_exec($ch);
				curl_close($ch);

				file_put_contents($vk_log, date('Y-m-d H:i:s') . " | Ответ upload фото: " . $upload_result . "\n", FILE_APPEND);

				$upload_result = json_decode($upload_result, true);

				// 3. Сохранить фото
				$save_photo_url = "https://api.vk.com/method/photos.saveWallPhoto";
				$save_photo_params = [
					'group_id' => abs($vk_group_id),
					'photo'    => $upload_result['photo'] ?? '',
					'server'   => $upload_result['server'] ?? '',
					'hash'     => $upload_result['hash'] ?? '',
					'access_token' => $vk_access_token,
					'v'            => $vk_api_version
				];
				$save_photo_url_full = $save_photo_url . '?' . http_build_query($save_photo_params);
				$ch = curl_init($save_photo_url_full);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				$save_photo_result = curl_exec($ch);
				curl_close($ch);

				file_put_contents($vk_log, date('Y-m-d H:i:s') . " | Ответ saveWallPhoto: " . $save_photo_result . "\n", FILE_APPEND);

				$save_photo_result = json_decode($save_photo_result, true);
				if (!empty($save_photo_result['response'][0]['id']) && !empty($save_photo_result['response'][0]['owner_id'])) {
					$photo_id = $save_photo_result['response'][0]['id'];
					$owner_id = $save_photo_result['response'][0]['owner_id'];

					// 4. Опубликовать пост с фото
					$post_url = "https://api.vk.com/method/wall.post";
					$post_params = [
						'owner_id' => $vk_group_id,
						'from_group' => 1,
						'message' => $message,
						'attachments' => "photo{$owner_id}_{$photo_id}",
						'access_token' => $vk_access_token,
						'v' => $vk_api_version
					];

					$post_url_full = $post_url . '?' . http_build_query($post_params);
					$ch = curl_init($post_url_full);
					curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
					$post_result = curl_exec($ch);
					curl_close($ch);

					file_put_contents($vk_log, date('Y-m-d H:i:s') . " | Ответ wall.post: " . $post_result . "\n", FILE_APPEND);
				} else {
					file_put_contents($vk_log, "Ошибка сохранения фото: " . print_r($save_photo_result, 1) . "\n", FILE_APPEND);
				}
			}

			file_put_contents($vk_log, date('Y-m-d H:i:s') . " | VK: Конец блока\n", FILE_APPEND);
			}
			/*vk*/


?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
</dleplugin>
